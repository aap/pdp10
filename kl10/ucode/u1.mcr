; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 1
; TABLE OF CONTENTS

; 1	MICROCODE CONDITIONAL ASSEMBLY PARAMETERS FOR ITS
; 33	MIT REVISION HISTORY
; 115	DEC REVISION HISTORY
; 400	CONDITIONAL ASSEMBLY VARIABLE DEFINITIONS
; 553	HOW TO READ THE MICROCODE -- FORMATS & CONSTRUCTS
; 748	MICROCODE LISTING TEMPLATE
; 799	KL10 INSTRUCTION OPCODE MAP
; 865	CONTROL RAM DEFINITIONS -- AD
; 922	CONTROL RAM DEFINITIONS -- DATA PATH MIXERS
; 978	CONTROL RAM DEFINITIONS -- 10-BIT LOGIC
; 1035	CONTROL RAM DEFINITIONS -- MEM SPECIAL FUNCTIONS
; 1066	CONTROL RAM DEFINITIONS -- SKIP/COND SPECIAL FUNCTIONS
; 1143	CONTROL RAM DEFINITIONS -- DISP/SPEC SPECIAL FUNCTIONS
; 1189	CONTROL RAM DEFINITIONS -- MAGIC NUMBER FIELD
; 1465	DISPATCH RAM DEFINITIONS
; 1507	MACROS -- AC TRANSFERS
; 1549	MACROS -- DATA PATH TRANSFERS AND SHIFTS
; 1630	MACROS -- ARITHMETIC
; 1690	MACROS -- SCRATCH AC'S (BLOCK 7)
; 1785	MACROS -- ITS AC BLOCKS USAGE TABLE
; 1862	MACROS -- KL-MODE PAGING REGISTERS
; 1976	MACROS -- ITS JPC RING REGISTERS
; 2046	MACROS -- REGISTERS FOR MUSIC
; 2116	MACROS -- LISP-RELATED REGISTERS
; 2126	MACROS -- CONSTANT GENERATION
; 2168	MACROS -- ADDRESS MANIPULATION
; 2212	MACROS -- LONG (72-BIT) ARITHMETIC
; 2230	MACROS -- HALFWORD MANIPULATION
; 2262	MACROS -- SC
; 2303	MACROS -- FE
; 2357	MACROS -- AR MIXER MIXER (BITS 0-8)
; 2414	MACROS -- MICROPROGRAM SKIPS
; 2461	MACROS -- CRY0 GENERATORS
; 2472	MACROS -- SUBROUTINE CALL AND RETURNS
; 2490	MACROS -- DISPATCHES
; 2522	MACROS -- I/O OPERATIONS ON EBUS
; 2578	MACROS -- MEMORY ACCESS
; 2633	MACROS -- FLAG CONTROL
; 2684	MACROS -- STATE REGISTER CONTROL
; 2718	DISPATCH RAM MACROS
; 2795	THE INSTRUCTION LOOP
; 2881	NEXT INSTRUCTION DISPATCH
; 2991	EFFECTIVE ADDRESS COMPUTATION AND OPERAND FETCH
; 3013	WAIT FOR (E)
; 3055	TERMINATION
; 3102	MOVE GROUP, EXCH, BLT
; 3159	HALFWORD GROUP
; 3302	DMOVE, DMOVN, DMOVEM, DMOVNM
; 3343	BOOLEAN GROUP
; 3500	TEST GROUP
; 3610	COMPARE -- CAI, CAM
; 3636	ARITHMETIC SKIPS -- AOS, SOS, SKIP
; 3685	CONDITIONAL JUMPS -- JUMP, AOJ, SOJ, AOBJ
; 3760	AC DECODE JUMPS -- JRST, JFCL
; 3888	HALT LOOP
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 2
; TABLE OF CONTENTS

; 3909	MAP, XCT
; 3948	ITS PAGE MAP INSTRUCTIONS -- LPM, SPM
; 3995	STACK INSTRUCTIONS -- PUSHJ, PUSH, POP, POPJ
; 4071	SUBROUTINE CALL/RETURN -- JSR, JSP, JSA, JRA
; 4108	UUO'S
; 4341	JSYS, ADJSP
; 4395	XCT, PXCT, SXCT
; 4476	ROTATES AND LOGICAL SHIFTS -- ROT, LSH, JFFO
; 4541	ROTATE AND LOGICAL SHIFT COMBINED -- ROTC, LSHC
; 4585	CIRC INSTRUCTION
; 4638	ARITHMETIC SHIFTS -- ASH, ASHC
; 4689	ADD, SUB
; 4714	MUL, IMUL
; 4765	MULTIPLY SUBROUTINE
; 4807	DIV, IDIV
; 4853	INTEGER DIVIDE SUBROUTINE
; 4892	BASIC DIVIDE LOOP
; 4941	DOUBLE INTEGER ARITHMETIC -- DADD, DSUB, DMUL, DDIV
; 5068	SINGLE FLOATING ADD & SUB -- FAD, FADR, FSB, FSBR
; 5149	SINGLE FLOATING MULTIPLY -- FMP, FMPR
; 5178	SINGLE FLOATING DIVIDE -- FDV, FDVR
; 5306	UFA, DFN, FSC, IBP
; 5363	FIX, FIXR, FLTR, EXTEND
; 5427	SINGLE PRECISION FLOATING NORMALIZATION
; 5555	DOUBLE FLOATING ARITHMETIC -- DFAD, DFSB, DFMP, DFDV
; 5671	DOUBLE PRECISION NORMALIZATION
; 5714	BYTE GROUP -- IBP, ILDB, LDB, IDPB, DPB
; 5771	INCREMENT BYTE POINTER SUBROUTINE
; 5789	BYTE EFFECTIVE ADDRESS EVALUATOR
; 5808	LOAD BYTE SUBROUTINE
; 5831	DEPOSIT BYTE SUBROUTINE
; 5853	ADJBP
; 5945	I/O INSTRUCTIONS
; 6047	EXTERNAL DEVICE I/O INSTRUCTIONS
; 6134	INTERNAL DEVICE FUNCTIONS -- APR, CCA
; 6172	INTERNAL DEVICE FUNCTIONS -- PI
; 6214	TRACKS SUPPORT
; 6287	INTERNAL DEVICE FUNCTIONS -- PAG
; 6360	INTERNAL DEVICE FUNCTIONS -- TIM & MTR
; 6471	PRIORITY INTERRUPT PROCESSING
; 6637	KL-MODE PAGE REFILL LOGIC
; 7143	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS
; 7853	BLT
; 7934	STORING OF JPC
;	CROSS REFERENCE INDEX
;	DCODE LOCATION / LINE # INDEX
;	UCODE LOCATION / LINE # INDEX
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 3
; DSK: UCODE; ITS 9	17:13:16 20-AUG-2018	MICROCODE CONDITIONAL ASSEMBLY PARAMETERS FOR ITS

						; 1	.TOC	"MICROCODE CONDITIONAL ASSEMBLY PARAMETERS FOR ITS"
						; 2	
						; 3	.SET/ITSPAGE=1		;ITS-STYLE PAGING
						; 4	.SET/MAP=0		;NO MAP INSTRUCTION
						; 5	.SET/PFAIL.PIHACK=1	;PI OFF ON PAGE FAILURE
						; 6	.SET/JRSTON=1		;JRST 17, TURNS ON PI THEN DOES JRST 2,
						; 7	.SET/LPM.SPM=1		;LPMR AND SPM INSTRUCTIONS
						; 8	.SET/XCTR=1		;XCTR INSTRUCTIONS (PXCT AND PXCTI)
						; 9	.SET/EIS=0		;NO STRING STUFF FOR NOW
						; 10	.SET/DECIMAL=0		;NO DECIMAL STUFF FOR NOW
						; 11	.SET/CIRC=1		;WINNING CIRC INSTRUCTION
						; 12	.SET/MVSQZ=0		;RANDOM MVSQZ INSTRUCTION
						; 13	.SET/KLPAGE=1		;U CODE CONTROLS PAGE REFILLS
						; 14	.SET/NXT.INSTR.BITES=0  ;FIXED IN REV 9?
						; 15	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 4
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	MICROCODE CONDITIONAL ASSEMBLY PARAMETERS FOR ITS

						; 16	.TITLE	"KL10 ITS MICROCODE"
						; 17		;FROM "KL10 MICROCODE V126, DEC 17, 75"
						; 18	
						; 19	;	THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
						; 20	; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
						; 21	; EQUIPMENT CORPORATION.  DIGITAL EQUIPMENT CORPORATION ASSUMES NO
						; 22	; RESPONSIBILITY FOR ANY ERRORS THAT MAY APPEAR IN THIS DOCUMENT.
						; 23	;	THE SOFTWARE DESCRIBED IN THIS DOCUMENT IS FURNISHED TO THE
						; 24	; PURCHASER UNDER A LICENSE FOR USE ON A SINGLE COMPUTER SYSTEM AND
						; 25	; CAN BE COPIED (WITH INCLUSION OF DIGITAL'S COPYRIGHT NOTICE) ONLY
						; 26	; FOR USE IN SUCH SYSTEM, EXCEPT AS MAY OTHERWISE BE PROVIDED IN WRITING
						; 27	; BY DIGITAL.
						; 28	;	DIGITAL EQUIPMENT CORPORATION ASSUMES NO RESPONSIBILITY FOR THE
						; 29	; USE OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED
						; 30	; BY DIGITAL.
						; 31	;	COPYRIGHT (C) 1975, DIGITAL EQUIPMENT CORPORATION
						; 32	
						; 33	.TOC	"MIT REVISION HISTORY"
						; 34	
						; 35	;10-OCT-78 - JPC STILL CAN'T BE MADE TO WIN - LOSES PG FLT STATUS
						; 36	;	   - ADDED TIME/3T AT UXCT, TO SEE IF INDEXED-XCT LOSSAGE WILL CHANGE
						; 37	;	   - REV.10 IS NOW INSTALLED, BUT ONE-PROCEED IS STILL REPORTED
						; 38	;	     TO LOSE.  THIS HASN'T BEEN DEBUGGED YET.
						; 39	;09-MAY-78 - CORRECTED INSTRUCTION AT PIBYTE+2 TO DO MQ*4 NOT MQ*2
						; 40	;		THIS ONLY APPLIES SYSTEMS WITH MULTIPLE DTE20S
						; 41	;	   - CHANGED THE 'JPC' PARAMETER FILE TO TURN OFF NXT.INSTR.BITES,
						; 42	;	     SINCE WITH NXT.INSTR.BITES ON, JPC TAKES TOO LONG FROM
						; 43	;	     FETCH TO NICOND.  I THINK THE NXT.INSTR.BITES BUG
						; 44	;	     MAY HAVE BEEN FIXED IN REVISION 9, WE WILL SEE.
						; 45	;	   - MAKE ADB FIELD DEFAULT TO AR*4 INSTEAD OF FM TO SAVE
						; 46	;	     TIME AND AVOID PARITY CHECKING FM.  (AFTER DEC 253)
						; 47	;04-MAY-78 - KI INTERRUPT LOSES CONDITIONAL TURNED OFF, WE MADE
						; 48	;DL10 USE KA10-TYPE INTERRUPTS QUITE A LONG TIME AGO.
						; 49	;JRSTF'S SR=17 HACK IS GOING TO HAVE TO GO IN REV.10.  (HMM, PERHAPS
						; 50	;IT WILL STILL WORK, BUT IN REV.10 ABORT INSTR IS JUST AS GOOD.)
						; 51	;IN REV.10 CAN WE TURN ON JPC AND TURN OFF PT DIR VAL BUG?
						; 52	;10-MAR-77 (IO 50) - ADDED CODE UNDER "KI INTERRUPT LOSES"
						; 53	;TO DETECT AND AVOID LOSSAGE WHERE CRETINOUS DL10 SENDS
						; 54	;WRONG INTERRUPT COMMAND.  WOULD DISABLE KI10 VECTOR
						; 55	;INTERRUPTS ENTIRELY, EXCEPT THAT IMPTER USES THEM.
						; 56	;28-SEP-76 (IO 45) - TURNED ARX PARITY CHECKING BACK ON
						; 57	;IN ATTEMPT TO SEE IF THAT'S WHAT'S SCREWING TECO.
						; 58	;11-SEP-76 (SKPJMP 31) PUT JRST 1, INSTRUCTION BACK IN, HOWEVER
						; 59	;IT IS JUST A SLOW VERSION OF JRST, DOESN'T PORTALIFY.  MRC KEEPS
						; 60	;COMPLAINING THAT DEC PROGRAMS USE IT AND DECUUO HAS TO EMULATE IT.
						; 61	;ALSO CHECKED THAT PDL INSTRUCTIONS CAN'T SET A TRAP AND THEN TAKE
						; 62	;A PAGE FAULT -- IF THEY DID LOSSAGE WOULD OCCUR IN REVISION 10,
						; 63	;WHICH FIXES LOST ONE PROCEEDS BY MAKING ABORT INSTR IOR TRAP CYC
						; 64	;INTO TRAP REQ FLAGS INSTEAD OF JAMMING TRAP CYC IN.  DIDN'T CHECK
						; 65	;ARITHMETIC OVERFLOW CASES BUT THEY SHOULD BE OK.
						; 66	
						; 67	;7-JUL-76 ADD "CLR INTRPT INH" AT PFT TO PREVENT HANGING
						; 68	;IN WGRANT FROM PG4++.  HAPPENS IF PAGE FAULT ON FETCH OF
						; 69	;INSTRUCTION IMMEDIATELY AFTER A PI CYCLE.  COST = 1 LOCATION.
						; 70	
						; 71	;BELOW HERE NOT NECESSARILY IN ANY PARTICULAR ORDER
						; 72	
						; 73	;EMULATE I.T.S. PAGING BOX
						; 74	;NEW INSTRUCTIONS: LPMR, SPM, XCTR, XCTRI, JRSTON
						; 75	;DELETED INSTRUCTIONS: PORTAL, MAP, SXCT, PXCT, +EIS
						; 76	;
						; 77	;JPC FEATURE
						; 78	;
						; 79	;MISCELLANEOUS NEW INSTRUCTIONS: CIRC, MVSQZ, LSPGCM, LSPGCS
						; 80	;
						; 81	;MAKE POP P,P EXECUTE SAME WAY AS ON KA (STORE AC FIRST, THEN MEMORY)
						; 82	;
						; 83	;MOVN/MOVM CAN LOSE PAGE FAIL CODE BECAUSE OF TAKING TOO LONG BETWEEN
						; 84	;FETCH AND NICOND.  KLUDGED UP.  LATER SWITCHED TO DEC'S WAY.
						; 85	;
						; 86	;SPEED UP SOJ BY GETTING -1 INTO THE MQ WHERE IT CAN BE ADDED TO FM.
						; 87	;
						; 88	;ONE-PROCEED FEATURE
						; 89	;FIX JRSTF TO NOT TURN OFF TRAP FLAGS SO IT CAN BE ONE-PROCEEDED THROUGH
						; 90	;FIX BUG WHERE PAGE FAULT ON FETCH OF INSTRUCTION JRSTF'ED TO DID AN
						; 91	;'ABORT INSTR' ALTHOUGH THE NICOND HAD NOT BEEN CLOCKED, THUS LOSING
						; 92	;THE TRAP FLAGS AND SCREWING ONE-PROCEED.
						; 93	;
						; 94	;MAKE BLKI AND BLKO WORK AS INTERRUPT INSTRUCTIONS.  HAD LOSSAGE
						; 95	;WITH SECOND WORD OF VECTORED INTERRUPTS, LOSSAGE WITH FIRST PART DONE
						; 96	;FLAG, LOSSAGE WITH TAKING ANOTHER INTERRUPT WHILE TRYING TO GET THE
						; 97	;EBUS EVEN THOUGH PI CYCLE WAS SET.
						; 98	;
						; 99	;CAN HANG TRYING TO GET THE EBUS IF BOTH PAGE FAULT AND INTERRUPT
						; 100	;ON INSTRUCTION FETCH COMING OUT OF A PI CYCLE, CON INTRPT INH IS STILL SET.   TRIED TO FIX THIS A
						; 101	;
						; 102	;MAKE DTE20 EXAMINE/DEPOSIT TO 'PHYSICAL' ADDRESS SPACE WORK WHEN
						; 103	;THERE IS MORE THAN 256K OF MEMORY.
						; 104	;
						; 105	;THE HARDWARE CAN CONFUSE AN ADJACENT PAIR OF PT DIR VAL BITS,
						; 106	;THUS CAUSING EXTRA PAGE REFILLS, IN KL PAGING MODE.  CHANGE MICRO CODE
						; 107	;TO CLEAR BOTH PT DIR ENTRIES WHEN IT CLEARS EITHER; THUS BOTH VALID
						; 108	;BITS IN A PAIR WILL ALWAYS CONTAIN THE SAME VALUE.
						; 109	;
						; 110	;THE HARDWARE DOESN'T NECESSARILY SET UP USER VS EXEC CORRECTLY WHEN
						; 111	;LOADING THE VMA, SO PAGE REFILL CODE HAS TO CHECK THE USER BIT IN
						; 112	;THE VMA AND DO AN EXEC REF OR USER REF MACRO AFTER LOADING THE VMA.
						; 113	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 5
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	MIT REVISION HISTORY

						; 114	
						; 115	.TOC	"DEC REVISION HISTORY"
						; 116	
						; 117	;REV	WHY
						; 118	;126	INSERT MISSING COMMA AT STRAC3-2 WHICH CAUSED DMUL TO HANG.
						; 119	;125	REMOVE NXT INSTR FROM STAC1, STRAC3, & STAC4, MAKING THEM JUMP
						; 120	;	TO FINI INSTEAD.  PROBLEM INVOLVES A RACE IF PAGE FAIL OCCURS
						; 121	;	WHILE WRITING FM.  IF FM ADDRESS CHANGES BEFORE COND/FM WRITE
						; 122	;	GOES FALSE, APR BOARD MAY GRONK PARITY BIT OF SOME FM LOC'N.
						; 123	;	THIS RESULTS IN SOME SOME PATHS FROM FETCH TO NICOND BECOMING
						; 124	;	LONGER THAN 6 TICKS, SO THE FETCHES GOT SHUFFLED IN SOME PLACES.
						; 125	;	MICROCODE PATCH ELIMINATES MOST PROBABLE CAUSE, WHICH IS PAGE
						; 126	;	FAIL AT NICOND TIME WHILE WRITING AC OTHER THAN 0.  IT DOES NOT
						; 127	;	TAKE CARE OF THE POSSIBILITY THAT COND/FM WRITE WILL GLITCH AT
						; 128	;	INSTR 1777 TIME.
						; 129	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 6
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	DEC REVISION HISTORY

						; 130	;124	FIXES IN SEVERAL PLACES TO SET AND CLEAR ACCOUNT ENABLE SO AS
						; 131	;	TO GET REPEATABLE ACCOUNTING MEASURES OF USEFUL WORK DONE. THE
						; 132	;	ENABLE IS NOW CLEARED FOR METER UPDATE CYCLES AND KL PAGE REFILL
						; 133	;	CYCLES.  THE HARDWARE ALREADY TAKES CARE OF PI CYCLES.
						; 134	;123	CORRECT 122 TO CONSTRAIN LOC "UNHALT", AND TO LOAD ARX FROM AR,
						; 135	;	SO AS TO LET "SKP AR EQ" WORK.  PROBLEM AROSE BECAUSE MACRO ALSO
						; 136	;	TESTS ARX00-01.  FIX EDIT, WHEN STORING DEST POINTER ON SELECT
						; 137	;	SIGNIFICANCE START, TO ELIMINATE AMBIGUITY IN DEST P FIELD.
						; 138	;122	SPEC CHANGE TO EXIT FROM HALT LOOP, SO THAT AR0-8=0 WITH AR9-35
						; 139	;	NON-ZERO LOADS AR INTO PC TO START PROCESSOR.  THIS IS DIFFERENT
						; 140	;	FROM EXECUTING JRST BECAUSE PC FLAGS ARE CLEARED.
						; 141	;121	FIX TO 120 TO ALLOW A CYCLE BETWEEN FILLER FROM MEMORY AND
						; 142	;	WRITING IT INTO FM (THUS PARITY CAN BE COMPUTED).  ALSO CLEAR
						; 143	;	STATE REGISTER IN EDIT BEFORE GETTING NEXT PATTERN BYTE.
						; 144	;120	FIX EIS TO TOLERATE PAGE FAIL ON READ OF FILL BYTE IN MOVSRJ
						; 145	;	OR B2D CONVERSION.  REQUIRES GETTING FILLER BEFORE STORING DLEN
						; 146	;	ALSO INTEGRATE OPCODE COUNTING/TIMING CODE UNDER CONDITIONALS
						; 147	;117	FIX PARITY ERROR CODE TO WRITEBACK AR ON RPW ERROR.
						; 148	;116	REWRITE OF DDIV, SO THAT THE NO-DIVIDE TEST IS ON THE MOST
						; 149	;	SIGNIFICANT HALF OF THE MAGNITUDE OF THE DIVIDEND, RATHER THAN
						; 150	;	THE MAGNITUDE OF THE MOST SIGNIFICANT HALF.  IN THE PROCESS,
						; 151	;	SAVE TIME AND SPACE.  ALSO PUT IN CONDITIONAL ASSEMBLY VARIABLE
						; 152	;	"WRTST" TO INHIBIT WRITE TEST CYCLE FOR INSTRUCTIONS WHICH
						; 153	;	APPEAR NOT TO NEED IT, AND THUS TO SPEED THEM UP.
						; 154	;115	FIX SBDIAG TO SET MCL REG FUNC TO INHIBIT EBOX MAY BE PAGED.
						; 155	;114	RECODE STRING COMPARE TO SAVE SPACE AND TIME.  CHANGE DEFAULTS
						; 156	;	FOR KLPAGING TO INCLUDE EIS, EXCLUDE TRACKS FEATURE.  CHANGE
						; 157	;	KLPAGING (NEW SPEC) TO KEEP "LOGICALLY WRITABLE" IN SOFTWARE BIT
						; 158	;113	RECODE KL PAGING TO ELIMINATE PROBLEM OF WRITING HARDWARE
						; 159	;	PAGE TABLE BEFORE CHECKING FOR AGE TRAP, AND THEREFORE LEAVING
						; 160	;	THE PAGE ACCESSIBLE AFTER THE TRAP.  THE RECODING ALSO IMPROVES
						; 161	;	THE ALGORITHM IN THAT THE HARDWARE ENTRY INCLUDES THE W BIT SET
						; 162	;	IF THE CORE TABLES ALLOWED WRITE AND THE CST INDICATES WRITTEN,
						; 163	;	EVEN IF THE CURRENT REFERENCE WAS NOT A WRITE.
						; 164	;	ALSO FIX CODE WHICH WRITES PT DIR, TO GET WRITE REF BIT FROM
						; 165	;	VMA HELD INTO BIT 5 OF SAVED PAGE FAIL WORD.
						; 166	;112	FIX PAGE FAIL CODE FOR USE WITH PROB SHEET 1396, WHICH LOADS
						; 167	;	PC IF PAGE FAIL OCCURS ON NICOND.  THUS CODE NEEDN'T CHECK FOR
						; 168	;	FETCH AT CLEAN, WHICH CAUSED OTHER PROBLEMS ON PARITY ERRORS.
						; 169	;	CLEAR FE AND SC IN NXT INSTR MACRO (JUST CLEANLINESS).
						; 170	;111	PATCH SEVERAL ROUTINES WITH THE FOLLOWING MACRO --
						; 171		FETCH WAIT	"MEM/MB WAIT"
						; 172	;	TO PREVENT SEQUENCES IN WHICH PAGE FAIL INFO CAN GET LOST
						; 173	;	BECAUSE OF LONG TIME FROM REQUEST TO MB WAIT.  THESE PATCHES
						; 174	;	SHOULD BE REMOVED AFTER AN ECO HAS BEEN INSTALLED TO FIX.
						; 175	;	IN ADDITION, EBUSX SUBROUTINE HAS BEEN MODIFIED TO PREVENT RACE
						; 176	;	CONDITION WHEN SETTING UP IO FUNCTION WITH COND/EBUS CTL AND
						; 177	;	MAGIC # BIT 4.  MUST NOT CHANGE #5 THROUGH #8 ON NEXT CYCLE.
						; 178	;	FIX KLPAGING CODE TO GO BACK TO AREAD ON MAP REF, BECAUSE
						; 179	;	MEM/AD FUNC DOESN'T CORRECTLY RESTORE APR REG FUNC.  ALSO MAKE
						; 180	;	THE CODE SMARTER ON NO MATCH CONDITION, SO REQUEST DOESN'T HAVE
						; 181	;	TO BE RESTARTED AND IMMEDIATELY FAIL AGAIN.
						; 182	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 7
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	DEC REVISION HISTORY

						; 183	;110	GIVE UP ON THE OLD STRING COMPARE CODE, INSTALLING MIKE NEWMAN'S
						; 184	;	VERSION.  SOMEWHAT SLOWER, BUT GIVES THE RIGHT ANSWERS.
						; 185	;	FIX LDB CODE TO WAIT FOR MEM WORD EVEN IF INTERRUPT REQUEST
						; 186	;	SEEN, SO AS NOT TO GET CONFUSED WHEN IT ARRIVES OR PAGE FAILS.
						; 187	;	ALSO IMPROVE CLRPT ROUTINE USED BY CONO AND DATAO PAG TO START
						; 188	;	LOOP WITH VMA CLEARED AND PT WR SELECTION SETUP CORRECTLY.
						; 189	;107	FIX STRING COMPARES TO CHECK FOR INTERRUPT.  THIS INVOLVED
						; 190	;	CHECKING DURING GSRC ROUTINE, WHICH ELIMINATES NEED FOR CHECK
						; 191	;	IN SRCMOD (WHICH CALLS GSRC).  IT ALSO REQUIRED CLEARING SFLGS
						; 192	;	AT STARTUP, AND ADJUSTING DLEN UPDATE CODE IN DEST FILL TO GET
						; 193	;	VALID LENGTH STORED ON INTERRUPT.
						; 194	;106	ELIMINATE RACE IN DECODING OF # FIELD ON MTR BOARD BY HOLDING
						; 195	;	LOW 3 BITS THROUGH NEXT MICROINSTRUCTION.
						; 196	;	FIX LUUO AND MUUO TO ALLOW INTERRUPTS.
						; 197	;	FIX B2D OFFSET TO SIGN-EXTEND E1 AFTER INTERRUPT.  FINISH 105,
						; 198	;	TO GET ENTIRE AR LOADED WHILE CLEARING MQ (ARL WAS HOLDING).
						; 199	;	FIX KL PAGING TO USE VMA/1 INSTEAD OF VMA/AD WHEN RESTORING VMA
						; 200	;	FROM VMA HELD OR COPIES THEREOF.
						; 201	;	FIX UFA NOT TO ALWAYS GET UNDERFLOW ON NEGATIVE RESULTS.
						; 202	;	SAME FIX AS EDIT 103 OF BREADBOARD.  WHERE DID IT GET LOST?
						; 203	;105	FIX KL PAGING AS REVISED BY EDIT 103 TO CORRECTLY RESTORE
						; 204	;	BR ON NO-MATCH CONDITION
						; 205	;	ANOTHER FIX TO B2D, TO CLEAR MQ ON ENTRY.  BUG INVOLVED GARBAGE
						; 206	;	FROM MQ SHIFTING INTO ARX DURING DEVELOPMENT OF POWER OF TEN.
						; 207	;104	FIX BINARY TO DECIMAL CONVERSION, WHICH WAS NOT GOING TO CLEAN
						; 208	;	ON FINDING AN INTERRUPT, AND ON RESTART WITH FPD SET, WAS NOT
						; 209	;	SETTING UP SLEN.  TSK, TSK.  CORRECT CLEANUP FOR DEST FILL IN
						; 210	;	MOVSRJ, WHICH WAS INCREMENTING BOTH SLEN AND DLEN, SHOULD
						; 211	;	HAVE BEEN NEITHER.  FIX JSR, BROKEN BY EDIT 103.  JUMP MUST BE
						; 212	;	TO E+1, NOT E.
						; 213	;103	CREATE CONDITIONAL ASSEMBLY FOR EXTENDED ADDRESSING. UNDER IT,
						; 214	;	CREATE MEM FIELD DEFINITIONS, SUPPRESS SXCT.
						; 215	;	SAVE A WORD IN JSR BY USING JSTAC IN COMMON WITH PUSHJ.
						; 216	;	FORCE TIME FIELD IN CASES WHERE ASSEMBLER DEFAULT SCREWS UP.
						; 217	;	ADD INTERRUPT TESTS IN KL PAGING CODE TO PREVENT HANGS, AND
						; 218	;	REVISE PAGE FAIL WORD TO ELIMINATE THE NEW FAIL CODES.
						; 219	;102	ATTEMPT ANOTHER FIX OF MOVSRJ, CVTBDX FILL.  EDIT 71 LOSES
						; 220	;	DUE TO INCONSISTENCY -- DLEN UPDATE MUST NOT PRECEED CLEANUP.
						; 221	;	CREATE CONDITIONAL ASSEMBLY SWITCHES TO CONTROL EXTENDED
						; 222	;	INSTRUCTION SET, DOUBLE INTEGER ARITHMETIC, AND ADJBP.  CHANGE
						; 223	;	DEFAULT OF IMULI.OPT, WHICH CAN GET SIGN WRONG ON OVERFLOW.
						; 224	;101	FIX METER REQUEST CODE TO "ABORT INSTR" EVEN IF NOT SETTING
						; 225	;	PI CYCLE.  THIS SHOULD FIX OCCASIONAL LOSS OF TRAPS PROBLEM.
						; 226	;100	FIXES TO KL PAGING CODE TO PREVENT LOADING VMA FROM AD WHILE
						; 227	;	REQUESTING PHYSICAL REF.  FIX JSR TO PREVENT FM PARITY STOP
						; 228	;	ON STORE TO AC.  FIX 1777 TO FORCE RECIRCULATION OF AR/ARX,
						; 229	;	EVEN IF MBOX RESP STILL TRUE.
						; 230	;77	FIX DDIV TO GET MQ SHIFTED LEFT ONE PLACE, WITHOUT INTRODUCING
						; 231	;	AN EXTRA BIT, AT DDVX1.  THIS INVOLVES INHIBITING ADA TO PREVENT
						; 232	;	AD CRY0 FROM COMMING INTO MQ35.
						; 233	;76	FIX UFA TO ALLOW AN EBOX CYCLE BETWEEN FETCH AND NICOND WHEN
						; 234	;	FRACTION SUM IS ZERO, AT UFA3.
						; 235	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 8
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	DEC REVISION HISTORY

						; 236	;75	PUT BACK INSTRUCTION "MBREL" REMOVED BY EDIT 64.  NECESSARY TO
						; 237	;	ENSURE THAT EBOX REQUEST FOR FETCH DOESN'T COME UP WHILE
						; 238	;	REGISTER FUNCTION IS IN PROGRESS, WHICH WOULD CONFUSE MBOX ON
						; 239	;	STARTING THE FETCH.
						; 240	;74	CHANGES TO EIS FOR NEW-SPEC AC USAGE.  CHANGES TO KL PAGING FOR
						; 241	;	INDIRECT, IMMEDIATE SECTION POINTERS
						; 242	;73	FIX JRA TO PREVENT WRITING AC WITH DATA FRESH FROM MEMORY (ALLOW
						; 243	;	A CYCLE FOR PARITY CHECK).  FIX DPB CODE TAKE ONLY 3 TICKS ON
						; 244	;	RETURN FROM BYTEA, SO THAT CACHE DATA DOESN'T ARRIVE INTO AR
						; 245	;	AND ARX UNTIL DPB1, WHEN THE BYTE HAS GOTTEN OUT TO MQ.
						; 246	;72	FIX DEFINITION OF SP MEM/UNPAGED TO INHIBIT VMA USER.  FIX
						; 247	;	PAGE FAIL CODE TO CHECK FOR VMA FETCH BEFORE LOOKING AT
						; 248	;	INTERRUPT REQUEST.  PROBLEM WAS INTERRUPT CONCURRENT WITH
						; 249	;	PAGE FAIL ON JRSTF TO USER.  PC FLAGS GOT RESTORED, BUT VMA
						; 250	;	NEVER COPIED TO PC BECAUSE PAGE FAIL INHIBITED NICOND, AND
						; 251	;	INTERRUPT ABORTED PAGE FAIL HANDLING TO LOAD PC.
						; 252	;71	DEFINE FMADR/AC4=6.  FIX MOVFIL ROUTINE TO PUT AWAY UPDATED
						; 253	;	LENGTH DIFFERENCE WHEN INTERRUPTED, THUS AVOIDING RANDOMNESS
						; 254	;	IN MOVSRJ, CVTBDX. FIX CVTBD CALL TO MOVFIL TO PRESERVE SR.
						; 255	;	CHANGE STMAC AND PIDONE FROM "FIN XFER" TO "FIN STORE", BECAUSE
						; 256	;	STORE WAS IN PROGRESS, WHICH CAUSED FM WRITE IF AC REF, AND
						; 257	;	GOT A PARITY ERROR DUE TO ADB/FM.
						; 258	;70	FIX PXCT 4,[POP ...], WHICH DIDN'T GET DEST CONTEXT SET FOR
						; 259	;	STORE.  MUST USE SR_100 TO SET IT.
						; 260	;67	FIX PROBLEM IN ADJBP BY WHICH BYTES/WORD WAS GETTING LOST
						; 261	;	WHEN DIVIDE ROUTINE LOADED REMAINDER INTO BR.  SOLVED BY
						; 262	;	SAVING BYTES/WORD IN T1.
						; 263	;66	FIX KL PAGING TO RESTORE VMA ON TRAP, SAVE ADDRESS OF POINTER
						; 264	;	CAUSING TRAP, AND NOT RESTORE ARX EXCEPT FOR BLT PAGE FAIL.
						; 265	;	ALSO SET TIME PARAMETER ON ADB/FM TO ALLOW TIME FOR PARITY
						; 266	;	CHECKING OF FM.
						; 267	;65	FIX KL PAGING CODE TO DO MBWAIT AFTER DETERMINING THAT PARITY
						; 268	;	ERROR HAS NOT OCCURRED, SO AS TO GET CORRECT VMA TO SAVE.
						; 269	;	CREATE SYMBOLS FOR KL PAGE FAIL CODES.  PUT CONDITIONAL
						; 270	;	ASSEMBLY AROUND IMULI OPTIMIZATION CODE, AND SXCT.  CREATE
						; 271	;	SYMBOL "OPTIONS" IN # FIELD FOR MICROCODE OPTIONS.
						; 272	;64	MICROCODE FOR KL10 PAGING (PAGE REFILL, MAP INSTR)...
						; 273	;	REMOVE UNNECESSARY INSTRUCTION MBREL: FROM SWEEP AND APRBO
						; 274	;	COSMETIC CHANGES TO KEEP COMMENTS & MACRO DEFINITIONS FROM
						; 275	;	OVERFLOWING LINE OF LISTING, AND INSERTION OF CONDITIONAL
						; 276	;	ASSEMBLY CONTROL OF LONG FLOATING POINT INSTRUCTIONS.
						; 277	;63	IN MTR REQUEST ROUTINE, DON'T DISMISS WHEN PI CYCLE HASN'T
						; 278	;	BEEN SET.
						; 279	;62	FIX RDMTR CODE TO PUT 35 IN SC BEFORE GOING TO DMOVEM CODE.
						; 280	;61	FIX PIIBP ROUTINE TO USE CALL.M INSTEAD OF SPEC/CALL,
						; 281	;	WHICH GETS OVERRIDDEN BY P_P-S... IN MTR REQUEST SERVICE
						; 282	;	ROUTINE, DON'T SET PI CYCLE UNLESS REQUEST IS FOR VECTOR.
						; 283	;60	FIX DATAO PAG TO DO MB WAIT AFTER STORING EBOX ACCT AND
						; 284	;	BEFORE CHANGING VMA.
						; 285	;57	RE-CODE USES OF A@, B@ TO USE VMA/1, RATHER THAN VMA/AD,
						; 286	;	IN ORDER TO GET CORRECT CONTEXT ON INDIRECT WORD. SEE MCL4
						; 287	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 9
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	DEC REVISION HISTORY

						; 288	;56	FIX SECOND PART OF PICYCLE (TAG NEXT:) TO ENSURE THAT
						; 289	;	PC+1 INH, KERNEL CYCLE, ETC REMAIN UP DURING 2ND PART.
						; 290	;	ALSO CHANGE SPEC/FLAG CTL FOR ECO 1261, WHICH REQUIRES
						; 291	;	#07 TO BE OPPOSITE OF #04 TO GENERATE SCD LEAVE USER.
						; 292	;55	FIX SPEC INSTR/SET PI CYCLE TO INHIBIT INTERRUPTS
						; 293	;	(IN PARTICULAR, METER UPDATE REQUESTS).  MAKE SURE VALID
						; 294	;	DATA SAVED ON IO PAGE FAIL AND PARITY ERRORS. REMOVE
						; 295	;	BACKWARDS BLT... IT BROKE TOO MANY PROGRAMS.
						; 296	;54	FIX OVERFLOW CHECK IN IMULI OPTIMIZATION TO INH CRY 18
						; 297	;	UPDATE TO USE CONDITIONAL ASSEMBLY IN MICRO VERS 20.
						; 298	;53	FIX T1,T2 PARAMETERS ON BYTE DISP, SIGNS DISP
						; 299	;52	CORRECT SHIFT AMOUNT FOR IMULI OPTIMIZATION, AND FIX MACRO
						; 300	;	DEFINITIONS FOR SET SR?, WHICH WERE ALWAYS SETTING SR0.
						; 301	;51	OPTIMIZE IMULI OF TWO POSITIVE OPERANDS (TO SPEED UP SUBSCRIPT
						; 302	;	CALCULATIONS) BY TAKING ONLY 9 MULTIPLY STEPS AND STARTING
						; 303	;	NEXT INSTRUCTION FETCH EARLIER.  OPTIMIZATION CAN BE REMOVED
						; 304	;	BY COMMENTING OUT TWO INSTRUCTIONS AT IMULI, AND ONE FOLLOWING
						; 305	;	IMUL.  ALSO FIX APRBI/UVERS TO KEEP SERIAL # OUT OF LH.
						; 306	;50	INTRODUCE SKIP/FETCH AND CODE IN PAGE FAIL RECOVERY TO LOAD
						; 307	;	PC FROM VMA IF PAGE FAIL OCCURED ON FETCH, BECAUSE NICOND
						; 308	;	CYCLE, WHICH SHOULD HAVE LOADED PC, GETS INHIBITED BY INSTR 1777
						; 309	;	ALSO INCLUDE EXTENDED INSTRUCTION SET.
						; 310	;47	UNDO XCT CHANGES OF EDIT 46, WHICH BROKE XCT DUE TO INSUFFICIENT
						; 311	;	TIME FOR DRAM HOLD BEFORE USING "A READ". ALSO FIX VECTOR
						; 312	;	INTERRUPT CODE TO LOOK AT CORRECT BITS FOR CONTROLLER NUMBER.
						; 313	;46	FOLLOW-ON TO EDIT 45, SAVING 2 WORDS AND A CYCLE
						; 314	;	ALSO MOVE JRST TO 600, JFCL TO 700, UUO'S TO 100X AS PREPARATION
						; 315	;	FOR EXTENDED INSTRUCTION SET
						; 316	;45	FIX SXCT TO LOOK AT AC FIELD OF SXCT, NOT SUBJECT INSTRUCTION,
						; 317	;	WHEN DECIDING WHETHER TO USE BASE-TYPE ADDRESS CALCULATION.
						; 318	;44	FIX PAGE FAIL LOGIC TO WORK FOR EITHER PAGE FAIL OR PARITY
						; 319	;	ERROR.  EDITS 42 AND 43 BOTH WRONG.  ALSO CORRECT RACE IN
						; 320	;	WRITING PERFORMANCE ANALYSIS ENABLES TO PREVENT SPURIOUS COUNTS.
						; 321	;43	CORRECT USE OF PF DISP BY EDIT 42.  LOW BITS ARE INVERTED
						; 322	;42	FIX BUGS INTRODUCED BY EDIT 40, WHICH MADE FLTR OF 1B0 HANG
						; 323	;	TRYING TO NEGATE IT, AND FIX UP EXPONENT CORRECTION ON LONG
						; 324	;	SHIFT LEFT.  ALSO PUT IN CODE TO HANDLE PARITY ERROR PAGE
						; 325	;	FAILURES, AND SET TIME CONTROLS ON 43-47.
						; 326	;41	REWRITE OF VECTOR INTERRUPT PROCESSING TO MAKE DTE VECTORS
						; 327	;	GO TO 142+8N, WHERE N IS DTE#.  RH20 GO TO PROGRAMMED ADDRESS
						; 328	;	IN EPT, EXTERNAL DEVICES USE EXEC VIRTUAL ADDRESSES.
						; 329	;40	IMPROVEMENTS TO FLOATING NORMALIZATION TO MAKE LONG SHIFTS
						; 330	;	FASTER, PRIMARILY TO HELP FLTR
						; 331	;37	FIX FLOATING DIVIDE SO THAT THE TRUNCATED FORM OF A NEGATIVE
						; 332	;	QUOTIENT IS EQUAL TO THE HIGH-ORDER PART OF THE INFINITE-
						; 333	;	PRECISION QUOTIENT.  SEE COMMENTS IN THE CODE.  ALSO BUM
						; 334	;	A CYCLE OUT OF FLOATING DIVIDE BY STARTING THE NORMALIZE
						; 335	;	WHILE MOVING THE QUOTIENT INTO AR.
						; 336	;	SEVERAL CHANGES TO MAKE TRACKS FEATURE WORK
						; 337	;36	FIX CONO MTR TO PUT DATA ON BOTH HALVES, SO PI CAN SEE PIA
						; 338	;35	FIX CONI PI TO READ BACK WRITE EVEN PARITY ENABLES
						; 339	;34	FIX BLT USE OF SR, SO NO CORRECTION OF ARX NECESSARY
						; 340	;33	FIX PAGE TABLE REFERENCES TO FORCE UNPAGED REF.  FIX TRAP
						; 341	;	TO SET PC+1 INHIBIT.
						; 342	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 10
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	DEC REVISION HISTORY

						; 343	;32	CORRECT SETTING OF SC FOR SHIFTING METER COUNTERS, TO GET
						; 344	;	12 BITS UNUSED AT RIGHT WHEN IT GETS TO CORE.
						; 345	;31	RECODE ASH AND ASHC TO SAVE SPACE
						; 346	;30	FIX JFFO TO SHIFT AR CORRECTLY AT JFFO2.  BUM ADJSP TO USE
						; 347	;	STMAC FOR UPDATING PDL POINTER.
						; 348	;27	FIX CONI PAG TO READ EBUS.  CORRECT DEFINITIONS OF MBOX
						; 349	;	REGISTER FUNCTIONS, WHICH HAD BITS 0 AND 3 INVERTED.
						; 350	;26	FIX DEFINITIONS OF DIAG FUNC CONO MTR AND CONO TIM, WHICH
						; 351	;	WERE REVERSED
						; 352	;25	FIX DECODING OF PHYSICAL DEVICE NUMBER IN PI FUNCTION CODE
						; 353	;	AND RE-CODE JFCL FOR FEWER MICROWORDS
						; 354	;24	FIX JFFO TO SHIFT ON FIRST 6-BIT TEST STEP, AND JRSTF TO
						; 355	;	KEEP E AND XR DISTINCT.  ALSO SET LOAD-ENABLE BITS IN
						; 356	;	DATAI PAG, WORD.
						; 357	;23	FIX CONO PI, TO HOLD AR ONTO EBUS THRU REL EBUS, BECAUSE
						; 358	;	PI BOARD DELAYS CONO PI TO GET CONO SET EQUIVALENT.
						; 359	;22	MORE JFCL FIXES.  MUST USE FLAG CTL/JFCL WHILE CLEARING BITS,
						; 360	;	AS WELL AS WHILE TESTING THEM.  BUM A WORD OUT OF JFFO BY
						; 361	;	MAKING THE SIXBIT COUNT NEGATIVE.  CHANGES SO SHIFT SUBR
						; 362	;	RETURNS 2, BYTEA 1.  FIX SETMB TO STORE BACK AND FETCH.
						; 363	;21	RE-WRITE JFCL TO KEEP LOW OPCODE BITS OUT OF AR0-1, BECAUSE
						; 364	;	PC00 GETS PROPAGATED LEFT TO ADA -1 AND -2.
						; 365	;20	FIX BLT TO LOAD BR WITH SRC-DST ADDR
						; 366	;	ALSO SET TIME PARAMETERS ON CONDITIONAL FETCH FUNCTIONS
						; 367	;17	CHANGE SWEEP ONE PAGE TO PUT PAGE # IN E, RATHER THAN ADDR.
						; 368	;	ALSO CHANGE COND/FM WRITE TO MATCH ECO #1068.
						; 369	;16	FIX JUMP FETCH MACRO TO LOAD VMA FROM PC+1 (TEST SATISFIED
						; 370	;	OVERRIDES THIS TO HOLD VMA).  ALSO BUM ONE MICROWORD FROM MUUO.
						; 371	;15	INCLUDE PAGE FAIL DISP IN DISP/ FIELD
						; 372	;	ALSO MAKE MUUO STORE PROCESS CONTEXT WORD AT 426, AND SETUP
						; 373	;	PCS FROM PC EXTENSION, CWSX FROM SXCT
						; 374	;14	FIX DEFINITIONS OF SKIP/IO LEGAL, AC#0, SC0, EVEN PAR
						; 375	;	ALSO FIX DATAO PAG, TO SEND LH DATA ON BOTH HALVES OF EBUS
						; 376	;13	ALIGN SETEBR SO CALL TO SHIFT RETURNS CORRECTLY
						; 377	;12	MAKE SURE AD COPIES AR DURING DATAO, CONO, AND CLEAR AR AT
						; 378	;	SET DATAI TIME.
						; 379	;11	FIXES TO CONTINUE CODE SO CONSOLE WORKS, AND CORRECTIONS TO
						; 380	;	PROTECTED DEP/EXAM SO PROTECTION PROTECTS.
						; 381	;10	FIX A READ MACRO TO VMA/PC+1.  AD OVERRIDES UNLESS DRAM A=1
						; 382	;07	RE-WRITE OF PI CYCLE CODE TO RECOGNIZE NEW EBUS SPEC.
						; 383	;06	FIX DEFINITIONS OF SKIPS 40-57 BY COMPLEMENTING 3 LOW ORDER BITS
						; 384	;	FIX MULSUB TO CORRESPOND TO NEW CRA LOGIC
						; 385	;05	FIX EBUS CTL DEFINITIONS TO GET F01 CORRECT.  CORRECT FLAG CTL
						; 386	;	DEFINITIONS TO PREVENT LEAVE USER WHEN NOT WANTED, AND FIX
						; 387	;	JRST/JFCL TO HAVE FLAGS IN AR WHEN NEEDED.
						; 388	;04	FIX RETURNS FROM MULSUB, PUT BETTER COMMENTS ON SNORM CODE,
						; 389	;	IMPROVE SNORM ALGORITHM TO MINIMIZE WORST-CASE TIME.
						; 390	;03	FIX DISPATCH ADDRESS PROBLEMS, MOSTLY JRST/JFCL AND UUO'S.
						; 391	;02	CHANGES PER INSTRUCTION SET REVIEW -- DELETE USE OF BIT12 OF
						; 392	;	BYTE POINTERS, CHANGE BLT TO PUT FINAL SRC,DST ADDRESSES IN AC,
						; 393	;	MAKE TRUNCATE FORM FLOATING POINT REALLY TRUNCATE, ELIMINATE
						; 394	;	LOCAL JSYS SUPPORT, DELETE PXCT OPCODE (XCT W/ NON-ZERO AC IN
						; 395	;	EXEC MODE), LUUO'S GO TO 40/41 OF CURRENT SPACE.
						; 396	;01	UPDATES FOR .TITLE AND .TOC PSEUDO OPS,
						; 397	;	AND VARIOUS CHANGES FOR PROTO HARDWARE
						; 398	;00	CREATION, BASED ON BREADBOARD AS OF EDIT 66
						; 399	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 11
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONDITIONAL ASSEMBLY VARIABLE DEFINITIONS

						; 400	.TOC	"CONDITIONAL ASSEMBLY VARIABLE DEFINITIONS"
						; 401	
						; 402	; [COST ESTIMATES IN BRACKETS INDICATE NUMBER OF ADDITIONAL
						; 403	; MICROINSTRUCTIONS REQUIRED BY TURNING ON THE FEATURE SWITCH]
						; 404	
						; 405	.DEFAULT/RPW=1		;1 ENABLES READ-PAUSE-WRITE CYCLES FOR
						; 406				;NON-CACHED REFERENCES BY CERTAIN INSTRUCTIONS.
						; 407				; [COST = 0]
						; 408	
						; 409	.DEFAULT/WRTST=0	;1 ENABLES WRITE-TEST CYCLES AT AREAD TIME FOR
						; 410				;INSTRUCTIONS LIKE MOVEM AND SETZM.  [COST = 0]
						; 411	
						; 412	.DEFAULT/TRACKS=0	;1 ENABLES STORING PC AFTER EVERY INSTRUCTION,
						; 413				; & CREATES DATAI/O PI TO READ/SETUP PC BUFFER
						; 414				;ADDRESS. [COST = 21 WDS]
						; 415	
						; 416	.DEFAULT/OP.CNT=0	;1 ENABLES CODE TO BUILD A HISTOGRAM IN CORE
						; 417				; COUNTING USES OF EACH OPCODE IN USER & EXEC
						; 418	
						; 419	.DEFAULT/OP.TIME=0	;1 ENABLES CODE TO ACCUMULATE TIME SPENT BY
						; 420				; EACH OPCODE
						; 421	
						; 422	.DEFAULT/BACK.BLT=0	;1 ENABLES BLT TO DECREMENT ADDRESSES ON EACH
						; 423				;STEP IF E < RH(AC).  BREAKS MANY PROGRAMS.
						; 424				; [COST = 9 WDS]
						; 425	
						; 426	.DEFAULT/FPLONG=1	;1 ENABLES KA-STYLE DOUBLE PRECISION FLOATING
						; 427				;POINT INSTRUCTIONS: FADL, FSBL, FMPL, FDVL.
						; 428				; [COST = 32 WDS]
						; 429	
						; 430	.DEFAULT/UFA.DFN=1	;1 ENABLES UFA AND DFN INSTRS
						; 431				; [COST = 17 WORDS]
						; 432	
						; 433	.DEFAULT/KLPAGE=0	;1 ENABLES KL-MODE PAGING. [COST = 85 WDS]
						; 434	
						; 435		.IF/KLPAGE
						; 436	.DEFAULT/XADDR=0	;1 ENABLES EXTENDED ADDRESSING WITH NEW-TYPE
						; 437				; MCL BOARD
						; 438		.IFNOT/KLPAGE
						; 439	.SET/XADDR=0		;CAN'T HAVE EXTENDED ADDRESSING WITHOUT KL PAGE
						; 440		.ENDIF/KLPAGE
						; 441	
						; 442	.DEFAULT/IMULI.OPT=0	;1 ENABLES OPTIMIZATION OF IMULI TO TAKE ONLY
						; 443				;NINE MULTIPLY STEPS [COST = 3 WDS]
						; 444				; WARNING: IS BUGGY!
						; 445		.IFNOT/XADDR
						; 446	.DEFAULT/SXCT=1		;1 ENABLES SPECIAL XCT INSTR, WHICH ALLOWS
						; 447				; DIAGNOSTICS TO GENERATE LARGE ADDRESSES.
						; 448		.IF/XADDR	; [COST = 10 WDS]
						; 449	.SET/SXCT=0		;DONT NEED SXCT WITH EXTENDED ADDRESSING
						; 450		.ENDIF/XADDR
						; 451	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 12
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONDITIONAL ASSEMBLY VARIABLE DEFINITIONS

						; 452	
						; 453	.DEFAULT/EIS=1		;1 ENABLES EIS INSTRS
						; 454	
						; 455	.DEFAULT/DECIMAL=1	;1 ENABLES DECIMAL-BINARY AND
						; 456				; BINARY-DECIMAL CONVERSION EIS INSTRS
						; 457				; (WORKS ONLY IF EIS=1)
						; 458	
						; 459	.DEFAULT/DBL.INT=1	;1 ENABLES DOUBLE INTEGER INSTRUCTIONS
						; 460				; [COST = 59 WORDS]
						; 461	
						; 462	.DEFAULT/ADJBP=1	;1 ENABLES ADJUST BYTE POINTER
						; 463				; [COST = 24 WDS]
						; 464	
						; 465	.DEFAULT/ITSPAGE=0	;1 ENABLES ITS PAGING FEATURES
						; 466				; [COST = 91 WDS]
						; 467	
						; 468	.DEFAULT/CIRC=0		;1 ENABLES WINNING CIRC INSTRUCTION
						; 469				; [COST = 12 WDS]
						; 470	
						; 471	.DEFAULT/CIRC.BIG.OPT=0	;1 ENABLES GROSS CIRC SPEEDUP
						; 472				; [COST = 16 WDS]
						; 473	
						; 474	.DEFAULT/MVSQZ=0	;1 ENABLES MOVE SQUOZE INSTRUCTION
						; 475				; [COST = 13 WDS]
						; 476	
						; 477	.DEFAULT/LISP=0		;1 ENABLES WINNING LISP INSTRS
						; 478				; [NOT YET IMPLEMENTED]
						; 479	
						; 480	.DEFAULT/MUSIC=0	;1 ENABLES MUSIC PLAYING MICROCODE
						; 481				; [COST = ABOUT 100 WORDS??]
						; 482	
						; 483	.DEFAULT/JPC=0		;1 ENABLES JPC FEATURE
						; 484				;[COST = 20 WDS]
						; 485				;TAKES A LITTLE EXTRA TIME, SOMEONE SHOULD COUNT IT UP.
						; 486	
						; 487	.DEFAULT/JPC TEST=0	;1 ENABLES JPC TEST MODE
						; 488	
						; 489	.DEFAULT/JPC SUPPORT=0	;1 IF JPC OR JPC TEST
						; 490	
						; 491	.DEFAULT/JPC.RING=0	;1 ENABLES 16 JPC'S
						; 492				; [COST = COST OF JPC + 3 + 2*<# JPC'S>
						; 493				;	= 55 WDS]
						; 494				;EXEC JPC RING IN AC BLK 4
						; 495				;USER JPC RING IN AC BLK 5
						; 496				;WARNING: NOT COMPLETELY CODED, DOES NOT WORK!
						; 497	
						; 498	.DEFAULT/KI INTERRUPT LOSES=0  ;1 ENABLES VECTOR INTERRUPT CHECKING
						; 499				;SEE PIVECT IN IO
						; 500	
						; 501	.DEFAULT/MAP=1		;1 ENABLES LOSING MAP INSTRUCTION
						; 502				; [COST = 2+2*KLPAGE WDS]
						; 503	
						; 504	.DEFAULT/PFAIL.PIHACK=0	;1 ENABLES PAGE FAILURE TURNING PI OFF
						; 505				; [COST = 4 WDS]
						; 506	
						; 507	.DEFAULT/JRSTON=0	;1 ENABLES JRST 17, = PI ON PLUS JRST 2,
						; 508				; [COST = 3 WDS]
						; 509	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 13
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONDITIONAL ASSEMBLY VARIABLE DEFINITIONS

						; 510	
						; 511	.DEFAULT/LPM.SPM=0	;1 ENABLES LPM AND SPM INSTRUCTIONS
						; 512				; AS OPCODES LPMR=076 AND SPM=077
						; 513	
						; 514	.DEFAULT/XCTR=0		;1 ENABLES OPCODES XCTR=074, XCTRI=075
						; 515				; AND FLUSHES XCT/PXCT AMBIGUITY
						; 516				; [COST = 1 WD]
						; 517	
						; 518	.DEFAULT/NXT.INSTR.BITES=1	;1 MEANS NXT INSTR IS
						; 519					; INCOMPATIBLE WITH FM WRITE
						; 520					; FOR AC1 AND #B#
						; 521					;SEE DEC REV HIST 125 FOR WHY
						; 522	
						; 523	.DEFAULT/PT DIR VAL BUG=1	;1 MEANS HARDWARE CONFUSES ADJACENT
						; 524					;PT DIR VAL BITS IN KL PAGING MODE
						; 525	
						; 526	.DEFAULT/ONE PROCEED=1	;1 ENABLES TRAP1+TRAP2+ADR BRK INH IN PC
						; 527				;TO PROCEED FOR ONE INSTRUCTION THEN
						; 528				;TAKE TRAP 3.  [COST = ?? WDS]
						; 529	
						; 530	.IF/JPC TEST
						; 531	.CHANGE/JPC SUPPORT=1
						; 532	.ENDIF/JPC TEST
						; 533	
						; 534	.IF/JPC
						; 535	.CHANGE/JPC SUPPORT=1
						; 536	.ENDIF/JPC
						; 537	
						; 538	.IFNOT/JPC
						; 539	.CHANGE/JPC.RING=0
						; 540	.ENDIF/JPC
						; 541	
						; 542	.IF/TRACKS		;SETUP CONTROL FOR COMMON CODE
						; 543		.SET/INSTR.STAT=1
						; 544	.ENDIF/TRACKS
						; 545	.IF/OP.CNT
						; 546		.SET/INSTR.STAT=1	;ENABLE COMMON CODE, ERROR IF TRACKS TOO
						; 547	.ENDIF/OP.CNT
						; 548	.IF/OP.TIME
						; 549		.SET/INSTR.STAT=1	;ERROR IF TRACKS OR OP.CNT ALSO SET
						; 550	.ENDIF/OP.TIME
						; 551		.DEFAULT/INSTR.STAT=0	;IF NO STATISTICS, TURN OFF COMMON CODE
						; 552	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 14
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	HOW TO READ THE MICROCODE -- FORMATS & CONSTRUCTS

						; 553	.TOC	"HOW TO READ THE MICROCODE -- FORMATS & CONSTRUCTS"
						; 554	
						; 555	;(1)	FIELD DEFINITIONS
						; 556	;	THESE OCCUR AT THE BEGINNING OF THE LISTING, IN THE SOURCE FILE
						; 557	; DEFINE.MIC (CONTROL AND DISPATCH RAM DEFINITIONS).
						; 558	; THEY HAVE THE FORM:
						; 559	;	SYMBOL/=J,K,L,M
						; 560	;	THE FIRST PARAMETER (J) IS MEANINGFUL ONLY WHEN "D" IS SPECIFIED
						; 561	; AS THE DEFAULT MECHANISM, AND IN THAT CASE, GIVES THE DEFAULT VALUE OF
						; 562	; THE FIELD IN OCTAL.
						; 563	;	THE SECOND PARAMETER (K) GIVES THE FIELD SIZE IN (DECIMAL) NUMBER
						; 564	; OF BITS.
						; 565	;	THE THIRD PARAMETER (L) GIVES THE FIELD POSITION IN DECIMAL
						; 566	; AS THE BIT NUMBER OF THE RIGHTMOST BIT OF THE FIELD.  BITS ARE NUMBERED
						; 567	; FROM 0 ON THE LEFT.  NOTE THAT THE POSITION OF BITS IN THE MICROWORD
						; 568	; SHOWN IN THE LISTING BEARS NO RELATION TO THE ORDERING OF BITS IN THE
						; 569	; HARDWARE MICROWORD, WHERE FIELDS ARE OFTEN BROKEN UP AND SCATTERED.
						; 570	;	THE FOURTH PARAMETER (M) IS OPTIONAL, AND SELECTS A DEFAULT
						; 571	; MECHANISM FOR THE FIELD.  THE LEGAL VALUES OF THIS PARAMETER ARE THE
						; 572	; CHARACTERS "D", "T", "P", OR "+".
						; 573	;	  "D" MEANS J IS THE DEFAULT VALUE OF THE FIELD IF NO EXPLICIT
						; 574	;	VALUE IS SPECIFIED.
						; 575	;	  "T" IS USED ON THE TIME FIELD TO SPECIFY THAT THE VALUE OF THE
						; 576	;	FIELD DEPENDS ON THE TIME PARAMETERS SELECTED FOR OTHER FIELDS.
						; 577	;	THE VALUE OF A FIELD WITH THIS SPECIFICATION DEFAULTS TO THE
						; 578	;	MAX OF <SUM OF THE T1 PARAMETERS DEFINED FOR FIELD/VALUES
						; 579	;	SPECIFIED IN THIS MICROINSTRUCTION>, <SUM OF THE T2 PARAMETERS
						; 580	;	FOR THIS MICROINSTRUCTION>, <J PARAMETER OF THIS FIELD>.
						; 581	;	WITHIN THE KL10 MICROCODE, T1 PARAMETERS ARE USED TO SPECIFY
						; 582	;	FUNCTIONS WHICH DEPEND ON THE ADDER SETUP TIME, AND T2 PARAMETERS
						; 583	;	ARE USED FOR FUNCTIONS WHICH REQUIRE ADDITIONAL TIME FOR CORRECT
						; 584	;	SELECTION OF THE NEXT MICROINSTRUCTION ADDRESS.
						; 585	;	  "P" IS USED ON THE PARITY FIELD TO SPECIFY THAT THE VALUE OF THE
						; 586	;	FIELD SHOULD DEFAULT SUCH THAT PARITY OF THE ENTIRE WORD
						; 587	;	IS ODD.  IF THIS OPTION IS SELECTED ON A FIELD WHOSE SIZE (K) IS
						; 588	;	ZERO, THE MICRO ASSEMBLER WILL ATTEMPT TO FIND A BIT SOMEWHERE
						; 589	;	IN THE WORD FOR WHICH NO VALUE IS SPECIFIED OR DEFAULTED.
						; 590	;	  "+" IS USED ON THE JUMP ADDRESS FIELD TO SPECIFY THAT THE DEFAULT
						; 591	;	JUMP ADDRESS IS THE ADDRESS OF THE NEXT INSTRUCTION ASSEMBLED (NOT,
						; 592	;	IN GENERAL, THE CURRENT LOCATION +1).
						; 593	;	IN GENERAL, A FIELD CORRESPONDS TO THE SET OF BITS WHICH PROVIDE
						; 594	; SELECT INPUTS FOR MIXERS OR DECODERS, OR CONTROLS FOR ALU'S.
						; 595	; EXAMPLES:
						; 596	;	AR/=0,3,26,D
						; 597	;	THE MICROCODE FIELD WHICH CONTROLS THE AR MIXER (AND THEREFORE
						; 598	; THE DATA TO BE LOADED INTO AR ON EACH EBOX CLOCK) IS THREE BITS WIDE
						; 599	; AND THE RIGHTMOST BIT IS SHOWN IN THE LISTING AS BIT 26 OF THE
						; 600	; MICROINSTRUCTION.  IF NO VALUE IS SPECIFICALLY REQUESTED FOR THE FIELD,
						; 601	; THE MICROASSEMBLER WILL ENSURE THAT THE FIELD IS 0.
						; 602	;	AD/=0,6,17
						; 603	;	THE FIELD WHICH CONTROLS THE AD IS 6 BITS WIDE, ENDING ON
						; 604	; BIT 17.  THE FOURTH PARAMETER OF THE FIELD IS OMITTED, SO THE FIELD
						; 605	; IS AVAILABLE TO THE MICROASSEMBLER (IF NO VALUE IS EXPLICITLY
						; 606	; CALLED OUT FOR THE FIELD) FOR MODIFICATION TO ENSURE ODD PARITY IN THE
						; 607	; ENTIRE WORD.
						; 608	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 15
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	HOW TO READ THE MICROCODE -- FORMATS & CONSTRUCTS

						; 609	;(2)	VALUE DEFINITIONS
						; 610	;	FOLLOWING A FIELD DEFINITION, SYMBOLS MAY BE CREATED IN THAT
						; 611	; FIELD TO CORRESPOND TO VALUES OF THE FIELD.  THE FORM IS:
						; 612	;	SYMBOL=N,T1,T2
						; 613	;	"N" IS, IN OCTAL, THE VALUE OF SYMBOL WHEN USED IN THE FIELD.
						; 614	; T1 AND T2 ARE OPTIONAL, AND SPECIFY PARAMETERS IN THE TIME FIELD
						; 615	; CALCULATION FOR MICROINSTRUCTIONS IN WHICH THIS FIELD/SYMBOL IS USED.
						; 616	; THE MICROASSEMBLER COMPUTES THE SUMS OF ALL THE T1'S AND ALL THE T2'S
						; 617	; SPECIFIED FOR FIELD/SYMBOL SPECIFICATIONS IN A WORD, AND USES THE MAX
						; 618	; OF THE TWO SUMS AS THE DEFAULT VALUE FOR THE FIELD WHOSE DEFAULT
						; 619	; MECHANISM IS "T".  EXAMPLES:
						; 620	;	AD/=0,6,17	;FIELD DEFINITION IN WHICH FOLLOWING SYMBOLS EXIST
						; 621	;	XOR=31
						; 622	;	A+B=6,1
						; 623	;	HERE THE SYMBOLS "XOR" AND "A+B" ARE DEFINED FOR THE "AD" FIELD.
						; 624	; TO THE ASSEMBLER, THEREFORE, WRITING "AD/XOR" MEANS PUT THE VALUE 31
						; 625	; INTO THE 6-BIT FIELD ENDING ON BIT 17 OF THE MICROWORD.  THE SYMBOLS
						; 626	; ARE CHOSEN FOR MNEMONIC SIGNIFICANCE, OF COURSE, SO ONE READING
						; 627	; THE MICROCODE WOULD INTERPRET "AD/XOR" AS "THE OUTPUT OF AD SHALL BE THE
						; 628	; EXCLUSIVE OR OF ITS A AND B INPUTS".  SIMILIARLY, "AD/A+B" IS READ AS
						; 629	; "AD PRODUCES THE SUM OF A AND B".  THE SECOND PARAMETER IN THE DEFINITION
						; 630	; OF "A+B" IS A CONTROL TO THE MICRO ASSEMBLER'S TIME-FIELD CALCULATION,
						; 631	; WHICH TELLS THE ASSEMBLER THAT THIS OPERATION TAKES LONGER THAN THE
						; 632	; BASIC CYCLE, AND THEREFORE THAT THE TIME FIELD SHOULD BE INCREASED.
						; 633	;	AR/=0,3,26,D	;FIELD DEFINITION FOR FOLLOWING SYMBOLS
						; 634	;	AR=0
						; 635	;	AD=2
						; 636	;	HERE THE SYMBOLS "AR" AND "AD" ARE DEFINED FOR THE FIELD NAMED
						; 637	; "AR", WHICH CONTROLS THE AR MIXER.  WE COULD WRITE AR/AR TO MEAN THAT
						; 638	; THE AR MIXER SELECT INPUTS WOULD BE 0, WHICH IN THE 
						; 639	; HARDWARE SELECTS THE AR OUTPUT FOR RECIRCULATION TO THE REGISTER.  IN
						; 640	; PRACTICE, HOWEVER, WE WANT THIS TO BE THE DEFAULT CASE, SO THAT AR
						; 641	; DOES NOT CHANGE UNLESS WE SPECIFICALLY REQUEST IT, SO THE FIELD
						; 642	; DEFINITION SPECIFIES 0 AS THE DEFAULT VALUE OF THE FIELD.  IF WE
						; 643	; WANT AR LOADED FROM THE AD OUTPUT, WE WRITE "AR/AD" TO SET THE
						; 644	; MIXER SELECTS TO PASS THE AD OUTPUT INTO THE AR.
						; 645	;
						; 646	;(3)	LABEL DEFINITIONS
						; 647	;	A MICRO INSTRUCTION MAY BE LABELLED BY A SYMBOL FOLLOWED BY COLON
						; 648	; PRECEDING THE MICROINSTRUCTION DEFINITION.  THE ADDRESS OF THE
						; 649	; MICROINSTRUCTION BECOMES THE VALUE OF THE SYMBOL IN THE FIELD NAMED "J".
						; 650	; EXAMPLE:
						; 651	;	FOO:	J/FOO
						; 652	;	THIS IS A MICROINSTRUCTION WHOSE "J" FIELD (JUMP ADDRESS) CONTAINS
						; 653	; THE VALUE "FOO".  IT ALSO DEFINES THE SYMBOL "FOO" TO BE THE ADDRESS
						; 654	; OF ITSELF.  THEREFORE, IF EXECUTED BY THE MICROPROCESSOR, IT WOULD
						; 655	; LOOP ON ITSELF.
						; 656	;
						; 657	;(4)	COMMENTS
						; 658	;	A SEMICOLON ANYWHERE ON A LINE CAUSES THE REST OF THE LINE
						; 659	; TO BE IGNORED BY THE ASSEMBLER.  THIS TEXT IS AN EXAMPLE OF COMMENTS.
						; 660	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 16
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	HOW TO READ THE MICROCODE -- FORMATS & CONSTRUCTS

						; 661	;(5)	MICROINSTRUCTION DEFINITION
						; 662	;	A WORD OF MICROCODE IS DEFINED BY SPECIFYING A FIELD NAME,
						; 663	; FOLLOWED BY SLASH (/), FOLLOWED BY A VALUE.  THE VALUE MAY BE A
						; 664	; SYMBOL DEFINED FOR THAT FIELD, AN OCTAL DIGIT STRING, OR A DECIMAL
						; 665	; DIGIT STRING (DISTINGUISHED BY THE FACT THAT IT CONTAINS "8" AND/OR
						; 666	; "9" AND/OR IS TERMINATED BY A PERIOD). SEVERAL FIELDS MAY BE SPECIFIED
						; 667	; IN ONE MICROINSTRUCTION BY SEPARATING FIELD/VALUE SPECIFICATIONS WITH
						; 668	; COMMAS.  EXAMPLE:
						; 669	;	ADB/BR,ADA/AR,AD/A+B,AR/AD
						; 670	;	THE FIELD NAMED "ADB" IS GIVEN THE VALUE NAMED "BR" (TO
						; 671	; CAUSE THE MIXER ON THE B SIDE OF AD TO SELECT BR), FIELD "ADA" HAS VALUE
						; 672	; "AR", FIELD "AD" HAS VALUE "A+B", AND FIELD "AR" HAS VALUE "AD".
						; 673	;
						; 674	;(6)	CONTINUATION
						; 675	;	THE DEFINITION OF A MICROINSTRUCTION MAY CONTINUED ONTO TWO OR
						; 676	; MORE LINES BY BREAKING IT AFTER ANY COMMA.  IN OTHER WORDS, IF THE
						; 677	; LAST NON-BLANK, NON-COMMENT CHARACTER ON A LINE IS A COMMA, THE
						; 678	; INSTRUCTION SPECIFICATION IS CONTINUED ON THE FOLLOWING LINE.
						; 679	; EXAMPLE:
						; 680	;	ADB/BR,ADA/AR,		;SELECT AR & BR AS AD INPUTS
						; 681	;		AD/A+B,AR/AD	;TAKE THE SUM INTO AR
						; 682	; BY CONVENTION, CONTINUATION LINES ARE INDENTED AN EXTRA TAB.
						; 683	;
						; 684	;(7)	MACROS
						; 685	;	A MACRO IS A SYMBOL WHOSE VALUE IS ONE OR MORE FIELD/VALUE
						; 686	; SPECIFICATIONS AND/OR MACROS.  A MACRO DEFINITION IS A LINE CONTAINING
						; 687	; THE MACRO NAME FOLLOWED BY A QUOTED STRING WHICH IS THE VALUE OF THE
						; 688	; MACRO.  EXAMPLE:
						; 689	;	AR_AR+BR	"ADB/BR,ADA/AR,AD/A+B,AR/AD"
						; 690	; THE APPEARANCE OF A MACRO IN A MICROINSTRUCTION DEFINITION IS EQUIVALENT
						; 691	; TO THE APPEARANCE OF ITS VALUE.  MACROS FOR VARIOUS FUNCTIONS
						; 692	; ARE DEFINED IN "MACRO.MIC".
						; 693	;
						; 694	;(8)	PSEUDO OPS
						; 695	;	THE MICRO ASSEMBLER HAS 10 PSEUDO-OPERATORS:
						; 696	;.DCODE AND .UCODE SELECT THE RAM INTO WHICH SUBSEQUENT MICROCODE WILL
						; 697	;BE LOADED, AND THEREFORE THE FIELD DEFINITIONS AND MACROS WHICH ARE
						; 698	;MEANINGFUL IN SUBSEQUENT MICROCODE
						; 699	;.TITLE DEFINES A STRING OF TEXT TO APPEAR IN THE PAGE HEADER, AND
						; 700	;.TOC DEFINES AN ENTRY FOR THE TABLE OF CONTENTS AT THE BEGINNING.
						; 701	;.SET DEFINES THE VALUE OF A CONDITIONAL ASSEMBLY PARAMETER,
						; 702	;.CHANGE REDEFINES A CONDITIONAL ASSEMBLY PARAMETER,
						; 703	;.DEFAULT ASSIGNS A VALUE TO AN UNDEFINED PARAMETER.
						; 704	;.IF ENABLES ASSEMBLY IF THE VALUE OF THE PARAMETER IS NOT ZERO,
						; 705	;.IFNOT ENABLES ASSEMBLY IF THE PARAMETER VALUE IS ZERO, AND
						; 706	;.ENDIF RE-ENABLES ASSEMBLY IF SUPPRESSED BY THE PARAMETER NAMED.
						; 707	;(9)	LOCATION CONTROL
						; 708	;	A MICROINSTRUCTION "LABELLED" WITH A NUMBER IS ASSIGNED TO THAT
						; 709	; ADDRESS.
						; 710	;	THE CHARACTER "=" AT THE BEGINNING OF A LINE, FOLLOWED BY
						; 711	; A STRING OF 0'S, 1'S, AND/OR *'S, SPECIFIES A CONSTRAINT ON THE
						; 712	; ADDRESS OF FOLLOWING MICROINSTRUCTIONS.  THE NUMBER OF CHARACTERS
						; 713	; IN THE CONSTRAINT STRING (EXCLUDING THE "=") IS THE NUMBER OF LOW-ORDER
						; 714	; BITS CONSTRAINED IN THE ADDRESS.  THE MICROASSEMBLER ATTEMPTS TO FIND
						; 715	; AN UNUSED LOCATION WHOSE ADDRESS HAS 0 BITS IN THE POSITIONS
						; 716	; CORRESPONDING TO 0'S IN THE CONSTRAINT STRING AND 1 BITS WHERE THE
						; 717	; CONSTRAINT HAS 1'S.  ASTERISKS DENOTE "DON'T CARE" BIT POSITIONS.
						; 718	;	IF THERE ARE ANY 0'S IN THE CONSTRAINT STRING, THE CONSTRAINT
						; 719	; IMPLIES A BLOCK OF <2**N> MICROWORDS, WHERE N IS THE NUMBER OF 0'S
						; 720	; IN THE STRING.  ALL LOCATIONS IN THE BLOCK WILL HAVE 1'S IN THE ADDRESS
						; 721	; BITS CORRESPONDING TO 1'S IN THE STRING, AND BIT POSITIONS DENOTED BY *'S
						; 722	; WILL BE THE SAME IN ALL LOCATIONS OF THE BLOCK.
						; 723	;	IN SUCH A CONSTRAINT BLOCK, THE DEFAULT ADDRESS PROGRESSION IS
						; 724	; COUNTING IN THE "0" POSITIONS OF THE CONSTRAINT STRING, BUT A NEW
						; 725	; CONSTRAINT STRING OCCURING WITHIN A BLOCK MAY FORCE SKIPPING OVER
						; 726	; SOME LOCATIONS OF THE BLOCK.  WITHIN A BLOCK, A NEW CONSTRAINT
						; 727	; STRING DOES NOT CHANGE THE PATTERN OF DEFAULT ADDRESS PROGRESSION, IT
						; 728	; MERELY ADVANCES THE LOCATION COUNTER OVER THOSE LOCATIONS.  THE
						; 729	; MICROASSEMBLER WILL LATER FILL THEM IN.
						; 730	;	A NULL CONSTRAINT STRING ("=" FOLLOWED BY ANYTHING BUT "0",
						; 731	; "1", OR "*") SERVES TO TERMINATE A CONSTRAINT BLOCK.
						; 732	; EXAMPLES:
						; 733	;	=0	
						; 734	;	THIS SPECIFIES THAT THE LOW-ORDER ADDRESS BIT MUST BE ZERO--
						; 735	; THE MICROASSEMBLER FINDS AN EVEN-ODD PAIR OF LOCATIONS, AND PUTS
						; 736	; THE NEXT TWO MICROINSTRUCTIONS INTO THEM.
						; 737	;	=11
						; 738	;	THIS SPECIFIES THAT THE TWO LOW-ORDER BITS OF THE ADDRESS MUST
						; 739	; BOTH BE ONES.  SINCE THERE ARE NO 0'S IN THIS CONSTRAINT, THE
						; 740	; ASSEMBLER FINDS ONLY ONE LOCATION MEETING THE CONSTRAINT.
						; 741	;	=0*****
						; 742	;	THIS SPECIFIES AN ADDRESS IN WHICH THE "40" BIT IS ZERO.  DUE
						; 743	; TO THE IMPLEMENTATION OF THIS FEATURE IN THE ASSEMBLER,  THE DEFAULT
						; 744	; ADDRESS PROGRESSION APPLIES ONLY TO THE LOW-ORDER 5 BITS, SO THIS
						; 745	; CONSTRAINT FINDS ONE WORD IN WHICH THE "40" BIT IS ZERO, AND DOES
						; 746	; NOT ATTEMPT TO FIND ONE IN WHICH THAT BIT IS A ONE.
						; 747	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 17
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	MICROCODE LISTING TEMPLATE

						; 748	.TOC	"MICROCODE LISTING TEMPLATE"
						; 749	;HERE IS A TEMPLATE WHICH CAN BE USED WITH THE MICROCODE
						; 750	; LISTING TO IDENTIFY FIELDS IN THE OUTPUT --
						; 751	
						; 752	
						; 753	; ----  ---- ---- ---- ---- ---- ---- ----
						; 754	; [--]  [--] []!! !!!! !!!! !![] [][] ![-]
						; 755	;   !     !   !!! !!!! !!!! !! !  ! ! ! + # = MAGIC NUMBERS
						; 756	;   !     !   !!! !!!! !!!! !! !  ! ! + MARK = SCOPE SYNC
						; 757	;   !     !   !!! !!!! !!!! !! !  ! !
						; 758	;   !     !   !!! !!!! !!!! !! !  ! + DISP/SPEC = SPECIAL FUNCTIONS
						; 759	;   !     !   !!! !!!! !!!! !! !  + SKIP/COND = SPECIAL FUNCTIONS
						; 760	;   !     !   !!! !!!! !!!! !! !
						; 761	;   !     !   !!! !!!! !!!! !! + TIME, MEM = UINST TIME & MEM FUNCTION
						; 762	;   !     !   !!! !!!! !!!! !+ VMA = VMA INPUT SELECT
						; 763	;   !     !   !!! !!!! !!!! + SH/ARMM = SH FUNCTION / ARMM SELECT
						; 764	;   !     !   !!! !!!! !!!!
						; 765	;   !     !   !!! !!!! !!!+ SC, FE = SC INPUT SELECT & FE LOAD
						; 766	;   !     !   !!! !!!! !!+ SCADB = SELECT FOR SCAD "B" INPUT
						; 767	;   !     !   !!! !!!! !+ SCADA = ENABLE AND SELECT FOR SCAD "A" INPUT
						; 768	;   !     !   !!! !!!! + SCAD = SC/FE ADDER FUNCTION
						; 769	;   !     !   !!! !!!!
						; 770	;   !     !   !!! !!!+ FM ADR = FAST MEMORY ADDRESS SELECT
						; 771	;   !     !   !!! !!+ BR, BRX, MQ = LOAD BR & BRX, SEL FOR MQ
						; 772	;   !     !   !!! !+ ARX = SELECT FOR ARX INPUT
						; 773	;   !     !   !!! + AR = SELECT FOR AR INPUT
						; 774	;   !     !   !!!
						; 775	;   !     !   !!+ ADB = SELECT FOR ADDER "B" INPUT
						; 776	;   !     !   !+ ADA = SELECT AND ENABLE FOR ADDER "A" INPUT
						; 777	;   !     !   + AD = OPERATION IN ADDER AND ADDER EXTENSION
						; 778	;   !     !
						; 779	;   !     + J = BASE ADDRESS TO WHICH THIS MICROINSTRUCTION JUMPS
						; 780	;   !
						; 781	;   + LOCATION IN CRAM INTO WHICH THIS WORD IS LOADED
						; 782	;
						; 783	; U/V = MICRO INSTRUCTION FOR CRAM
						; 784	
						; 785	;*******************************************************************
						; 786	
						; 787	; D = WORD FOR DRAM
						; 788	;
						; 789	;   + LOCATION IN DRAM INTO WHICH THIS WORD IS LOADED
						; 790	;   !
						; 791	;   !   + A = OPERAND ACCESS CONTROL
						; 792	;   !   !+ B = INSTRUCTION "MODE"
						; 793	;   !   !! + P = PARITY FOR THIS WORD
						; 794	;   !   !! !
						; 795	;   !   !! !   + J = ADDRESS OF HANDLER FOR THIS INSTRUCTION
						; 796	; [--]  !! ! [--]
						; 797	; ----  ---- ----
						; 798	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 18
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	KL10 INSTRUCTION OPCODE MAP

						; 799	.TOC	"KL10 INSTRUCTION OPCODE MAP"
						; 800	
						; 801	;	0	1	2	3	4	5	6	7
						; 802	;000    UUO	LUUO	LUUO	LUUO	LUUO	LUUO	LUUO	LUUO
						; 803	;010	LUUO	LUUO	LUUO	LUUO	LUUO	LUUO	LUUO	LUUO
						; 804	;020	LUUO	LUUO	LUUO	LUUO	LUUO	LUUO	LUUO	LUUO
						; 805	;030	LUUO	LUUO	LUUO	LUUO	LUUO	LUUO	LUUO	LUUO
						; 806	;040	UUO	UUO	UUO	UUO	UUO	UUO	UUO	UUO
						; 807	;050	UUO	UUO	UUO	UUO	UUO	UUO	UUO	UUO
						; 808	;060	UUO	UUO	UUO	UUO	UUO	UUO	UUO	UUO
						; 809	;070	LSPGCM	LSPGCS	UUO	UUO	XCTR	XCTRI	LPMR	SPM
						; 810	;	0	1	2	3	4	5	6	7
						; 811	;100	LSPDBG	UUO	UUO	UUO	MVSQZ	ADJSP	UUO	SXCT
						; 812	;110	DFAD	DFSB	DFMP	DFDV	DADD	DSUB	DMUL	DDIV
						; 813	;120	DMOVE	DMOVN	FIX	EXTEND	DMOVEM	DMOVNM	FIXR	FLTR
						; 814	;130	UFA	DFN	FSC	IBP	ILDB	LDB	IDPB	DPB
						; 815	;140	FAD	FADL	FADM	FADB	FADR	FADRI	FADRM	FADRB
						; 816	;150	FSB	FSBL	FSBM	FSBB	FSBR	FSBRI	FSBRM	FSBRB
						; 817	;160	FMP	FMPL	FMPM	FMPB	FMPR	FMPRI	FMPRM	FMPRB
						; 818	;170	FDV	FDVL	FDVM	FDVB	FDVR	FDVRI	FDVRM	FDVRB
						; 819	;	0	1	2	3	4	5	6	7
						; 820	;200	MOVE	MOVEI	MOVEM	MOVES	MOVS	MOVSI	MOVSM	MOVSS
						; 821	;210	MOVN	MOVNI	MOVNM	MOVNS	MOVM	MOVMI	MOVMM	MOVMS
						; 822	;220	IMUL	IMULI	IMULM	IMULB	MUL	MULI	MULM	MULB
						; 823	;230	IDIV	IDIVI	IDIVM	IDIVB	DIV	DIVI	DIVM	DIVB
						; 824	;240	ASH	ROT	LSH	JFFO	ASHC	ROTC	LSHC	CIRC
						; 825	;250	EXCH	BLT	AOBJP	AOBJN	JRST	JFCL	XCT	MAP
						; 826	;260	PUSHJ	PUSH	POP	POPJ	JSR	JSP	JSA	JRA
						; 827	;270	ADD	ADDI	ADDM	ADDB	SUB	SUBI	SUBM	SUBB
						; 828	;	0	1	2	3	4	5	6	7
						; 829	;300	CAI	CAIL	CAIE	CAILE	CAIA	CAIGE	CAIN	CAIG
						; 830	;310	CAM	CAML	CAME	CAMLE	CAMA	CAMGE	CAMN	CAMG
						; 831	;320	JUMP	JUMPL	JUMPE	JUMPLE	JUMPA	JUMPGE	JUMPN	JUMPG
						; 832	;330	SKIP	SKIPL	SKIPE	SKIPLE	SKIPA	SKIPGE	SKIPN	SKIPG
						; 833	;340	AOJ	AOJL	AOJE	AOJLE	AOJA	AOJGE	AOJN	AOJG
						; 834	;350	AOS	AOSL	AOSE	AOSLE	AOSA	AOSGE	AOSN	AOSG
						; 835	;360	SOJ	SOJL	SOJE	SOJLE	SOJA	SOJGE	SOJN	SOJG
						; 836	;370	SOS	SOSL	SOSE	SOSLE	SOSA	SOSGE	SOSN	SOSG
						; 837	;	0	1	2	3	4	5	6	7
						; 838	;400	SETZ	SETZI	SETZM	SETZB	AND	ANDI	ANDM	ANDB
						; 839	;410	ANDCA	ANDCAI	ANDCAM	ANDCAB	SETM	SETMI	SETMM	SETMB
						; 840	;420	ANDCM	ANDCMI	ANDCMM	ANDCMB	SETA	SETAI	SETAM	SETAB
						; 841	;430	XOR	XORI	XORM	XORB	IOR	IORI	IORM	IORB
						; 842	;440	ANDCB	ANDCBI	ANDCBM	ANDCBB	EQV	EQVI	EQVM	EQVB
						; 843	;450	SETCA	SETCAI	SETCAM	SETCAB	ORCA	ORCAI	ORCAM	ORCAB
						; 844	;460	SETCM	SETCMI	SETCMM	SETCMB	ORCM	ORCMI	ORCMM	ORCMB
						; 845	;470	ORCB	ORCBI	ORCBM	ORCBB	SETO	SETOI	SETOM	SETOB
						; 846	;	0	1	2	3	4	5	6	7
						; 847	;500	HLL	HLLI	HLLM	HLLS	HRL	HRLI	HRLM	HRLS
						; 848	;510	HLLZ	HLLZI	HLLZM	HLLZS	HRLZ	HRLZI	HRLZM	HRLZS
						; 849	;520	HLLO	HLLOI	HLLOM	HLLOS	HRLO	HRLOI	HRLOM	HRLOS
						; 850	;530	HLLE	HLLEI	HLLEM	HLLES	HRLE	HRLEI	HRLEM	HRLES
						; 851	;540	HRR	HRRI	HRRM	HRRS	HLR	HLRI	HLRM	HLRS
						; 852	;550	HRRZ	HRRZI	HRRZM	HRRZS	HLRZ	HLRZI	HLRZM	HLRZS
						; 853	;560	HRRO	HRROI	HRROM	HRROS	HLRO	HLROI	HLROM	HLROS
						; 854	;570	HRRE	HRREI	HRREM	HRRES	HLRE	HLREI	HLREM	HLRES
						; 855	;	0	1	2	3	4	5	6	7
						; 856	;600	TRN	TLN	TRNE	TLNE	TRNA	TLNA	TRNN	TLNN
						; 857	;610	TDN	TSN	TDNE	TSNE	TDNA	TSNA	TDNN	TSNN
						; 858	;620	TRZ	TLZ	TRZE	TLZE	TRZA	TLZA	TRZN	TLZN
						; 859	;630	TDZ	TSZ	TDZE	TSZE	TDZA	TSZA	TDZN	TSZN
						; 860	;640	TRC	TLC	TRCE	TLCE	TRCA	TLCA	TRCN	TLCN
						; 861	;650	TDC	TSC	TDCE	TSCE	TDCA	TSCA	TDCN	TSCN
						; 862	;660	TRO	TLO	TROE	TLOE	TROA	TLOA	TRON	TLON
						; 863	;670	TDO	TSO	TDOE	TSOE	TDOA	TSOA	TDON	TSON
						; 864	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 19
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- AD

						; 865	.TOC	"CONTROL RAM DEFINITIONS -- AD"
						; 866	;FIELDS ARRANGED FOR READABILITY, NOT COMPACTNESS
						; 867	; IN THE PROCESSOR, BITS ARE SCATTERED IN ANOTHER ORDER
						; 868	
						; 869	U0/=0,1,0,D	;BIT 0 UNUSED
						; 870	J/=0,11,11,+	;SYMBOLS WILL BE DEFINED BY TAGS (CRA1&CRA2)
						; 871	
						; 872	;MAIN ADDER CONTROLS
						; 873	
						; 874	AD/=0,6,17	; (EDP3, EXCEPT CARRY IN, ON CTL1)
						; 875			;BIT 0 = CARRY IN, BIT 1 = BOOLE
						; 876			;BITS 2-5 = S8-S1 OF 10181 ALU
						; 877			;ARITHMETIC, AD AND ADX SEPARATED
						; 878			;72 BIT ARITHMETIC REQUIRES SPEC/AD LONG
						; 879		A+1=40,1
						; 880		A+XCRY=00,1
						; 881	;	A+ANDCB=01,1
						; 882	;	A+AND=02,1
						; 883		A*2=03,1
						; 884		A*2+1=43,1
						; 885	;	OR+1=44,1
						; 886	;	OR+ANDCB=05,1
						; 887		A+B=06,1
						; 888		A+B+1=46,1
						; 889	;	A+OR=07,1
						; 890		ORCB+1=50,1
						; 891		A-B-1=11,1
						; 892		A-B=51,1
						; 893	;	AND+ORCB=52,1
						; 894	;	A+ORCB=53,1
						; 895		XCRY-1=54,1
						; 896	;	ANDCB-1=15,1
						; 897	;	AND-1=16,1
						; 898		A-1=17,1
						; 899			;ADDER LOGICAL FUNCTIONS
						; 900		SETCA=20
						; 901		ORC=21		;NAND
						; 902		ORCA=22
						; 903		1S=23
						; 904		ANDC=24		;NOR
						; 905		SETCB=25
						; 906		EQV=26
						; 907		ORCB=27
						; 908		ANDCA=30
						; 909		XOR=31
						; 910		B=32
						; 911		OR=33
						; 912		0S=34
						; 913		ANDCB=35
						; 914		AND=36
						; 915		A=37
						; 916			;BOOLEAN FUNCTIONS FOR WHICH CRY0 IS INTERESTING
						; 917		CRY A EQ -1=60,1	;GENERATE CRY0 IF A=1S, AD=SETCA
						; 918		CRY A.B#0=36,1		;CRY 0 IF A&B NON-ZERO, AD=AND
						; 919		CRY A#0=37,1		;GENERATE CRY0 IF A .NE. 0, AD=A
						; 920		CRY A GE B=71,1		;CRY0 IF A .GE. B, UNSIGNED; AD=XOR
						; 921	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 20
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- DATA PATH MIXERS

						; 922	.TOC	"CONTROL RAM DEFINITIONS -- DATA PATH MIXERS"
						; 923	
						; 924	ADA/=0,3,20		; (EDP3)
						; 925		AR=0
						; 926		ARX=1
						; 927		MQ=2
						; 928		PC=3
						; 929	ADA EN/=0,1,18		;ADA ENABLE ALSO ENABLES ADXA (EDP3)
						; 930		EN=0
						; 931		0S=1
						; 932	U21/=0,1,21,D	;BIT 21 UNUSED
						; 933	ADB/=0,2,23		;CONTROLS ADB AND ADXB (EDP3)
						; 934		FM=0,,1		;MUST HAVE TIME FOR PARITY CHECK
						; 935		BR*2=1
						; 936		BR=2
						; 937		AR*4=3
						; 938	U23/=1,1,23,D	;PREVENT DEFAULT SELECTION OF FM
						; 939	AR/=0,3,26,D		; (EDP1)
						; 940		AR=0
						; 941		ARMM=0		;REQUIRES SPECIAL FUNCTION
						; 942		CACHE=1		;ORDINARILY SELECTED BY HWARE
						; 943		AD=2
						; 944		EBUS=3
						; 945		SH=4
						; 946		AD*2=5
						; 947		ADX=6
						; 948		AD*.25=7
						; 949	ARX/=0,3,29,D		; (EDP2)
						; 950	;	ARX=0		;BY DEFAULT
						; 951		CACHE=1		;ORDINARILY BY MBOX RESP
						; 952		AD=2
						; 953		MQ=3
						; 954		SH=4
						; 955		ADX*2=5
						; 956		ADX=6
						; 957		ADX*.25=7
						; 958	BR/=0,1,30,D		;DEFAULT TO RECIRCULATE (EDP4)
						; 959		AR=1
						; 960	BRX/=0,1,31,D		;DEFAULT TO RECIRCULATE (EDP4)
						; 961		ARX=1
						; 962	MQ/=0,1,32,D		;DEFAULT TO RECIRCULATE (EDP2)
						; 963		SH=1		;LOAD FROM SHIFT MATRIX
						; 964		MQ*2=0		;WITH SPEC/MQ SHIFT
						; 965		MQ*.25=1	;WITH SPEC/MQ SHIFT
						; 966		MQ SEL=0	;WITH COND/REG CTL
						; 967		MQM SEL=1	;WITH COND/REG CTL
						; 968	FMADR/=0,3,35		; (APR4&APR5)
						; 969		AC0=0		;IR 9-12
						; 970		AC1=1		;<IR 9-12>+1 MOD 16
						; 971		XR=2		;ARX 14-17
						; 972		VMA=3		;VMA 32-35
						; 973		AC2=4		;<IR 9-12>+2 MOD 16
						; 974		AC3=5		;<IR 9-12>+3 MOD 16
						; 975		AC4=6		;CURRENT BLOCK, AC+4
						; 976		#B#=7		;BLOCK AND AC SELECTED BY # FIELD
						; 977	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 21
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- 10-BIT LOGIC

						; 978	.TOC	"CONTROL RAM DEFINITIONS -- 10-BIT LOGIC"
						; 979	
						; 980	SCAD/=0,3,38		; (SCD1)
						; 981		A=0
						; 982		A-B-1=1
						; 983		A+B=2
						; 984		A-1=3
						; 985		A+1=4
						; 986		A-B=5
						; 987		OR=6
						; 988		AND=7
						; 989	SCADA/=0,3,41		; (SCD1)
						; 990		FE=0
						; 991		AR0-5=1		;BYTE POINTER P FIELD
						; 992		AR EXP=2	;<AR 01-08> XOR <AR 00>
						; 993		#=3		;SIGN EXTENDED WITH #00
						; 994	SCADA EN/=0,1,39	; (SCD1)
						; 995		0S=1
						; 996	U42/=0,1,42,D	;BIT 42 UNUSED
						; 997	SCADB/=0,2,44		; (SCD1)
						; 998		SC=0
						; 999		AR6-11=1	;BYTE POINTER S FIELD
						; 1000		AR0-8=2
						; 1001		#=3		;NO SIGN EXTENSION
						; 1002	U45/=0,1,45,D	;BIT 45 UNUSED
						; 1003	SC/=0,1,46,D		;RECIRCULATE BY DEFAULT (SCD2)
						; 1004		FE=0		;WITH SCM ALT
						; 1005		SCAD=1
						; 1006		AR SHIFT=1	;WITH SCM ALT ;AR 18, 28-35
						; 1007	FE/=0,1,47,D		;RECIRCULATE BY DEFAULT (SCD2)
						; 1008		SCAD=1
						; 1009	U48/=0,1,48,D	;BIT 48 UNUSED
						; 1010			;OTHER COMPLEX FUNCTIONS
						; 1011	SH/=0,2,50		; (SH1)
						; 1012		SHIFT AR!ARX=0	;LEFT BY (SC)
						; 1013		AR=1
						; 1014		ARX=2
						; 1015		AR SWAP=3	;HALVES SWAPPED
						; 1016	ARMM/=0,2,50		;SAME BITS AS SH CONTROL (SCD3)
						; 1017		#=0		;MAGIC # 0-8 TO AR 0-8
						; 1018		EXP_SIGN=1	;AR1-8 _ AR0
						; 1019		SCAD EXP=2	;AR0-8_SCAD
						; 1020		SCAD POS=3	;AR0-5_SCAD
						; 1021	U51/=0,1,51,D	;BIT 51 UNUSED
						; 1022	VMA/=0,2,53,D		;ALSO CONTROLLED BY SPECIAL FUNCTIONS
						; 1023		VMA=0		;BY DEFAULT
						; 1024		PC=1		;MAY BE OVERRIDDEN BY MCL LOGIC
						; 1025		PC+1=2		; TO LOAD VMA FROM AD
						; 1026		AD=3
						; 1027	TIME/=0,2,55,T		;CONTROLS MINIMUM MICROINSTRUCTION EXECUTION
						; 1028				; TIME, COUNTING MBOX CLOCK TICKS (CLK)
						; 1029				;ASSEMBLER GENERALLY TAKES CARE OF THIS
						; 1030		2T=0		;2 TICKS
						; 1031		3T=1		;3 TICKS
						; 1032		4T=2		;4 TICKS
						; 1033		5T=3		;5 TICKS (COND/DIAG FUNC & #00, --> .5 USEC)
						; 1034	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 22
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- MEM SPECIAL FUNCTIONS

						; 1035	.TOC	"CONTROL RAM DEFINITIONS -- MEM SPECIAL FUNCTIONS"
						; 1036	
						; 1037	MEM/=0,4,59,D		; (MCL1)
						; 1038	;	NOP=0		;DEFAULT
						; 1039		ARL IND=1	;CONTROL AR LEFT MUX FROM # FIELD
						; 1040		MB WAIT=2	;WAIT FOR MBOX RESP IF PENDING
						; 1041	;	SEC 0=3		;CLEAR VMAX
						; 1042		A RD=4		;OPERAND READ
						; 1043		B WRITE=5	;CONDITIONAL WRITE ON DRAM B 01
						; 1044		FETCH=6		;LOAD NEXT INSTR TO ARX (CONTROL BY #)
						; 1045		REG FUNC=7	;MBOX REGISTER FUNCTIONS
						; 1046	.IFNOT/XADDR		;OLD-STYLE MCL BOARD
						; 1047		A IND=10	;A-TYPE INDIRECT
						; 1048		BYTE IND=11	;BYTE-TYPE INDIRECT
						; 1049		LOAD AR=12
						; 1050		LOAD ARX=13
						; 1051		AD FUNC=14	;FUNCTION FROM AD LEFT
						; 1052		BYTE RD=15	;BYTE READ TO BOTH AR AND ARX
						; 1053		WRITE=16	;FROM AR TO MEMORY
						; 1054		RPW=17		;LOAD AR WITH RPW CYCLE
						; 1055	.IF/XADDR
						; 1056		AD FUNC=10	;FUNCTION LOADED FROM AD LEFT
						; 1057		EA CALC=11	;FUNCTION DECODED FROM # FIELD
						; 1058		LOAD AR=12
						; 1059		LOAD ARX=13
						; 1060		RW=14		;READ, TEST WRITABILITY
						; 1061		RPW=15		;READ-PAUSE-WRITE
						; 1062		WRITE=16
						; 1063		IFET=17		;UNCONDITIONAL FETCH
						; 1064	.ENDIF/XADDR
						; 1065	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 23
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- SKIP/COND SPECIAL FUNCTIONS

						; 1066	.TOC	"CONTROL RAM DEFINITIONS -- SKIP/COND SPECIAL FUNCTIONS"
						; 1067	
						; 1068	SKIP/=0,6,65,D		;MICRO-PROGRAM SKIPS
						; 1069				; 40-57 DECODED ON (CRA2)
						; 1070	;	SPARE=40
						; 1071		EVEN PAR=41,,1	;AR PARITY IS EVEN
						; 1072		BR0=42		;BR BIT 00
						; 1073		ARX0=43		;ARX BIT 00
						; 1074		AR18=44		;AR BIT 18
						; 1075		AR0=45		;AR BIT 00
						; 1076		AC#0=46		;IR9-12 .EQ. 0
						; 1077		SC0=47		;SC BIT 00
						; 1078		SC .LT. 36=50
						; 1079		SCAD0=51,,1	;SIGN OF SCAD OUTPUT
						; 1080		SCAD#0=52,,1	;SCAD OUTPUT IS NON-ZERO
						; 1081		ADX0=53,1	;ADDER EXTENSION BIT 00
						; 1082		AD CRY0=54,1	;CARRY OUT OF AD BIT -2 (BOOLE IGNORED)
						; 1083		AD0=55,1	;ADDER BIT 00
						; 1084		AD#0=56,1	;AD BITS 00-35 CONTAIN SOME ONES
						; 1085	;	SPARE=57
						; 1086				; 60-77 DECODED ON (CON2)
						; 1087		FETCH=60	;VMA FETCH (LAST CYCLE WAS A FETCH)
						; 1088		KERNEL=61	;PC IS IN KERNEL MODE
						; 1089		USER=62		;PC IS IN USER MODE
						; 1090		PUBLIC=63	;PC IS PUBLIC (INCLUDING SUPER)
						; 1091		RPW REF=64	;MIDDLE OF READ-PAUSE-WRITE CYCLE
						; 1092		PI CYCLE=65	;PI CYCLE IN PROGRESS
						; 1093		-EBUS GRANT=66	;PI HASN'T RELEASED BUS FOR CPU USE
						; 1094		-EBUS XFER=67	;NO TRANSFER RECIEVED FROM DEVICE
						; 1095		INTRPT=70	;AN INTERRUPT REQUEST WAITING FOR SERVICE
						; 1096		-START=71	;NO CONTINUE BUTTON
						; 1097		RUN=72		;PROCESSOR NOT HALTED
						; 1098		IO LEGAL=73	;KERNEL, PI CYCLE, USER IOT, OR DEVICE .GE. 740
						; 1099		P!S XCT=74	;PXCT OR SXCT
						; 1100	;	EBOX PF=75	;EBOX SHOULD HANDLE THIS PAGE FAIL
						; 1101		AC REF=76,,1	;VMA .LT. 20 ON READ OR WRITE
						; 1102		-MTR REQ=77	;INTERRUPT REQUEST NOT DUE TO METER
						; 1103	
						; 1104	;SKIP/COND FIELD CONTINUED
						; 1105	
						; 1106	COND/=0,6,65,D		;NON-SKIP SPECIAL FUNCTIONS
						; 1107				;0-7 DECODED ON (CTL2)
						; 1108	;	NOP=0		;BY DEFAULT
						; 1109		LD AR0-8=1
						; 1110		LD AR9-17=2
						; 1111		LD AR18-35=3
						; 1112		AR CLR=4
						; 1113		ARX CLR=5
						; 1114		ARL IND=6	;CONTROL AR LEFT, CALL, AND CLEAR BITS FROM #
						; 1115		REG CTL=7	;CONTROL AR LOAD, EXP TST, AND MQ FROM #
						; 1116				; 10-37 DECODED ON (CON1)
						; 1117		FM WRITE=10	;WRITE AR INTO CURRENTLY ADDRESSED FM LOC
						; 1118		PCF_#=11	;SET PC FLAGS FROM # FIELD
						; 1119		FE SHRT=12	;SHIFT FE RIGHT 1
						; 1120		AD FLAGS=13	;SET PC CRY0, CRY1, OVRFLO, TRAP1 AS APPROPRIATE
						; 1121		LOAD IR=14	;LATCH AD OR CACHE DATA INTO IR
						; 1122		SPEC INSTR=15	;SET/CLR SXCT, PXCT, PICYC, TRAP INSTR FLAGS
						; 1123		SR_#=16		;CONTROL FOR STATE REGISTER
						; 1124		SEL VMA=17	;READ VMA THROUGH ADA/PC
						; 1125		DIAG FUNC=20	;SELECT DIAGNOSTIC INFO ONTO EBUS
						; 1126		EBOX STATE=21	;SET STATE FLOPS
						; 1127		EBUS CTL=22	;I/O FUNCTIONS
						; 1128		MBOX CTL=23
						; 1129	;	SPARE=24
						; 1130	;	SPARE=25
						; 1131	;	SPARE=26
						; 1132	;	SPARE=27
						; 1133		VMA_#=30
						; 1134		VMA_#+TRAP=31
						; 1135		VMA_#+MODE=32
						; 1136		VMA_#+AR32-35=33
						; 1137		VMA_#+PI*2=34
						; 1138		VMA DEC=35	;VMA_VMA-1
						; 1139		VMA INC=36	;VMA_VMA+1
						; 1140		LD VMA HELD=37	;HOLD VMA ON SIDE
						; 1141	U66/=0,1,66,D	;BIT 66 UNUSED
						; 1142	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 24
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- DISP/SPEC SPECIAL FUNCTIONS

						; 1143	.TOC	"CONTROL RAM DEFINITIONS -- DISP/SPEC SPECIAL FUNCTIONS"
						; 1144	
						; 1145	DISP/=10,5,71,D	;0-7 AND 30-37 ARE DISPATCHES (CRA1&CRA2)
						; 1146		DIAG=0
						; 1147		DRAM J=1
						; 1148		DRAM A RD=2	;IMPLIES INH CRY18
						; 1149		RETURN=3	;POPJ RETURN
						; 1150		PG FAIL=4	;PAGE FAIL TYPE DISP
						; 1151		SR=5		;16 WAYS ON STATE REGISTER
						; 1152		NICOND=6	;NEXT INSTRUCTION CONDITION
						; 1153		SH0-3=7,,2	;16 WAYS ON HIGH-ORDER BITS OF SHIFTER
						; 1154		MUL=30		;IMPLIES MQ SHIFT, AD LONG
						; 1155		DIV=31,,1	;IMPLIES MQ SHIFT, AD LONG
						; 1156		SIGNS=32,1	;AR0*4 + BR0*2 + AD0
						; 1157		DRAM B=33	;8 WAYS ON DRAM B FIELD
						; 1158		BYTE=34,,1	;FPD*4 + BR12*2 + SCAD0
						; 1159		NORM=35,2	;IMPLIES AD LONG
						; 1160		EA MOD=36	;@*2 + XR
						; 1161		EA TYPE=37
						; 1162	
						; 1163	SPEC/=10,5,71,D		;NON-DISPATCH SPECIAL FUNCTIONS (CTL1)
						; 1164	;	NOP=10		;DEFAULT
						; 1165		INH CRY18=11
						; 1166		MQ SHIFT=12	;ENABLE MQ*2, MQ SHRT2
						; 1167		SCM ALT=13	;ENABLE FE, ARSHIFT
						; 1168		CLR FPD=14
						; 1169		LOAD PC=15
						; 1170		XCRY AR0=16	;CARRY INTO AD IS XOR'D WITH AR00
						; 1171		GEN CRY18=17
						; 1172	.IFNOT/XADDR
						; 1173		SEC HOLD=20	;INHIBIT LOADING VMAX
						; 1174		CALL=21
						; 1175	.IF/XADDR
						; 1176		STACK UPDATE=20	;CONTROL CRY18 IF LOCAL STACK
						; 1177	.ENDIF/XADDR
						; 1178		ARL IND=22	;# SPECIFIES ARL MIX, ENABLES, & CALL
						; 1179		MTR CTL=23	;# CONTROLS METERS
						; 1180		FLAG CTL=24	;FUNCTION ENCODED IN # FIELD
						; 1181		SAVE FLAGS=25	;TELLS PI CYCLE TO HOLD INTRPT
						; 1182		SP MEM CYCLE=26	;MEM REQUEST IS MODIFIED BY #
						; 1183		AD LONG=27	;AD BECOMES 72 BIT ALU
						; 1184	
						; 1185	U73/=0,2,73,D	;BITS 72-73 UNUSED
						; 1186	
						; 1187	MARK/=0,1,74,D	;FIELD SERVICE "MARK" BIT
						; 1188	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 25
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- MAGIC NUMBER FIELD

						; 1189	.TOC	"CONTROL RAM DEFINITIONS -- MAGIC NUMBER FIELD"
						; 1190	
						; 1191	#/=0,9,83,D	;THE INFAMOUS "MAGIC NUMBERS"
						; 1192		VERS=126		;MICRO-CODE VERSION NUMBER
						; 1193	
						; 1194	.IF/ITSPAGE
						; 1195		PPRO=40		;PAGE PROTECTION, READ ONLY
						; 1196		PPRWF=40	;PAGE PROTECTION, READ/WRITE/FIRST
						; 1197		PPRW=50		;PAGE PROTECTION, READ/WRITE
						; 1198	.ENDIF/ITSPAGE
						; 1199	
						; 1200	
						; 1201	
						; 1202	.IF/LISP
						; 1203		SEGLOG=11	;LOG BASE 2 OF WORDS PER STORAGE SEGMENT
						; 1204		SEGLOG-5=4
						; 1205		44-SEGLOG=33
						; 1206	
						; 1207		GCBMRK=400	;BITS IN AR0-8 FIELD
						; 1208		GCBFOO=340	; OF A GCST WORD
						; 1209		GCBCDR=20
						; 1210		GCBCAR=10
						; 1211	.ENDIF/LISP
						; 1212		
						; 1213	FM#/=0,7,83		;LOW 7 BITS OF # USED TO ADDRESS FM
						; 1214	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 26
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- MAGIC NUMBER FIELD

						; 1215	
						; 1216	;TABLE OF OPTIONS BITS
						; 1217	;	400	KL-MODE PAGING
						; 1218	;	200	EXTENDED ADDRESSING
						; 1219	;	100
						; 1220	;	040	LISP INSTRUCTIONS
						; 1221	;	020	ITS-MODE PAGING
						; 1222	;	010	MUSIC MICROCODE
						; 1223	;	004	JPC FEATURE
						; 1224	;	002	IF JPC FEATURE, RING OF 16 JPC'S
						; 1225	;	001	TRACKS FEATURE OR INSTRUCTION STATISTICS
						; 1226	
						; 1227	Q400/=0,1,75
						; 1228	.IFNOT/KLPAGE
						; 1229		Q=0
						; 1230	.IF/KLPAGE
						; 1231		Q=1
						; 1232	.ENDIF/KLPAGE
						; 1233	Q200/=0,1,76
						; 1234	.IFNOT/XADDR
						; 1235		Q=0
						; 1236	.IF/XADDR
						; 1237		Q=1
						; 1238	.ENDIF/XADDR
						; 1239	Q100/=0,1,77
						; 1240		Q=0
						; 1241	Q40/=0,1,78
						; 1242	.IFNOT/LISP
						; 1243		Q=0
						; 1244	.IF/LISP
						; 1245		Q=1
						; 1246	.ENDIF/LISP
						; 1247	Q20/=0,1,79
						; 1248	.IFNOT/ITSPAGE
						; 1249		Q=0
						; 1250	.IF/ITSPAGE
						; 1251		Q=1
						; 1252	.ENDIF/ITSPAGE
						; 1253	Q10/=0,1,80
						; 1254	.IFNOT/MUSIC
						; 1255		Q=0
						; 1256	.IF/MUSIC
						; 1257		Q=1
						; 1258	.ENDIF/MUSIC
						; 1259	Q4/=0,1,81
						; 1260	.IFNOT/JPC
						; 1261		Q=0
						; 1262	.IF/JPC
						; 1263		Q=1
						; 1264	.ENDIF/JPC
						; 1265	Q2/=0,1,82
						; 1266	.IFNOT/JPC.RING
						; 1267		Q=0
						; 1268	.IF/JPC.RING
						; 1269		Q=1
						; 1270	.ENDIF/JPC.RING
						; 1271	Q1/=0,1,83
						; 1272	.IFNOT/INSTR.STAT
						; 1273		Q=0
						; 1274	.IF/INSTR.STAT
						; 1275		Q=1
						; 1276	.ENDIF/INSTR.STAT
						; 1277	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 27
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- MAGIC NUMBER FIELD

						; 1278	;VARIOUS SPECIAL FUNCTIONS ENABLE SPECIAL DECODING OF THE
						; 1279	; "MAGIC #" FIELD, AS FOLLOWS:
						; 1280	
						; 1281	;SPECIAL DATA PATH CONTROLS
						; 1282	
						; 1283	CALL/=0,1,75		;ENABLED BY ARL IND (CTL2)
						; 1284		CALL=1
						; 1285	AR0-8/=0,1,76		;ENABLED BY ARL IND (CTL2)
						; 1286		LOAD=1
						; 1287	CLR/=0,4,80		;ENABLED BY ARL IND (CTL2)
						; 1288		MQ=10
						; 1289		ARX=4
						; 1290		ARL=2
						; 1291		ARR=1
						; 1292		AR=3
						; 1293		AR+ARX=7
						; 1294		AR+MQ=13
						; 1295		ARX+MQ=14
						; 1296		AR+ARX+MQ=17
						; 1297		ARL+ARX=6
						; 1298		ARL+ARX+MQ=16
						; 1299		ARR+MQ=11
						; 1300	ARL/=0,3,83		;ENABLED BY ARL IND (CTL2)
						; 1301		ARL=0
						; 1302		ARMM=0		;REQUIRES SPECIAL FUNCTION
						; 1303		CACHE=1		;ORDINARILY SELECTED BY HWARE
						; 1304		AD=2
						; 1305		EBUS=3
						; 1306		SH=4
						; 1307		AD*2=5
						; 1308		ADX=6
						; 1309		AD*.25=7
						; 1310	AR CTL/=0,3,77		;ENABLED BY COND/REG CTL (CTL2)
						; 1311		AR0-8 LOAD=4
						; 1312		AR9-17 LOAD=2
						; 1313		ARR LOAD=1
						; 1314		ARL LOAD=6
						; 1315	EXP TST/=0,1,80		;ENABLED BY COND/REG CTL (CTL1)
						; 1316		AR_EXP=1
						; 1317	MQ CTL/=0,2,83		;ENABLED BY COND/REG CTL (CTL2)
						; 1318	;	MQ=0		;WITH MQ/MQ SEL
						; 1319		MQ*2=1		; "
						; 1320	;	MQ*.5=2		; " (DROPS BITS 0,6,12,18,24,30)
						; 1321		0S=3		; "
						; 1322		SH=0		;WITH MQ/MQM SEL
						; 1323		MQ*.25=1	; "
						; 1324		1S=2		; "
						; 1325		AD=3		; "
						; 1326	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 28
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- MAGIC NUMBER FIELD

						; 1327	;SPECIAL CONTROL OF EBOX FLAGS & FUNCTIONS
						; 1328	
						; 1329	PC FLAGS/=0,9,83	;ENABLED BY COND/PCF_# (SCD4)
						; 1330		AROV=420	;SET ARITH OVFLO & TRAP1
						; 1331		FLOV=620	;SAME, PLUS FLOATING OVFLO
						; 1332		FPD=100		;SET FIRST PART DONE
						; 1333		TRAP2=40	;SET TRAP2 (PDL OVFLO)
						; 1334		TRAP1=20	;SET TRAP1 (ARITH OVFLO)
						; 1335		TRAP3=60	;SET TRAP1 & TRAP2 (ONE PROCEED)
						; 1336		FXU=630		;FLOV + EXP UNDERFLOW
						; 1337		DIV CHK=424	;NO DIVIDE + AROV
						; 1338		FDV CHK=624	;FLOATING NO DIVIDE
						; 1339	FLAG CTL/=0,9,83	;ENABLED BY SPEC/FLAG CTL (SCD5)
						; 1340		RSTR FLAGS=420	;AS IN JRSTF
						; 1341		JFCL=602	;FORCE PC 00 = AROV
						; 1342		JFCL+LD=622	;SECOND PART OF JFCL -- CLEAR TESTED FLAGS
						; 1343		DISMISS=502	;CLEAR PI CYCLE IF SET (CON5)
						; 1344				; ELSE DISMISS HIGHEST PI HOLD
						; 1345		HALT=442	;STOP PROCESSOR IF LEGAL (CON2)
						; 1346		SET FLAGS=20	;AS IN MUUO
						; 1347		PORTAL=412	;CLEAR PUBLIC IF PRIVATE INSTR
						; 1348	SPEC INSTR/=0,9,83	;ENABLED BY COND/SPEC INSTR
						; 1349		SET PI CYCLE=714; (CON5)
						; 1350		KERNEL CYCLE=200;MAKE IO LEGAL, EXEC ADDR SPACE (CON4)
						; 1351		INH PC+1=100	;TO MAKE JSR WORK IN TRAP, INTRPT (CON4)
						; 1352		SXCT=40		;START SECTION XCT (MCL4)
						; 1353		PXCT=20		;START PREV CONTXT XCT (MCL4)
						; 1354		INTRPT INH=10	;INHIBIT INTERRUPTS (CON4)
						; 1355		INSTR ABORT=4	; (CON2)
						; 1356		HALTED=302	;TELL CONSOLE WE'RE HALTED (CON4)
						; 1357		CONS XCT=310	;FLAGS FOR INSTR XCT'D FROM CONSOLE
						; 1358	;	CONT=10		;INHIBIT INTERRUPTS WHILE SINGLE STEPPING
						; 1359		CONT=0		;DON'T, CAUSES HANG AT WGRANT.  WILL THIS WIN?
						; 1360	FETCH/=0,9,83		;ENABLED BY MEM/FETCH
						; 1361		UNCOND=400
						; 1362				;LOW 2 BITS DECODED ON (IR3)
						; 1363		COMP=201,2	;DEPENDING ON AD AND DRAM B
						; 1364		SKIP=202,2
						; 1365		TEST=203,1
						; 1366		JUMP=502,2	;AS IN JUMPX, ON AD AND DRAM B
						; 1367		JFCL=503,1	;JUMP ON TEST CONDITION
						; 1368	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 29
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- MAGIC NUMBER FIELD

						; 1369	;SPECIAL CONTROLS & FUNCTIONS FOR MBOX
						; 1370	
						; 1371	SP MEM/=0,9,83		;ENABLED BY SPEC/SP MEM CYCLE
						; 1372		FETCH=400	;LOAD IR WHEN DATA ARRIVES (MCL5)
						; 1373		USER=200	;FORCE USER OR UPT (MCL2)
						; 1374		EXEC=100	;FORCE EXEC OR EPT (MCL3)
						; 1375		SEC 0=40	;CLEAR VMAX (MCL4)
						; 1376		UPT EN=20	;UPT IF USER EN (MCL3)
						; 1377		EPT EN=10	;EPT IF NOT USER EN (MCL3)
						; 1378		CACHE INH=2	; (MCL6)
						; 1379		UNPAGED=101	; (MCL6)
						; 1380		EPT=111
						; 1381		EPT FETCH=511
						; 1382		UPT=221
						; 1383		UPT FETCH=621
						; 1384		PT=31
						; 1385		PT FETCH=431
						; 1386	MREG FNC/=0,9,83	;ENABLED BY MEM/REG FUNC (APR6)
						; 1387		SBUS DIAG=407	;PERFORM SBUS DIAGNOSTIC CYCLE
						; 1388		READ UBR=502	;ASK MBOX TO LOAD UBR INTO EBUS REG
						; 1389		READ EBR=503	;PUT EBR INTO EBUS REG
						; 1390		READ ERA=504
						; 1391		WR REFILL RAM=505	;DISGUISED AS A "READ REG" FUNCTION
						; 1392		LOAD CCA=601	;START A SWEEP
						; 1393		LOAD UBR=602	;SETUP UBR FROM VMA
						; 1394		LOAD EBR=603	;SETUP EBR FROM VMA
						; 1395		MAP=140		;GET PHYS ADDR CORRESPONDING TO VMA (MCL6)
						; 1396	MBOX CTL/=0,9,83	;ENABLED BY COND/MBOX CTL (APR5)
						; 1397		SET PAGE FAIL=200
						; 1398		SET IO PF ERR=100
						; 1399		PT DIR WR=20,1	;WRITE PAGE TABLE DIRECTORY
						; 1400		PT WR=10,1	;WRITE PAGE TABLE ENTRY SELECTED BY VMA
						; 1401		NORMAL=0	;RESET PT WR SELECTION
						; 1402		PT DIR CLR=1	;SELECT FOR CLEARING PT DIR (PAG3)
						; 1403		CLR PT LINE=21	;CLEAR VALID FOR 8 ENTRIES
						; 1404	MTR CTL/=0,3,83			;FUNCTION DECODING FOR METERS (MTR3)
						; 1405		CLR TIME=0		; USUALLY USED WITH DIAG FUNC
						; 1406		CLR PERF=1
						; 1407		CLR E CNT=2
						; 1408		CLR M CNT=3
						; 1409		LD PA LH=4
						; 1410		LD PA RH=5
						; 1411		CONO MTR=6
						; 1412		CONO TIM=7
						; 1413	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 30
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	CONTROL RAM DEFINITIONS -- MAGIC NUMBER FIELD

						; 1414	;I/O FUNCTIONS
						; 1415	
						; 1416	EBUS CTL/=0,9,83	;ENABLED BY COND/EBUS CTL (APR3)
						; 1417		GRAB EEBUS=400	;"EBUS RETURN" TAKES ECL EBUS FOR EBOX
						; 1418		REQ EBUS=200
						; 1419		REL EBUS=100	; (CON3)
						; 1420		EBUS DEMAND=60	;ASSERT DEMAND, KEEP CS, FUNC
						; 1421		EBUS NODEMAND=20;DROP DEMAND, KEEP CS, FUNC
						; 1422	;	CTL_IR=10	;SELECT F01 & F02 FROM IR
						; 1423	;	DISABLE CS=4	;TURN OFF CONTROLLER SELECT
						; 1424	;	DATAIO=2	;0 FOR CONI/O
						; 1425	;	INPUT=1		;0 FOR OUTPUT
						; 1426		IO INIT=30	;ENABLE IR3-9 TO EBUS CONTROLLER SELECT,
						; 1427				; IR10-12 (DECODED) TO FUNCTION
						; 1428				; AND AR ONTO EBUS IF FUNCTION IS OUTPUT
						; 1429		DATAO=26	;0'S TO CS, DATAO TO FCN, AND AR TO EBUS
						; 1430		DATAI=27	;0'S TO CS, DATAI TO FCN
						; 1431		REL EEBUS=0	;LEGGO
						; 1432	DIAG FUNC/=0,9,83	;ENABLED BY COND/DIAG FUNC (CTL3)
						; 1433		.5 USEC=400,3		;STRETCH CLOCK TO LET EBUS SETTLE (CON?)
						; 1434		LD PA LEFT=404,3	;LH PERF ANAL CONTROLS FROM RH (MTR)
						; 1435		LD PA RIGHT=405,3	;RH PA CONTROLS FROM RH (MTR)
						; 1436		CONO MTR=406,3		;ACCOUNTING CONTROLS (MTR)
						; 1437		CONO TIM=407,3		;INTERVAL TIMER CONTROLS (MTR)
						; 1438		CONO APR=414,3		; (CON3)
						; 1439		CONO PI=415,3		; (CON3)
						; 1440		CONO PAG=416,3		;CACHE & PAGING CTL (CON3)
						; 1441		DATAO APR=417,3		;ADDRESS BREAK (CON3)
						; 1442		DATAO PAG=620,3		;AC BLOCKS & PREV CONTXT (CON3)
						; 1443		LD AC BLKS=425,3	;FORCE LOADING AC BLOCKS
						; 1444		LD PCS+CWSX=426,3	;FORCE LOADING PREV CONTXT SEC, CWSX
						; 1445		CONI PI(R)=500,3	;PI HOLD & ACTIVE TO LH (PI)
						; 1446		CONI PI(L)=501,3	;PI GEN TO LH (PI)
						; 1447		CONI APR(R)=510,3	;APR INTERRUPT & PIA TO LH (APR6)
						; 1448		RD TIME=510,3		;TIME BASE TO RH (MTR5)
						; 1449		DATAI PAG(L)=511,3	;AC BLOCKS, PREV CONTXT TO LH (APR6)
						; 1450		RD PERF CNT=511,3	;PERFORMANCE COUNT TO RH (MTR5)
						; 1451		CONI APR(L)=512,3	;APR INTERRUPT ENABLES TO LH (APR6)
						; 1452		RD EBOX CNT=512,3	;EBOX COUNT TO RH (MTR5)
						; 1453		DATAI APR=513,3		;ADDR BREAK CONDITIONS TO LH (APR6)
						; 1454		RD CACHE CNT=513,3	;CACHE COUNT TO RH (MTR5)
						; 1455		RD INTRVL=514,3		;INTERVAL TIMER TO RH (MTR5)
						; 1456		RD PERIOD=515,3		;PERIOD REGISTER TO RH (MTR5)
						; 1457		CONI MTR=516,3		;CONTROLS & PIA TO RH (MTR5)
						; 1458		RD MTR REQ=517,3	;ENCODED UPDATE REQUEST TO 20-22 (MTR5)
						; 1459		CONI PI(PAR)=530,3	;WRITE EVEN PARITY ENABLES TO RH (CON1)
						; 1460		CONI PAG=531,3		;CACHE & TRAP CTL TO RH (CON1)
						; 1461		RD EBUS REG=567,3	;EBUS REGISTER IN MBOX (MBZ1 & MBC1)
						; 1462	
						; 1463	PARITY/=0,0,0,P		;USE ANY AVAILABLE FIELD FOR PARITY
						; 1464	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 31
; DSK: UCODE; DEFINE 32	17:13:16 20-AUG-2018	DISPATCH RAM DEFINITIONS

						; 1465	.TOC	"DISPATCH RAM DEFINITIONS"
						; 1466	;FIELDS ARE ARRANGED FOR EASY READING, NOT COMPACTNESS
						; 1467	
						; 1468		.DCODE
						; 1469	A/=0,3,2		;OPERAND FETCH MODE
						; 1470		IMMED=0		;IMMEDIATE
						; 1471		IMMED-PF=1	;IMMEDIATE, START PREFETCH
						; 1472		WR-TST=3	;TEST WRITABILITY
						; 1473		READ=4		;READ ONLY
						; 1474		READ-PF=5	;READ, THEN PREFETCH
						; 1475		RD-WR=6		;READ WRITE (SEPARATE CYCLES)
						; 1476		RD-P-WR=7	;READ PAUSE WRITE
						; 1477	
						; 1478	B/=0,3,5		;STORE RESULTS AT--
						; 1479		DBL AC=1	;DOUBLE RESULT TO AC & AC+1
						; 1480		DBL BOTH=2	;MULB, DIVB, ETC
						; 1481		SELF=3		;SELF MODE INSTRUCTIONS
						; 1482		AC=5		;SINGLE RESULT TO AC, PREFETCH IN PROG
						; 1483		MEM=6		;RESULT TO MEMORY
						; 1484		BOTH=7		;SINGLE RESULT TO MEMORY AND AC
						; 1485	
						; 1486		SJC-=3		;SKIP JUMP COMPARE CONTROLS
						; 1487		SJCL=2
						; 1488		SJCE=1
						; 1489		SJCLE=0
						; 1490		SJCA=7
						; 1491		SJCGE=6
						; 1492		SJCN=5
						; 1493		SJCG=4
						; 1494	B0/=0,1,3		;INVERTS VARIOUS TEST, SKIP, AND JUMP CONTROLS
						; 1495		CRY0(0)=0	;TEST TST CAUSES PC SKIP IF CRY0=0
						; 1496		CRY0(1)=1	; SAME IF CRY0=1
						; 1497	B1-2/=0,2,5		;FLOATING RESULT STORE MODE
						; 1498		AC=1	;RESULT TO AC
						; 1499		MEM=2	;RESULT JUST TO MEM
						; 1500		BOTH=3	;RESULT TO BOTH
						; 1501	
						; 1502	PARITY/=0,1,11,P
						; 1503	
						; 1504	J/=0,10,23		;EXECUTOR (40&20-BITS ALWAYS 0)
						; 1505		.UCODE
						; 1506	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 32
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- AC TRANSFERS

						; 1507	.TOC	"MACROS -- AC TRANSFERS"
						; 1508	
						; 1509	GEN AC0		"FMADR/AC0,ADB/FM,AD/B"
						; 1510	AR_AC0		"FMADR/AC0,ADB/FM,AD/B,AR/AD"
						; 1511	AR_AC1		"FMADR/AC1,ADB/FM,AD/B,AR/AD"
						; 1512	AR_AC2		"FMADR/AC2,ADB/FM,AD/B,AR/AD"
						; 1513	AR_AC3		"FMADR/AC3,ADB/FM,AD/B,AR/AD"
						; 1514	AR_AC4		"FMADR/AC4,ADB/FM,AD/B,AR/AD"
						; 1515	
						; 1516	AC0_AR		"FMADR/AC0,COND/FM WRITE"
						; 1517	AC1_AR		"FMADR/AC1,COND/FM WRITE"
						; 1518	AC2_AR		"FMADR/AC2,COND/FM WRITE"
						; 1519	AC3_AR		"FMADR/AC3,COND/FM WRITE"
						; 1520	AC4_AR		"FMADR/AC4,COND/FM WRITE"
						; 1521	
						; 1522	ARX_AC0		"FMADR/AC0,ADB/FM,AD/B,ARX/AD"
						; 1523	ARX_AC1		"FMADR/AC1,ADB/FM,AD/B,ARX/AD"
						; 1524	ARX_AC2		"FMADR/AC2,ADB/FM,AD/B,ARX/AD"
						; 1525	ARX_AC3		"FMADR/AC3,ADB/FM,AD/B,ARX/AD"
						; 1526	ARX_AC4		"FMADR/AC4,ADB/FM,AD/B,ARX/AD"
						; 1527	
						; 1528	AR_-AC0		"FMADR/AC0,ADB/FM,ADA EN/0S,AD/A-B,AR/AD"
						; 1529	AR_AC0 COMP	"FMADR/AC0,ADB/FM,AD/SETCB,AR/AD"
						; 1530	AR_AC1 COMP	"FMADR/AC1,ADB/FM,AD/SETCB,AR/AD"
						; 1531	AR_AC1*2	"FMADR/AC1,ADB/FM,AD/B,AR/AD*2"
						; 1532	AR_AC3*2	"FMADR/AC3,ADB/FM,AD/B,AR/AD*2"
						; 1533	
						; 1534	GEN AR*AC0	"FMADR/AC0,ADB/FM,ADA/AR"
						; 1535	AR_AR*AC0	"FMADR/AC0,ADB/FM,ADA/AR,AR/AD"	;GENERAL BINARY OPERATION
						; 1536	AR_AR*AC1	"FMADR/AC1,ADB/FM,ADA/AR,AR/AD"
						; 1537	
						; 1538	AR_AC0+1	"ADA EN/0S,ADB/FM,FMADR/AC0,AD/A+B+1,AR/AD"
						; 1539	AR_AC1+1	"ADA EN/0S,ADB/FM,FMADR/AC1,AD/A+B+1,AR/AD"
						; 1540	ARX_AC0+1	"ADA EN/0S,ADB/FM,FMADR/AC0,AD/A+B+1,ARX/AD"
						; 1541	ARX_AC1+1	"ADA EN/0S,ADB/FM,FMADR/AC1,AD/A+B+1,ARX/AD"
						; 1542	ARX_-AC0	"ADA EN/0S,ADB/FM,FMADR/AC0,AD/A-B,ARX/AD"
						; 1543	ARX_AC0 COMP	"ADB/FM,FMADR/AC0,AD/SETCB,ARX/AD"
						; 1544	
						; 1545	AR_XR		"FMADR/XR,ADB/FM,AD/B,AR/AD"
						; 1546	AR_FM(VMA)	"FMADR/VMA,ADB/FM,AD/B,AR/AD"
						; 1547	ARX_FM(VMA)	"FMADR/VMA,ADB/FM,AD/B,ARX/AD"
						; 1548	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 33
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- DATA PATH TRANSFERS AND SHIFTS

						; 1549	.TOC	"MACROS -- DATA PATH TRANSFERS AND SHIFTS"
						; 1550	
						; 1551	MQ_AR		"SH/AR,MQ/SH"
						; 1552	MQ_ARX		"SH/ARX,MQ/SH"
						; 1553	AR_MQ		"ADA/MQ,AD/A,AR/AD"
						; 1554	
						; 1555	MQ_SHIFT	"SH/SHIFT AR!ARX,MQ/SH"
						; 1556	AR_SHIFT	"SH/SHIFT AR!ARX,AR/SH"
						; 1557	ARX_SHIFT	"SH/SHIFT AR!ARX,ARX/SH"
						; 1558	MQ_AD		"COND/REG CTL,MQ CTL/AD,MQ/MQM SEL"
						; 1559	MQ_AR (AD)	"ADA/AR,AD/A,MQ_AD"
						; 1560	(MQ)*.25	"COND/REG CTL,MQ/MQM SEL,MQ CTL/MQ*.25"
						; 1561	(MQ)*2		"COND/REG CTL,MQ/MQ SEL,MQ CTL/MQ*2"
						; 1562	
						; 1563	AR_ARX		"SH/ARX,AR/SH"
						; 1564	AR_ARX (ADX)	"ADA EN/EN,AD/A,AR/ADX"
						; 1565	AR_ARX (AD)	"ADA/ARX,AD/A,AR/AD"
						; 1566	ARX_AR		"SH/AR,ARX/SH"
						; 1567	ARX_AR (AD)	"ADA/AR,AD/A,ARX/AD"
						; 1568	BR_AR LONG	"BR/AR,BRX/ARX"
						; 1569	
						; 1570	AR_AR*2		"ADA/AR,AD/A,AR/AD*2"
						; 1571	AR_AR*4		"ADB/AR*4,AD/B,AR/AD"
						; 1572	AR_AR*8		"ADB/AR*4,AD/B,AR/AD*2"
						; 1573	ARX_ARX*2	"ADA EN/EN,AD/A,ARX/ADX*2"
						; 1574	ARX_ARX*4	"ADB/AR*4,AD/B,ARX/ADX"
						; 1575	ARX_ARX*8	"ADB/AR*4,AD/B,ARX/ADX*2"
						; 1576	AR_AR*2 LONG	"ADA/AR,AD/A,AR/AD*2,ARX/ADX*2"
						; 1577	AR_AR*4 LONG	"ADB/AR*4,AD/B,AR/AD,ARX/ADX"
						; 1578	AR_AR*8 LONG	"ADB/AR*4,AD/B,AR/AD*2,ARX/ADX*2"
						; 1579	AR_ARX*2	"ADA/ARX,AD/A,AR/AD*2"
						; 1580	AR_ARX*4	"ADB/AR*4,AD/B,AR/ADX"
						; 1581	MQ_MQ*2		"SPEC/MQ SHIFT,MQ/MQ*2"
						; 1582	AR_AR*.25	"ADA/AR,AD/A,AR/AD*.25"
						; 1583	AR_ARX*.25	"ADA/ARX,AD/A,AR/AD*.25"
						; 1584	AR_MQ*.25	"ADA/MQ,AD/A,AR/AD*.25"
						; 1585	AR_MQ*4		"ADA/MQ,AD/A*2,AR/AD*2"
						; 1586	ARX_ARX*.25	"ADA EN/EN,AD/A,ARX/ADX*.25"
						; 1587	MQ_MQ*.25	"SPEC/MQ SHIFT,MQ/MQ*.25"
						; 1588	(AR+ARX+MQ)*2	"ADA/AR,AD/A,AR/AD*2,ARX/ADX*2,(MQ)*2"
						; 1589	(AR+ARX+MQ)*.25	"ADA/AR,AD/A,AR/AD*.25,ARX/ADX*.25,(MQ)*.25"
						; 1590	AR_AR*.5	"ADA/AR,AD/A*2,AR/AD*.25"
						; 1591	ARX_ARX*.5	"ADA/EN,AD/A*2,ARX/ADX*.25"
						; 1592	AR_AR*.5 LONG	"ADA/AR,AD/A*2,SPEC/AD LONG,AR/AD*.25,ARX/ADX*.25"
						; 1593	
						; 1594	AR_ARX COMP	"ADA EN/EN,AD/SETCA,AR/ADX"
						; 1595	AR_BR COMP	"ADB/BR,AD/SETCB,AR/AD"
						; 1596	ARX_BRX COMP	"ADB/BR,AD/SETCB,ARX/ADX"
						; 1597	AR_BR COMP LONG	"ADB/BR,AD/SETCB,AR/AD,ARX/ADX"
						; 1598	AR_MQ COMP	"ADA/MQ,AD/SETCA,AR/AD"
						; 1599	ARX_AR*4 COMP	"ADB/AR*4,AD/SETCB,ARX/AD"
						; 1600	ARX_ARX*2 COMP	"ADA EN/EN,AD/SETCA,ARX/ADX*2"
						; 1601	MQ_BR COMP	"ADB/BR,AD/SETCB,MQ_AD"
						; 1602	MQ_ARX COMP	"ADA/ARX,AD/SETCA,MQ_AD"
						; 1603	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 34
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- DATA PATH TRANSFERS AND SHIFTS

						; 1604	AR_-AR		"ADA EN/0S,ADB/AR*4,AD/A-B,AR/AD*.25"
						; 1605	AR_BR		"ADB/BR,AD/B,AR/AD"
						; 1606	AR_BRX		"ADB/BR,AD/B,AR/ADX"
						; 1607	ARX_BRX		"ADB/BR,AD/B,ARX/ADX"
						; 1608	AR_BR LONG	"ADB/BR,AD/B,AR/AD,ARX/ADX"
						; 1609	ARX_BR		"ADB/BR,AD/B,ARX/AD"
						; 1610	AR_-BR		"ADB/BR,ADA EN/0S,AD/A-B,AR/AD"
						; 1611	AR_-BRX		"ADB/BR,ADA EN/0S,AD/A-B,AR/ADX"
						; 1612	ARX_-BRX	"ADB/BR,ADA EN/0S,AD/A-B,ARX/ADX"
						; 1613	AR_BR*2		"ADB/BR*2,AD/B,AR/AD"
						; 1614	ARX_BRX*2	"ADB/BR*2,AD/B,ARX/ADX"
						; 1615	ARX_BRX*2+1	"ADA EN/0S,ADB/BR*2,AD/A+B+1,ARX/ADX"
						; 1616	AR_BR+1		"ADB/BR,ADA EN/0S,AD/A+B+1,AR/AD"
						; 1617	ARX_BR*2	"ADB/BR*2,AD/B,ARX/AD"
						; 1618	AR_BR*4 LONG	"ADB/BR*2,AD/B,AR/AD*2,ARX/ADX*2"
						; 1619	AR_BR*.5	"ADB/BR*2,AD/B,AR/AD*.25"
						; 1620	AR_BR*.5 LONG	"ADB/BR*2,AD/B,AR/AD*.25,ARX/ADX*.25"
						; 1621	AR_MQ*2		"ADA/MQ,AD/A,AR/AD*2"
						; 1622	
						; 1623	GEN AR		"ADA/AR,AD/A"
						; 1624	GEN ARX		"ADA/ARX,AD/A"
						; 1625	GEN ARX COMP	"ADA/ARX,AD/SETCA"
						; 1626	GEN MQ		"ADA/MQ,AD/A"
						; 1627	GEN BR*2	"ADB/BR*2,AD/B"
						; 1628	FORCE AR-ARX	"ADB/AR*4,AD/B,AR/AD*.25,ARX/ADX*.25"
						; 1629	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 35
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- ARITHMETIC

						; 1630	.TOC	"MACROS -- ARITHMETIC"
						; 1631	
						; 1632	GEN AR+1	"ADA/AR,AD/A+1"
						; 1633	GEN AR-1	"ADA/AR,AD/A-1"
						; 1634	AR_AR+1		"ADA/AR,AD/A+1,AR/AD"
						; 1635	AR_AR-1		"ADA/AR,AD/A-1,AR/AD"
						; 1636	AR_AR+BR	"ADA/AR,ADB/BR,AD/A+B,AR/AD"
						; 1637	ARX_AR+BR	"ADA/AR,ADB/BR,AD/A+B,ARX/AD"
						; 1638	GEN AR*BR	"ADA/AR,ADB/BR"
						; 1639	GEN AR+BR	"ADA/AR,ADB/BR,AD/A+B"
						; 1640	GEN AR-BR	"ADA/AR,ADB/BR,AD/A-B"
						; 1641	GEN AR-BR-1	"GEN AR*BR,AD/A-B-1"
						; 1642	AR_AR-BR	"ADA/AR,ADB/BR,AD/A-B,AR/AD"
						; 1643	ARX_-AR-1	"ADA/AR,AD/SETCA,ARX/AD"
						; 1644	AR_AR-BR-1	"GEN AR*BR,AD/A-B-1,AR/AD"
						; 1645	ARX_AR+1	"ADA/AR,AD/A+1,ARX/AD"
						; 1646	ARX_AR-1	"ADA/AR,AD/A-1,ARX/AD"
						; 1647	ARX_ARX+1	"ADA EN/EN,AD/A+1,ARX/ADX"
						; 1648	ARX_ARX-1	"ADA EN/EN,AD/A-1,ARX/ADX"
						; 1649	ARX_ARX-1 (AD)	"ADA/ARX,AD/A-1,ARX/AD"
						; 1650	AR_ARX-1	"ADA EN/EN,AD/A-1,AR/ADX"
						; 1651	ARX_BRX+1	"ADA EN/0S,ADB/BR,AD/A+B+1,ARX/ADX"
						; 1652	AR_ARX+BR	"ADA/ARX,ADB/BR,AD/A+B,AR/AD"
						; 1653	ARX_ARX+BR	"ADA/ARX,ADB/BR,AD/A+B,ARX/AD"
						; 1654	AR_ARX-BR	"ADA/ARX,ADB/BR,AD/A-B,AR/AD"
						; 1655	GEN AR-AC3	"FMADR/AC3,ADB/FM,ADA/AR,AD/A-B"
						; 1656	AR_MQ+1		"ADA/MQ,AD/A+1,AR/AD"
						; 1657	MQ_MQ+1		"ADA/MQ,AD/A+1,MQ_AD"
						; 1658	AR_MQ-1		"ADA/MQ,AD/A-1,AR/AD"
						; 1659	AR_MQ-BR	"ADA/MQ,ADB/BR,AD/A-B,AR/AD"
						; 1660	AR_MQ+AC0	"FMADR/AC0,ADB/FM,ADA/MQ,AD/A+B,AR/AD"
						; 1661	AR_MQ*AC1	"FMADR/AC1,ADB/FM,ADA/MQ,AR/AD"
						; 1662	AR_MQ*AC2	"FMADR/AC2,ADB/FM,ADA/MQ,AR/AD"
						; 1663	AR_MQ*AC3	"FMADR/AC3,ADB/FM,ADA/MQ,AR/AD"
						; 1664	
						; 1665	AR_AR*BR	"ADA/AR,ADB/BR,AR/AD"
						; 1666	AR_ARX*BR	"ADA/ARX,ADB/BR,AR/AD"
						; 1667	ARX_AR*BR	"ADA/AR,ADB/BR,ARX/AD"
						; 1668	AR_2(AR*BR)	"ADA/AR,ADB/BR,AR/AD*2"
						; 1669	AR_2(AR+BR)	"AR_2(AR*BR),AD/A+B"
						; 1670	AR_2(AR-BR)	"AR_2(AR*BR),AD/A-B"
						; 1671	AR_(AR+BR)*.25	"ADA/AR,ADB/BR,AD/A+B,AR/AD*.25"
						; 1672	AR_(AR-BR)*.25	"ADA/AR,ADB/BR,AD/A-B,AR/AD*.25"
						; 1673	AR_(AR+2BR)*.25	"ADA/AR,ADB/BR*2,AD/A+B,AR/AD*.25"
						; 1674	AR_(AR-2BR)*.25	"ADA/AR,ADB/BR*2,AD/A-B,AR/AD*.25"
						; 1675	GEN AR+2BR	"ADA/AR,ADB/BR*2,AD/A+B"
						; 1676	GEN AR-2BR	"ADA/AR,ADB/BR*2,AD/A-B"
						; 1677	ARX_ARX*BRX	"ADA/AR,ADB/BR,ARX/ADX"
						; 1678	ARX_ARX+BRX	"ARX_ARX*BRX,AD/A+B"
						; 1679	AR_ARX*BRX	"ADA/AR,ADB/BR,AR/ADX"
						; 1680	
						; 1681	AR_AR*10	"ADA/AR,ADB/AR*4,AD/A+B,AR/AD*2"
						; 1682	ARX_ARX*5	"ADA/AR,ADB/AR*4,AD/A+B,ARX/ADX"
						; 1683	AR_BR+1000000	"AR/AD,AD/A+B,ADA EN/0S,ADB/BR,GEN CRY18"
						; 1684	AR_2(AR+1)	"ADA/AR,AD/A+1,AR/AD*2"
						; 1685	AR_ARX*.25-AR-1	"ADB/AR*4,ADA/ARX,AD/A-B-1,AR/AD*.25"
						; 1686	AR_(ARX OR AR*4)*.25	"ADA/ARX,ADB/AR*4,AD/OR,AR/AD*.25"
						; 1687	ARX_ARX*-6	"ADA EN/EN,ADB/AR*4,AD/A-B,ARX/ADX*2"
						; 1688	ARX0_MQ35	"ADA/MQ,AD/A*2+1,ARX/ADX*.25"
						; 1689	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 36
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- SCRATCH AC'S (BLOCK 7)

						; 1690	.TOC	"MACROS -- SCRATCH AC'S (BLOCK 7)"
						; 1691	
						; 1692	;PARITY ERROR DIAGNOSIS/RECOVERY INFORMATION
						; 1693	
						; 1694	.IFNOT/KLPAGE
						; 1695	SV.AR_AR	"FMADR/#B#,FM#/160,COND/FM WRITE"	;AR SAVED
						; 1696	SV.ARX_AR	"FMADR/#B#,FM#/161,COND/FM WRITE"	;ARX SAVED
						; 1697	AR_SV.AR	"FMADR/#B#,FM#/160,AR_FM"
						; 1698	.ENDIF/KLPAGE
						; 1699	SV.IOPF_AR	"FMADR/#B#,FM#/162,COND/FM WRITE"	;IO PAGE FAIL WORD
						; 1700	
						; 1701	T0		"FMADR/#B#,FM#/166"
						; 1702	T1		"FMADR/#B#,FM#/171"
						; 1703	T2		"FMADR/#B#,FM#/172"
						; 1704	E0		"FMADR/#B#,FM#/164"
						; 1705	E1		"FMADR/#B#,FM#/165"
						; 1706	SLEN		"FMADR/#B#,FM#/170"	;MUST BE 170
						; 1707	MSK		"FMADR/#B#,FM#/167"
						; 1708	FILL		"FMADR/#B#,FM#/173"
						; 1709	SFLGS		"FMADR/AC0"
						; 1710	SRCP		"FMADR/AC1"
						; 1711	DLEN		"FMADR/AC3"
						; 1712	DSTP		"FMADR/AC4"
						; 1713	
						; 1714	AR_FM		"ADB/FM,AD/B,AR/AD"
						; 1715	AR_FM+1		"ADB/FM,ADA EN/0S,AD/A+B+1,AR/AD"
						; 1716	FM_AR		"COND/FM WRITE"
						; 1717	ARX_FM		"ADB/FM,AD/B,ARX/AD"
						; 1718	
						; 1719	.IF/INSTR.STAT
						; 1720	;ACCESS TO AC'S WHICH CONTROL TRACKS FEATURE
						; 1721	TRB		"FMADR/#B#,FM#/176"
						; 1722	TRX		"FMADR/#B#,FM#/177"
						; 1723	AR_TRB		"TRB,AR_FM"
						; 1724	AR_AR+TRB	"TRB,ADB/FM,ADA/AR,AD/A+B,AR/AD"
						; 1725	ARX_TRB		"TRB,ARX_FM"
						; 1726	VMA_TRB		"TRB,ADB/FM,AD/B,VMA/AD"
						; 1727	VMA_AR+TRB	"TRB,ADB/FM,ADA/AR,AD/A+B,VMA/AD"
						; 1728	TRB_AR		"TRB,FM_AR"
						; 1729	AR_TRX		"TRX,AR_FM"
						; 1730	TRX_AR		"TRX,FM_AR"
						; 1731	AR_TRX+1	"TRX,ADB/FM,ADA EN/0S,AD/A+B+1,AR/AD"
						; 1732	.ENDIF/INSTR.STAT
						; 1733	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 37
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- SCRATCH AC'S (BLOCK 7)

						; 1734	T0_AR		"T0,FM_AR"
						; 1735	T1_AR		"T1,FM_AR"
						; 1736	T2_AR		"T2,FM_AR"
						; 1737	E0_AR		"E0,FM_AR"
						; 1738	E1_AR		"E1,FM_AR"
						; 1739	SLEN_AR		"SLEN,FM_AR"
						; 1740	DLEN_AR		"DLEN,FM_AR"
						; 1741	MSK_AR		"MSK,FM_AR"
						; 1742	FILL_AR		"FILL,FM_AR"
						; 1743	SRCP_AR		"SRCP,FM_AR"
						; 1744	SFLGS_AR	"SFLGS,FM_AR"
						; 1745	DSTP_AR		"DSTP,FM_AR"
						; 1746	
						; 1747	AR_T0		"T0,AR_FM"
						; 1748	AR_AR+T0	"T0,ADB/FM,ADA/AR,AD/A+B,AR/AD"
						; 1749	AR_AR-T0	"T0,ADB/FM,ADA/AR,AD/A-B,AR/AD"
						; 1750	AR_AR*T0	"T0,ADB/FM,ADA/AR,AR/AD"
						; 1751	VMA_T0+1	"T0,ADB/FM,ADA EN/0S,AD/A+B+1,VMA/AD"
						; 1752	GEN AR*T0	"T0,ADB/FM,ADA/AR"
						; 1753	AR_T1		"T1,AR_FM"
						; 1754	AR_T2		"T2,AR_FM"
						; 1755	AR_AR+T1	"T1,ADB/FM,ADA/AR,AD/A+B,AR/AD"
						; 1756	ARX_T2		"T2,ARX_FM"
						; 1757	AR_SLEN		"SLEN,AR_FM"
						; 1758	AR_SLEN+1	"SLEN,ADB/FM,ADA EN/0S,AD/A+B+1,AR/AD"
						; 1759	AR_SLEN COMP	"SLEN,ADB/FM,AD/SETCB,AR/AD"
						; 1760	AR_-SLEN	"SLEN,ADB/FM,ADA EN/0S,AD/A-B,AR/AD"
						; 1761	ARX_-SLEN	"SLEN,ADB/FM,ADA EN/0S,AD/A-B,ARX/AD"
						; 1762	AR_AR*SLEN	"SLEN,ADB/FM,ADA/AR,AR/AD"
						; 1763	AR_DLEN		"DLEN,AR_FM"
						; 1764	AR_DLEN+1	"DLEN,ADB/FM,ADA EN/0S,AD/A+B+1,AR/AD"
						; 1765	AR_DLEN COMP	"DLEN,ADB/FM,AD/SETCB,AR/AD"
						; 1766	AR_-DLEN	"DLEN,ADB/FM,ADA EN/0S,AD/A-B,AR/AD"
						; 1767	AR_E0		"E0,AR_FM"
						; 1768	VMA_E0+1	"E0,ADB/FM,ADA EN/0S,AD/A+B+1,VMA/AD"
						; 1769	VMA_AR+E0	"E0,ADB/FM,ADA/AR,AD/A+B,VMA/AD"
						; 1770	VMA_AR+E0+1	"E0,ADB/FM,ADA/AR,AD/A+B+1,VMA/AD"
						; 1771	AR_E1		"E1,AR_FM"
						; 1772	VMA_AR+E1	"E1,ADB/FM,ADA/AR,AD/A+B,VMA/AD"
						; 1773	AR_AR+E1	"E1,ADB/FM,ADA/AR,AD/A+B,AR/AD"
						; 1774	GEN AR+E1	"E1,ADB/FM,ADA/AR,AD/A+B"
						; 1775	AR_AR*MSK	"MSK,ADB/FM,ADA/AR,AR/AD"
						; 1776	ARX_AR*MSK	"MSK,ADB/FM,ADA/AR,ARX/AD"
						; 1777	AR_FILL		"FILL,AR_FM"
						; 1778	AR_SRCP		"SRCP,AR_FM"
						; 1779	ARX_SRCP	"SRCP,ARX_FM"
						; 1780	AR_SFLGS	"SFLGS,AR_FM"
						; 1781	AR_AR*SFLGS	"SFLGS,ADB/FM,ADA/AR,AR/AD"
						; 1782	AR_DSTP		"DSTP,AR_FM"
						; 1783	ARX_DSTP	"DSTP,ARX_FM"
						; 1784	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 38
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- ITS AC BLOCKS USAGE TABLE

						; 1785	.TOC	"MACROS -- ITS AC BLOCKS USAGE TABLE"
						; 1786	
						; 1787	;ITS USES THE EIGHT ACCUMULATOR BLOCKS AS FOLLOWS:
						; 1788	;
						; 1789	;BLOCK 0	EXEC MODE ACCUMULATORS
						; 1790	;BLOCK 1	USER MODE ACCUMULATORS
						; 1791	;BLOCK 2	MUSIC REGISTERS (.IF/MUSIC)
						; 1792	;		0	MUSAOB	AOBJN POINTER TO MUSIC DATA
						; 1793	;		1	MUSDEV	DATAO INSTR TO MUSIC DEVICE
						; 1794	;		2	MUSMIN	MINIMUM LENGTH MUSIC QUANTUM
						; 1795	;		3	MUSTIM	TIME FOR NEXT INTERVAL
						; 1796	;		4	MUSBT1	BITS FOR NEXT FROBBING
						; 1797	;		5	MUSBT2	BITS FOR TIME AFTER THAT
						; 1798	;		6	CHDTIM	TIME LEFT FOR CURRENT CHORD
						; 1799	;		7	CN7777	MUST CONTAIN 7777 (OCTAL)
						; 1800	;		10	V1BR	BASE REG FOR VOICE TABLE 1
						; 1801	;		11	V2BR	BASE REG FOR VOICE TABLE 2
						; 1802	;		12	V3BR	BASE REG FOR VOICE TABLE 3
						; 1803	;		13	V4BR	BASE REG FOR VOICE TABLE 4
						; 1804	;		14	V5BR	BASE REG FOR VOICE TABLE 5
						; 1805	;		15	V6BR	BASE REG FOR VOICE TABLE 6
						; 1806	;		16	UNUSED
						; 1807	;		17	UNUSED
						; 1808	;BLOCK 3	MUSIC REGISTERS (.IF/MUSIC)
						; 1809	;		0	V1CTR	COUNTER FOR FROBBING VOICE 1
						; 1810	;		1	V2CTR	COUNTER FOR FROBBING VOICE 2
						; 1811	;		2	V3CTR	COUNTER FOR FROBBING VOICE 3
						; 1812	;		3	V4CTR	COUNTER FOR FROBBING VOICE 4
						; 1813	;		4	V5CTR	COUNTER FOR FROBBING VOICE 5
						; 1814	;		5	V6CTR	COUNTER FOR FROBBING VOICE 6
						; 1815	;		6	UNUSED
						; 1816	;		7	UNUSED
						; 1817	;		10	V1TIM	TIME BETWEEN VOICE 1 FROBBINGS
						; 1818	;		11	V2TIM	TIME BETWEEN VOICE 2 FROBBINGS
						; 1819	;		12	V3TIM	TIME BETWEEN VOICE 3 FROBBINGS
						; 1820	;		13	V4TIM	TIME BETWEEN VOICE 4 FROBBINGS
						; 1821	;		14	V5TIM	TIME BETWEEN VOICE 5 FROBBINGS
						; 1822	;		15	V6TIM	TIME BETWEEN VOICE 6 FROBBINGS
						; 1823	;		16	UNUSED
						; 1824	;		17	UNUSED
						; 1825	;BLOCK 4	EXEC MODE JPC RING (.IF/JPC.RING)
						; 1826	;BLOCK 5	USER MODE JPC RING (.IF/JPC.RING)
						; 1827	;BLOCK 6	VARIOUS PAGING BOX AND OTHER REGISTERS
						; 1828	;		0	UPFW	PFW AS OF THE LAST REAL PAGE FAILURE
						; 1829	;		1	DBR1	DBR FOR USER LOW HALF
						; 1830	;		2	DBR2	DBR FOR USER HIGH HALF
						; 1831	;		3	DBR3	DBR FOR EXEC HIGH HALF
						; 1832	;		4	DBR4	DBR FOR EXEC LOW HALF
						; 1833	;		5	LH.AGE	AGE BITS IN LEFT HALFWORD
						; 1834	;		6	RH.AGE	AGE BITS IN RIGHT HALFWORD
						; 1835	;		7	CN1000	MUST CONTAIN 1000 FOR PAGING BOX CODE
						; 1836	;		10	CN100	MUST CONTAIN 100 FOR PAGING BOX CODE
						; 1837	;		11	UNUSED
						; 1838	;		12	SV.VMA	SAVED VMA DURING PAGE FAIL
						; 1839	;		13	SV.BR	SAVED BR DURING PAGE FAIL
						; 1840	;		14	XJPC	EXEC JPC (EXEC JPC RING POINTER IF RING)
						; 1841	;		15	JPC	USER JPC (JPC RING POINTER IF JPC RING)
						; 1842	;		16	SV.AR	SAVED AR DURING PAGE FAIL
						; 1843	;		17	SV.ARX	SAVES ARX DURING PAGE FAIL
						; 1844	;BLOCK 7	VARIOUS RANDOM REGISTERS
						; 1845	;		0	SV.PAR	SAVED WORD WITH BAD PARITY DURING PARITY ERROR
						; 1846	;		1	SV.PFW	SAVED PAGE FAIL WORD
						; 1847	;		2	SV.IOPF	SAVED I/O PAGE FAIL WORD
						; 1848	;		3	SV.SC	SAVE FE,,SC DURING PAGE FAIL
						; 1849	;		4	E0	TEMP FOR STRING STUFF ETC.
						; 1850	;		5	E1
						; 1851	;		6	T0
						; 1852	;		7	MSK
						; 1853	;		10	SLEN
						; 1854	;		11	T1
						; 1855	;		12	T2
						; 1856	;		13	GCSTBR	GC SEGMENT TABLE BASE REG (.IF/LISP)
						; 1857	;		14	STBR	SEGMENT TABLE BASE REG (.IF/LISP)
						; 1858	;		15	UNUSED
						; 1859	;		16	TRB	BASE AOBJN POINTER FOR TRACKS FEATURE
						; 1860	;		17	TRX	CURRENT AOBJN POINTER FOR TRACKS
						; 1861	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 39
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- KL-MODE PAGING REGISTERS

						; 1862	.TOC	"MACROS -- KL-MODE PAGING REGISTERS"
						; 1863	
						; 1864	.IF/KLPAGE
						; 1865	.IFNOT/ITSPAGE
						; 1866	CSMSK		"FMADR/#B#,FM#/140"
						; 1867	PUR		"FMADR/#B#,FM#/141"
						; 1868	CBR		"FMADR/#B#,FM#/142"
						; 1869	SBR		"FMADR/#B#,FM#/143"
						; 1870	PFA		"FMADR/#B#,FM#/144"
						; 1871	SV.VMA		"FMADR/#B#,FM#/145"
						; 1872	SV.BR		"FMADR/#B#,FM#/150"
						; 1873	SV.SC		"FMADR/#B#,FM#/151"
						; 1874	SV.PFW		"FMADR/#B#,FM#/152"
						; 1875	.IF/ITSPAGE
						; 1876	UPFW		"FMADR/#B#,FM#/140"	;PFW AS OF LAST REAL PAGE FAIL
						; 1877	DBR1		"FMADR/#B#,FM#/141"	;USER LOW
						; 1878	DBR2		"FMADR/#B#,FM#/142"	;USER HIGH
						; 1879	DBR3		"FMADR/#B#,FM#/143"	;EXEC HIGH
						; 1880	DBR4		"FMADR/#B#,FM#/144"	;EXEC LOW
						; 1881	LH.AGE		"FMADR/#B#,FM#/145"
						; 1882	RH.AGE		"FMADR/#B#,FM#/146"
						; 1883	CN1000		"FMADR/#B#,FM#/147"
						; 1884	CN100		"FMADR/#B#,FM#/150"
						; 1885	SV.VMA		"FMADR/#B#,FM#/152"
						; 1886	SV.BR		"FMADR/#B#,FM#/153"
						; 1887	.IF/JPC SUPPORT
						; 1888	XJPC		"FMADR/#B#,FM#/154"	;EXEC JPC (OR RING PTR)
						; 1889	JPC		"FMADR/#B#,FM#/155"	;JPC (OR JPC RING PTR)
						; 1890	.ENDIF/JPC SUPPORT
						; 1891	SV.PFW		"FMADR/#B#,FM#/161"
						; 1892	SV.SC		"FMADR/#B#,FM#/163"
						; 1893	.ENDIF/ITSPAGE
						; 1894	SV.AR		"FMADR/#B#,FM#/156"	;GROSS KLUDGES AT PF2 AND PFPAR
						; 1895	SV.ARX		"FMADR/#B#,FM#/157"	; DEPEND ON THESE THREE
						; 1896	SV.PAR		"FMADR/#B#,FM#/160"	; VALUES BEING WHAT THEY ARE
						; 1897	
						; 1898	PFA_AR		"PFA,FM_AR"
						; 1899	SV.PFW_AR	"SV.PFW,FM_AR"
						; 1900	SV.VMA_AR	"SV.VMA,FM_AR"
						; 1901	SV.AR_AR	"SV.AR,FM_AR"
						; 1902	SV.ARX_AR	"SV.ARX,FM_AR"
						; 1903	SV.BR_AR	"SV.BR,FM_AR"
						; 1904	SV.SC_AR	"SV.SC,FM_AR"
						; 1905	SV.PAR_AR	"SV.PAR,FM_AR"
						; 1906	.IF/ITSPAGE
						; 1907	DBR1_AR		"DBR1,FM_AR"
						; 1908	DBR2_AR		"DBR2,FM_AR"
						; 1909	LH.AGE_AR	"LH.AGE,FM_AR"
						; 1910	RH.AGE_AR	"RH.AGE,FM_AR"
						; 1911	UPFW_AR		"UPFW,FM_AR"
						; 1912	.IF/JPC SUPPORT
						; 1913	JPC_AR		"JPC,FM_AR"
						; 1914	XJPC_AR		"XJPC,FM_AR"
						; 1915	.ENDIF/JPC SUPPORT
						; 1916	.ENDIF/ITSPAGE
						; 1917	
						; 1918	AR_SV.PFW	"SV.PFW,AR_FM"
						; 1919	AR_SV.VMA	"SV.VMA,AR_FM"
						; 1920	ARX_SV.VMA	"SV.VMA,ARX_FM"
						; 1921	VMA_SV.VMA	"SV.VMA,ADB/FM,AD/B,VMA/AD"
						; 1922	REQ SV.VMA	"SV.VMA,ADB/FM,AD/B,VMA/1,MEM/AD FUNC"
						; 1923	AR_SV.AR	"SV.AR,AR_FM"
						; 1924	ARX_SV.AR	"SV.AR,ARX_FM"
						; 1925	AR_SV.ARX	"SV.ARX,AR_FM"
						; 1926	ARX_SV.ARX	"SV.ARX,ARX_FM"
						; 1927	AR_SV.BR	"SV.BR,AR_FM"
						; 1928	ARX_SV.BR	"SV.BR,ARX_FM"
						; 1929	AR_SV.SC	"SV.SC,AR_FM"
						; 1930	.IF/ITSPAGE
						; 1931	AR_DBR1		"DBR1,AR_FM"
						; 1932	AR_DBR2		"DBR2,AR_FM"
						; 1933	ARX_DBR1	"DBR1,ARX_FM"
						; 1934	ARX_DBR2	"DBR2,ARX_FM"
						; 1935	ARX_DBR3	"DBR3,ARX_FM"
						; 1936	ARX_DBR4	"DBR4,ARX_FM"
						; 1937	AR_LH.AGE	"LH.AGE,AR_FM"
						; 1938	AR_UPFW		"UPFW,AR_FM"
						; 1939	GEN SV.PFW	"AD/B,ADB/FM,SV.PFW"
						; 1940	.IF/JPC SUPPORT
						; 1941	AR_JPC		"JPC,AR_FM"
						; 1942	AR_XJPC		"XJPC,AR_FM"
						; 1943	.IF/JPC.RING
						; 1944	AR_JPC+1	"JPC,AR_FM+1"
						; 1945	AR_XJPC+1	"XJPC,AR_FM+1"
						; 1946	.ENDIF/JPC.RING
						; 1947	.ENDIF/JPC SUPPORT
						; 1948	.ENDIF/ITSPAGE
						; 1949	
						; 1950	AR_AR+SBR	"SBR,ADB/FM,ADA/AR,AD/A+B,AR/AD"
						; 1951	VMA_AR+SBR	"SBR,ADB/FM,ADA/AR,AD/A+B,VMA/AD"
						; 1952	ARX_AR+CBR	"CBR,ADB/FM,ADA/AR,AD/A+B,ARX/AD"
						; 1953	VMA_AR+CBR	"CBR,ADB/FM,ADA/AR,AD/A+B,VMA/AD"
						; 1954	ARX_ARX+CBR	"CBR,ADB/FM,ADA/ARX,AD/A+B,ARX/AD"
						; 1955	VMA_ARX+CBR	"CBR,ADB/FM,ADA/ARX,AD/A+B,VMA/AD"
						; 1956	AR_AR AND CSMSK	"CSMSK,ADB/FM,ADA/AR,AD/AND,AR/AD"
						; 1957	AR_AR OR PUR	"PUR,ADB/FM,ADA/AR,AD/OR,AR/AD"
						; 1958	AR_ARX OR PUR	"PUR,ADB/FM,ADA/ARX,AD/OR,AR/AD"
						; 1959	AR_PUR+AR0	"PUR,ADB/FM,ADA EN/0S,AD/A+B,SPEC/XCRY AR0,AR/AD"
						; 1960	.IF/ITSPAGE
						; 1961	AR_AR*LH.AGE	"LH.AGE,ADA/AR,ADB/FM,AR/AD"
						; 1962	AR_AR*RH.AGE	"RH.AGE,ADA/AR,ADB/FM,AR/AD"
						; 1963	GEN ARX*CN1000	"CN1000,ADA/ARX,ADB/FM"
						; 1964	GEN ARX*SV.VMA	"SV.VMA,ADA/ARX,ADB/FM"
						; 1965	ARX_ARX-CN100	"CN100,ADA/ARX,ADB/FM,AD/A-B,ARX/AD"
						; 1966	.ENDIF/ITSPAGE
						; 1967	
						; 1968	;DEFINE PAGE FAIL CODES GENERATED BY MICROCODE
						; 1969	
						; 1970	SC_PF.ILW	"SC_#,#/24"	;ILLEGAL WRITE
						; 1971	SC_PF.PNA	"SC_#,#/33"	;PAGE NO ACCESS
						; 1972	;  PF.APE	36		;AR PARITY ERROR
						; 1973	;  PF.XPE	37		;ARX PARITY ERROR
						; 1974	.ENDIF/KLPAGE
						; 1975	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 40
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- ITS JPC RING REGISTERS

						; 1976	.TOC	"MACROS -- ITS JPC RING REGISTERS"
						; 1977	
						; 1978	XJPC0		"FMADR/#B#,FM#/100"	;EXEC JPC RING - AC BLK 4
						; 1979	XJPC1		"FMADR/#B#,FM#/101"
						; 1980	XJPC2		"FMADR/#B#,FM#/102"
						; 1981	XJPC3		"FMADR/#B#,FM#/103"
						; 1982	XJPC4		"FMADR/#B#,FM#/104"
						; 1983	XJPC5		"FMADR/#B#,FM#/105"
						; 1984	XJPC6		"FMADR/#B#,FM#/106"
						; 1985	XJPC7		"FMADR/#B#,FM#/107"
						; 1986	XJPC10		"FMADR/#B#,FM#/110"
						; 1987	XJPC11		"FMADR/#B#,FM#/111"
						; 1988	XJPC12		"FMADR/#B#,FM#/112"
						; 1989	XJPC13		"FMADR/#B#,FM#/113"
						; 1990	XJPC14		"FMADR/#B#,FM#/114"
						; 1991	XJPC15		"FMADR/#B#,FM#/115"
						; 1992	XJPC16		"FMADR/#B#,FM#/116"
						; 1993	XJPC17		"FMADR/#B#,FM#/117"
						; 1994	
						; 1995	JPC0		"FMADR/#B#,FM#/120"	;USER JPC RING - AC BLK 5
						; 1996	JPC1		"FMADR/#B#,FM#/121"
						; 1997	JPC2		"FMADR/#B#,FM#/122"
						; 1998	JPC3		"FMADR/#B#,FM#/123"
						; 1999	JPC4		"FMADR/#B#,FM#/124"
						; 2000	JPC5		"FMADR/#B#,FM#/125"
						; 2001	JPC6		"FMADR/#B#,FM#/126"
						; 2002	JPC7		"FMADR/#B#,FM#/127"
						; 2003	JPC10		"FMADR/#B#,FM#/130"
						; 2004	JPC11		"FMADR/#B#,FM#/131"
						; 2005	JPC12		"FMADR/#B#,FM#/132"
						; 2006	JPC13		"FMADR/#B#,FM#/133"
						; 2007	JPC14		"FMADR/#B#,FM#/134"
						; 2008	JPC15		"FMADR/#B#,FM#/135"
						; 2009	JPC16		"FMADR/#B#,FM#/136"
						; 2010	JPC17		"FMADR/#B#,FM#/137"
						; 2011	
						; 2012	XJPC0_AR	"XJPC0,FM_AR"
						; 2013	XJPC1_AR	"XJPC1,FM_AR"
						; 2014	XJPC2_AR	"XJPC2,FM_AR"
						; 2015	XJPC3_AR	"XJPC3,FM_AR"
						; 2016	XJPC4_AR	"XJPC4,FM_AR"
						; 2017	XJPC5_AR	"XJPC5,FM_AR"
						; 2018	XJPC6_AR	"XJPC6,FM_AR"
						; 2019	XJPC7_AR	"XJPC7,FM_AR"
						; 2020	XJPC10_AR	"XJPC10,FM_AR"
						; 2021	XJPC11_AR	"XJPC11,FM_AR"
						; 2022	XJPC12_AR	"XJPC12,FM_AR"
						; 2023	XJPC13_AR	"XJPC13,FM_AR"
						; 2024	XJPC14_AR	"XJPC14,FM_AR"
						; 2025	XJPC15_AR	"XJPC15,FM_AR"
						; 2026	XJPC16_AR	"XJPC16,FM_AR"
						; 2027	XJPC17_AR	"XJPC17,FM_AR"
						; 2028	
						; 2029	JPC0_AR		"JPC0,FM_AR"
						; 2030	JPC1_AR		"JPC1,FM_AR"
						; 2031	JPC2_AR		"JPC2,FM_AR"
						; 2032	JPC3_AR		"JPC3,FM_AR"
						; 2033	JPC4_AR		"JPC4,FM_AR"
						; 2034	JPC5_AR		"JPC5,FM_AR"
						; 2035	JPC6_AR		"JPC6,FM_AR"
						; 2036	JPC7_AR		"JPC7,FM_AR"
						; 2037	JPC10_AR	"JPC10,FM_AR"
						; 2038	JPC11_AR	"JPC11,FM_AR"
						; 2039	JPC12_AR	"JPC12,FM_AR"
						; 2040	JPC13_AR	"JPC13,FM_AR"
						; 2041	JPC14_AR	"JPC14,FM_AR"
						; 2042	JPC15_AR	"JPC15,FM_AR"
						; 2043	JPC16_AR	"JPC16,FM_AR"
						; 2044	JPC17_AR	"JPC17,FM_AR"
						; 2045	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 41
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- REGISTERS FOR MUSIC

						; 2046	.TOC	"MACROS -- REGISTERS FOR MUSIC"
						; 2047	
						; 2048	
						; 2049	MUSAOB		"FMADR/#B#,FM#/40"
						; 2050	MUSDEV		"FMADR/#B#,FM#/41"
						; 2051	MUSMIN		"FMADR/#B#,FM#/42"
						; 2052	MUSTIM		"FMADR/#B#,FM#/43"
						; 2053	MUSBT1		"FMADR/#B#,FM#/44"
						; 2054	MUSBT2		"FMADR/#B#,FM#/45"
						; 2055	CHDTIM		"FMADR/#B#,FM#/46"
						; 2056	CN7777		"FMADR/#B#,FM#/47"
						; 2057	V1BR		"FMADR/#B#,FM#/50"
						; 2058	V2BR		"FMADR/#B#,FM#/51"
						; 2059	V3BR		"FMADR/#B#,FM#/52"
						; 2060	V4BR		"FMADR/#B#,FM#/53"
						; 2061	V5BR		"FMADR/#B#,FM#/54"
						; 2062	V6BR		"FMADR/#B#,FM#/55"
						; 2063	V1CTR		"FMADR/#B#,FM#/60"
						; 2064	V2CTR		"FMADR/#B#,FM#/61"
						; 2065	V3CTR		"FMADR/#B#,FM#/62"
						; 2066	V4CTR		"FMADR/#B#,FM#/63"
						; 2067	V5CTR		"FMADR/#B#,FM#/64"
						; 2068	V6CTR		"FMADR/#B#,FM#/65"
						; 2069	V1TIM		"FMADR/#B#,FM#/70"
						; 2070	V2TIM		"FMADR/#B#,FM#/71"
						; 2071	V3TIM		"FMADR/#B#,FM#/72"
						; 2072	V4TIM		"FMADR/#B#,FM#/73"
						; 2073	V5TIM		"FMADR/#B#,FM#/74"
						; 2074	V6TIM		"FMADR/#B#,FM#/75"
						; 2075	
						; 2076	GEN MUSDEV	"MUSDEV,ADB/FM,AD/B"
						; 2077	
						; 2078	AR_MUSTIM	"MUSTIM,AR_FM"
						; 2079	AR_MUSBT1	"MUSBT1,AR_FM"
						; 2080	AR_MUSBT2	"MUSBT2,AR_FM"
						; 2081	AR_MUSAOB+1	"MUSAOB,AR_FM+1"
						; 2082	AR_CN7777	"CN7777,AR_FM"
						; 2083	AR_AR*MUSBT1	"MUSBT1,ADA/AR,ADB/FM,AR/AD"
						; 2084	AR_ARX+CHDTIM	"CHDTIM,ADA/ARX,ADB/FM,AD/A+B,AR/AD"
						; 2085	AR_AR+V1TIM	"V1TIM,ADA/AR,ADB/FM,AD/A+B,AR/AD"
						; 2086	AR_AR+V2TIM	"V2TIM,ADA/AR,ADB/FM,AD/A+B,AR/AD"
						; 2087	AR_AR+V3TIM	"V3TIM,ADA/AR,ADB/FM,AD/A+B,AR/AD"
						; 2088	AR_AR+V4TIM	"V4TIM,ADA/AR,ADB/FM,AD/A+B,AR/AD"
						; 2089	AR_AR+V5TIM	"V5TIM,ADA/AR,ADB/FM,AD/A+B,AR/AD"
						; 2090	AR_AR+V6TIM	"V6TIM,ADA/AR,ADB/FM,AD/A+B,AR/AD"
						; 2091	AR_ARX+V1CTR	"V1CTR,ADA/ARX,ADB/FM,AD/A+B,AR/AD"
						; 2092	AR_ARX+V2CTR	"V2CTR,ADA/ARX,ADB/FM,AD/A+B,AR/AD"
						; 2093	AR_ARX+V3CTR	"V3CTR,ADA/ARX,ADB/FM,AD/A+B,AR/AD"
						; 2094	AR_ARX+V4CTR	"V4CTR,ADA/ARX,ADB/FM,AD/A+B,AR/AD"
						; 2095	AR_ARX+V5CTR	"V5CTR,ADA/ARX,ADB/FM,AD/A+B,AR/AD"
						; 2096	AR_ARX+V6CTR	"V6CTR,ADA/ARX,ADB/FM,AD/A+B,AR/AD"
						; 2097	
						; 2098	MUSTIM_AR	"MUSTIM,FM_AR"
						; 2099	MUSBT1_AR	"MUSBT1,FM_AR"
						; 2100	MUSBT2_AR	"MUSBT2,FM_AR"
						; 2101	MUSAOB_AR	"MUSAOB,FM_AR"
						; 2102	CHDTIM_AR	"CHDTIM,FM_AR"
						; 2103	V1CTR_AR	"V1CTR,FM_AR"
						; 2104	V2CTR_AR	"V2CTR,FM_AR"
						; 2105	V3CTR_AR	"V3CTR,FM_AR"
						; 2106	V4CTR_AR	"V4CTR,FM_AR"
						; 2107	V5CTR_AR	"V5CTR,FM_AR"
						; 2108	V6CTR_AR	"V6CTR,FM_AR"
						; 2109	V1TIM_AR	"V1TIM,FM_AR"
						; 2110	V2TIM_AR	"V2TIM,FM_AR"
						; 2111	V3TIM_AR	"V3TIM,FM_AR"
						; 2112	V4TIM_AR	"V4TIM,FM_AR"
						; 2113	V5TIM_AR	"V5TIM,FM_AR"
						; 2114	V6TIM_AR	"V6TIM,FM_AR"
						; 2115	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 42
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- LISP-RELATED REGISTERS

						; 2116	.TOC	"MACROS -- LISP-RELATED REGISTERS"
						; 2117	
						; 2118	GCSTBR		"FMADR/#B#,FM#/173"
						; 2119	STBR		"FMADR/#B#,FM#/174"
						; 2120	
						; 2121	GEN STBR	"STBR,AD/B,ADB/FM"
						; 2122	
						; 2123	AR_GCSTBR	"GCSTBR,AR_FM"
						; 2124	AR_STBR		"STBR,AR_FM"
						; 2125	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 43
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- CONSTANT GENERATION

						; 2126	.TOC	"MACROS -- CONSTANT GENERATION"
						; 2127	
						; 2128	AR_1S		"AD/1S,AR/AD"
						; 2129	ARX_1S		"AD/1S,ARX/AD"
						; 2130	MQ_1S		"COND/REG CTL,MQ CTL/1S,MQ/MQM SEL"
						; 2131	AR_0S		"AD/0S,AR/AD"
						; 2132	ARX_0S		"AD/0S,ARX/AD"
						; 2133	AR_SIGN		"AD/XCRY-1,SPEC/XCRY AR0,AR/AD"
						; 2134	ARX_AR SIGN	"AD/XCRY-1,SPEC/XCRY AR0,ARX/AD"
						; 2135	AR_0.C		"COND/ARL IND,CLR/AR"
						; 2136	ARL_0.C		"COND/ARL IND,CLR/ARL"
						; 2137	ARR_0.C		"COND/ARL IND,CLR/ARR"
						; 2138	ARX_0.C		"COND/ARL IND,CLR/ARX"
						; 2139	MQ_0.C		"COND/ARL IND,CLR/MQ"
						; 2140	AR_0.S		"SPEC/ARL IND,CLR/AR"
						; 2141	ARL_0.S		"SPEC/ARL IND,CLR/ARL"
						; 2142	ARR_0.S		"SPEC/ARL IND,CLR/ARR"
						; 2143	ARX_0.S		"SPEC/ARL IND,CLR/ARX"
						; 2144	MQ_0.S		"SPEC/ARL IND,CLR/MQ"
						; 2145	AR_0.M		"MEM/ARL IND,CLR/AR"
						; 2146	ARL_0.M		"MEM/ARL IND,CLR/ARL"
						; 2147	ARR_0.M		"MEM/ARL IND,CLR/ARR"
						; 2148	ARX_0.M		"MEM/ARL IND,CLR/ARX"
						; 2149	MQ_0.M		"MEM/ARL IND,CLR/MQ"
						; 2150	ARX+MQ_0.M	"MEM/ARL IND,CLR/ARX+MQ"
						; 2151	AR+ARX+MQ_0.M	"MEM/ARL IND,CLR/AR+ARX+MQ"
						; 2152	ARL+ARX+MQ_0.M	"MEM/ARL IND,CLR/ARL+ARX+MQ"
						; 2153	ARL+ARX_0.M	"MEM/ARL IND,CLR/ARL+ARX"
						; 2154	AR+MQ_0.M	"MEM/ARL IND,CLR/AR+MQ"
						; 2155	AR+MQ_0.S	"SPEC/ARL IND,CLR/AR+MQ"
						; 2156	ARR+MQ_0.S	"SPEC/ARL IND,CLR/ARR+MQ"
						; 2157	ARX+MQ_0.S	"SPEC/ARL IND,CLR/ARX+MQ"
						; 2158	CLR AR		"COND/AR CLR"
						; 2159	CLR ARX		"COND/ARX CLR"
						; 2160	CLR MQ		"COND/REG CTL,MQ/MQ SEL,MQ CTL/0S"
						; 2161	AR_1		"ADA EN/0S,AD/A+1,AR/AD"
						; 2162	ARX_1		"ADA EN/0S,AD/A+1,ARX/AD"
						; 2163	AR_1 LONG	"ADA EN/0S,AD/A+1,AR/AD*.25,ARX/ADX"
						; 2164	MQ_1		"ADA EN/0S,AD/A+1,COND/REG CTL,MQ/MQM SEL,MQ CTL/AD"
						; 2165	AR_2		"ADA EN/0S,AD/A+1,AR/AD*2"
						; 2166	ARX_1B1		"ADA EN/0S,AD/A+1,ARX/ADX*.25"
						; 2167	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 44
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- ADDRESS MANIPULATION

						; 2168	.TOC	"MACROS -- ADDRESS MANIPULATION"
						; 2169	
						; 2170	GEN AR+XR	"FMADR/XR,ADB/FM,ADA/AR,AD/A+B"
						; 2171	GEN ARX+XR	"FMADR/XR,ADB/FM,ADA/ARX,AD/A+B"
						; 2172	VMA_AR+XR	"GEN AR+XR,VMA/AD"
						; 2173	VMA_ARX+XR	"GEN ARX+XR,VMA/AD"
						; 2174	AR_AR+XR	"GEN AR+XR,AR/AD"
						; 2175	AR_ARX+XR	"GEN ARX+XR,AR/AD"
						; 2176	VMA_ARX		"ADA/ARX,AD/A,VMA/AD"
						; 2177	VMA_AR		"ADA/AR,AD/A,VMA/AD"
						; 2178	VMA_AR+1	"ADA/AR,AD/A+1,VMA/AD"
						; 2179	VMA_AR-1	"ADA/AR,AD/A-1,VMA/AD"
						; 2180	VMA_MQ		"ADA/MQ,AD/A,VMA/AD"
						; 2181	VMA_BR		"ADB/BR,AD/B,VMA/AD"
						; 2182	VMA_AR+BR	"ADA/AR,ADB/BR,AD/A+B,VMA/AD"
						; 2183	VMA_ARX+BR	"ADA/ARX,ADB/BR,AD/A+B,VMA/AD"
						; 2184	VMA_ARX+FM	"ADA/ARX,ADB/FM,AD/A+B,VMA/AD"
						; 2185	VMA_AC0		"FMADR/AC0,ADB/FM,AD/B,VMA/AD"
						; 2186	VMA_AC1		"FMADR/AC1,ADB/FM,AD/B,VMA/AD"
						; 2187	VMA_AC3		"FMADR/AC3,ADB/FM,AD/B,VMA/AD"
						; 2188	
						; 2189	VMA_PC+1	"VMA/PC+1"
						; 2190	VMA_VMA-1	"VMA/VMA,COND/VMA DEC"
						; 2191	VMA_VMA+1	"VMA/VMA,COND/VMA INC"
						; 2192	VMA_#		"VMA/1,COND/VMA_#"
						; 2193	VMA_40		"VMA/1,COND/VMA_#,#/40"
						; 2194	VMA_41		"VMA/1,COND/VMA_#,#/41"
						; 2195	VMA_40+PI*2	"VMA/1,COND/VMA_#+PI*2,#/40"
						; 2196	VMA_41+PI*2	"VMA/1,COND/VMA_#+PI*2,#/41"
						; 2197	VMA_420+TRAP	"VMA/1,COND/VMA_#+TRAP,#/420"
						; 2198	VMA_430+MODE	"VMA/1,COND/VMA_#+MODE,#/430"
						; 2199	VMA_#+AR32-35	"VMA/1,COND/VMA_#+AR32-35"
						; 2200	PC_VMA		"SPEC/LOAD PC"
						; 2201	
						; 2202	AR_PC		"ADA/PC,AD/A,AR/AD"
						; 2203	AR_PC+1		"ADA/PC,AD/A+1,AR/AD,SPEC/SAVE FLAGS"
						; 2204	ARR_PC+1	"ADA/PC,AD/A+1,AR/AD"
						; 2205	ARX_PC		"ADA/PC,AD/A,ARX/AD"
						; 2206	
						; 2207	REQ VMA HELD	"COND/SEL VMA,ADA/PC,AD/A,VMA/1,MEM/AD FUNC"
						; 2208	VMA_VMA HELD	"COND/SEL VMA,ADA/PC,AD/A,VMA/AD"
						; 2209	AR_VMA HELD	"COND/SEL VMA,AR_PC"
						; 2210	ARX_VMA HELD	"COND/SEL VMA,ARX_PC"
						; 2211	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 45
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- LONG (72-BIT) ARITHMETIC

						; 2212	.TOC	"MACROS -- LONG (72-BIT) ARITHMETIC"
						; 2213	
						; 2214	AR_AR+1 LONG	"AR_AR+1,ARX/ADX,SPEC/AD LONG"
						; 2215	AR_BR+1 LONG	"ADA EN/0S,ADB/BR,AD/A+B+1,AR/AD,ARX/ADX,SPEC/AD LONG"
						; 2216	GEN -AR LONG	"ADB/AR*4,ADA EN/0S,AD/A-B,SPEC/AD LONG"
						; 2217	AR_AD*.25 LONG	"AR/AD*.25,ARX/ADX*.25,SPEC/AD LONG"
						; 2218	AR_-AR LONG	"GEN -AR LONG,AR_AD*.25 LONG"
						; 2219	AR_-BR LONG	"ADA EN/0S,ADB/BR,AD/A-B,AR/AD,ARX/ADX,SPEC/AD LONG"
						; 2220	AR_BR*2 LONG	"ADB/BR*2,AD/B,AR/AD,ARX/ADX"
						; 2221	AR_-BR*2 LONG	"ADA EN/0S,ADB/BR*2,AD/A-B,AR/AD,ARX/ADX,SPEC/AD LONG"
						; 2222	AR_AR+BR LONG	"AR_AR+BR,ARX/ADX,SPEC/AD LONG"
						; 2223	AR_AR-BR LONG	"AR_AR-BR,ARX/ADX,SPEC/AD LONG"
						; 2224	AR_2(AR+BR) LONG "AR_2(AR*BR),AD/A+B,ARX/ADX*2,SPEC/AD LONG"
						; 2225	AR_AR*5 LONG	"ADA/AR,ADB/AR*4,AD/A+B,AR/AD,ARX/ADX,SPEC/AD LONG"
						; 2226	AR_AR*10 LONG	"ADA/AR,ADB/AR*4,AD/A+B,AR/AD*2,ARX/ADX*2,SPEC/AD LONG"
						; 2227	AR_AR*1.25 LONG	"ADA/AR,ADB/AR*4,AD/A+B,AR_AD*.25 LONG"
						; 2228	AR_AR*.25 LONG	"ADA/AR,AD/A,AR/AD*.25,ARX/ADX*.25"
						; 2229	
						; 2230	.TOC	"MACROS -- HALFWORD MANIPULATION"
						; 2231	
						; 2232	AR_AR SWAP	"SH/AR SWAP,AR/SH"
						; 2233	ARX_AR SWAP	"SH/AR SWAP,ARX/SH"
						; 2234	MQ_AR SWAP	"SH/AR SWAP,MQ/SH"
						; 2235	ARL_AC0		"FMADR/AC0,ADB/FM,AD/B,COND/ARL IND,ARL/AD"
						; 2236	ARL_ARX		"COND/ARL IND,ARL/AD,ADA/ARX,AD/A"
						; 2237	ARR_AC0		"AR_AC0"
						; 2238	ARL_ARR		"COND/ARL IND,ARL/SH,SH/AR SWAP"
						; 2239	ARL_ARR.S	"SPEC/ARL IND,ARL/SH,SH/AR SWAP"
						; 2240	ARL_ARR.M	"MEM/ARL IND,ARL/SH,SH/AR SWAP"
						; 2241	ARR_ARL		"SH/AR SWAP,AR/SH"
						; 2242	ARR_ARR		"AR/AR"
						; 2243	ARL_ARL		"COND/ARL IND,ARL/ARL"
						; 2244	ARL_ARL.M	"MEM/ARL IND,ARL/ARL"
						; 2245	ARL_ARXL	"SPEC/ARL IND,SH/ARX,ARL/SH"
						; 2246	ARR_BRXR	"SPEC/ARL IND,AD/B,ARL/ADX,ADB/BR"
						; 2247	ARR_ARXR	"SH/ARX,AR/SH"
						; 2248	ARL_ARXL.M	"MEM/ARL IND,SH/ARX,ARL/SH"
						; 2249	ARL_ARX (ADX)	"ADA EN/EN,AD/A,MEM/ARL IND,ARL/ADX"
						; 2250	ARR_0S		"AR_0S"
						; 2251	ARL_0S		"COND/ARL IND,CLR/ARL"
						; 2252	ARR_1S		"AR_1S"
						; 2253	ARL_1S		"AD/1S,COND/ARL IND,ARL/AD"
						; 2254	ARL_1S.M	"AD/1S,MEM/ARL IND,ARL/AD"
						; 2255	ARL_BRL		"ADB/BR,AD/B,COND/ARL IND,ARL/AD"
						; 2256	ARL_BRL.S	"ADB/BR,AD/B,SPEC/ARL IND,ARL/AD"
						; 2257	ARR_ARX		"AR_ARX"
						; 2258	ARL_SHIFT.C	"COND/ARL IND,ARL/SH,SH/SHIFT AR!ARX"
						; 2259	ARL_BRL.M	"ADB/BR,AD/B,MEM/ARL IND,ARL/AD"
						; 2260	ARL_SHIFT	"MEM/ARL IND,SH/SHIFT AR!ARX,ARL/SH"
						; 2261	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 46
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- SC

						; 2262	.TOC	"MACROS -- SC"
						; 2263	
						; 2264	CLR SC		"SCADA EN/0S,SCAD/A,SC/SCAD"
						; 2265	GEN # AND SC	"SCADA/#,SCADB/SC,SCAD/AND"
						; 2266	SC_#		"SCADA/#,SCAD/A,SC/SCAD"
						; 2267	SC_#-SC		"SCADA/#,SCADB/SC,SCAD/A-B,SC/SCAD"
						; 2268	SC_#-SC-1	"SCADA/#,SCADB/SC,SCAD/A-B-1,SC/SCAD"
						; 2269	SC_#+SC		"SCADA/#,SCADB/SC,SCAD/A+B,SC/SCAD"
						; 2270	SC_SC AND #	"SCADA/#,SCADB/SC,SCAD/AND,SC/SCAD"
						; 2271	SC_# OR SC	"SCADA/#,SCADB/SC,SCAD/OR,SC/SCAD"
						; 2272	SC_P AND SC	"SCADA/AR0-5,SCADB/SC,SCAD/AND,SC/SCAD"
						; 2273	SC_P AND #	"SCADA/AR0-5,SCADB/#,SCAD/AND,SC/SCAD"
						; 2274	SC_# AND S	"SCADA/#,SCADB/AR6-11,SCAD/AND,SC/SCAD"
						; 2275	SC_P-#		"SCADA/AR0-5,SCADB/#,SCAD/A-B,SC/SCAD"
						; 2276	SC_S		"SCADB/AR6-11,SCADA EN/0S,SCAD/A+B,SC/SCAD"
						; 2277	SC_P		"SCADA/AR0-5,SCAD/A,SC/SCAD"
						; 2278	SC_-SC		"SCADA EN/0S,SCADB/SC,SCAD/A-B,SC/SCAD"
						; 2279	SC_-SC-1	"SCADA EN/0S,SCADB/SC,SCAD/A-B-1,SC/SCAD"
						; 2280	SC_1		"SCADA EN/0S,SCAD/A+1,SC/SCAD"
						; 2281	SC_1S		"SCADA EN/0S,SCAD/A-1,SC/SCAD"
						; 2282	SC_FE		"SPEC/SCM ALT,SC/FE"
						; 2283	SC_FE+1		"SCADA/FE,SCAD/A+1,SC/SCAD"
						; 2284	SC_FE-1		"SCADA/FE,SCAD/A-1,SC/SCAD"
						; 2285	SC_FE+SC	"SCADA/FE,SCADB/SC,SCAD/A+B,SC/SCAD"
						; 2286	SC_FE-SC	"SCADA/FE,SCADB/SC,SCAD/A-B,SC/SCAD"
						; 2287	SC_FE-SC-1	"SCADA/FE,SCADB/SC,SCAD/A-B-1,SC/SCAD"
						; 2288	SC_FE+#		"SCADA/FE,SCADB/#,SCAD/A+B,SC/SCAD"
						; 2289	SC_AR0-8 AND #	"SCADA/#,SCADB/AR0-8,SCAD/AND,SC/SCAD"
						; 2290	SC_FE-#		"SCADA/FE,SCADB/#,SCAD/A-B,SC/SCAD"
						; 2291	SC_FE AND #	"SCADA/FE,SCADB/#,SCAD/AND,SC/SCAD"
						; 2292	SC_EA		"SPEC/SCM ALT,SC/AR SHIFT"
						; 2293	SC_# AND AR0-8	"SCADA/#,SCADB/AR0-8,SCAD/AND,SC/SCAD"
						; 2294	SC_EXP		"SCADA/AR EXP,SCAD/A,SC/SCAD"
						; 2295	SC_EXP+1	"SCADA/AR EXP,SCAD/A+1,SC/SCAD"
						; 2296	SC_EXP-1	"SCADA/AR EXP,SCAD/A-1,SC/SCAD"
						; 2297	SC_EXP+SC	"SCADA/AR EXP,SCADB/SC,SCAD/A+B,SC/SCAD"
						; 2298	SC_EXP-#	"SCADA/AR EXP,SCADB/#,SCAD/A-B,SC/SCAD"
						; 2299	SC_EXP-SC	"SCADA/AR EXP,SCADB/SC,SCAD/A-B,SC/SCAD"
						; 2300	
						; 2301	SC_AR0-8	"SCADA EN/0S,SCADB/AR0-8,SCAD/A+B,SC/SCAD"
						; 2302	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 47
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- FE

						; 2303	.TOC	"MACROS -- FE"
						; 2304	
						; 2305	FE_S		"SCADA EN/0S,SCADB/AR6-11,SCAD/A+B,FE/SCAD"
						; 2306	FE_# AND S	"SCADA/#,SCADB/AR6-11,SCAD/AND,FE/SCAD"
						; 2307	FE_P		"SCADA/AR0-5,SCAD/A,FE/SCAD"
						; 2308	FE_SC		"SCADA EN/0S,SCADB/SC,SCAD/A+B,FE/SCAD"
						; 2309	FE_-SC-1	"SCADA EN/0S,SCADB/SC,SCAD/A-B-1,FE/SCAD"
						; 2310	FE_#		"SCADA/#,SCAD/A,FE/SCAD"
						; 2311	FE_+#		"SCADA EN/0S,SCADB/#,SCAD/A+B,FE/SCAD"
						; 2312	FE_#+SC		"SCADA/#,SCADB/SC,SCAD/A+B,FE/SCAD"
						; 2313	FE_#-SC		"SCADA/#,SCADB/SC,SCAD/A-B,FE/SCAD"
						; 2314	FE_FE+SC	"SCADA/FE,SCADB/SC,SCAD/A+B,FE/SCAD"
						; 2315	FE_FE-SC	"SCADA/FE,SCADB/SC,SCAD/A-B,FE/SCAD"
						; 2316	FE_FE+#		"SCADA/FE,SCADB/#,SCAD/A+B,FE/SCAD"
						; 2317	FE_FE-#		"SCADA/FE,SCADB/#,SCAD/A-B,FE/SCAD"
						; 2318	FE_FE OR #	"SCADA/FE,SCADB/#,SCAD/OR,FE/SCAD"
						; 2319	FE_FE AND #	"SCADA/FE,SCADB/#,SCAD/AND,FE/SCAD"
						; 2320	FE_EXP		"SCADA/AR EXP,SCAD/A,FE/SCAD"
						; 2321	FE_EXP+1	"SCADA/AR EXP,SCAD/A+1,FE/SCAD"
						; 2322	FE_EXP-1	"SCADA/AR EXP,SCAD/A-1,FE/SCAD"
						; 2323	FE_EXP+SC	"SCADA/AR EXP,SCADB/SC,SCAD/A+B,FE/SCAD"
						; 2324	FE_EXP-#	"SCADA/AR EXP,SCADB/#,SCAD/A-B,FE/SCAD"
						; 2325	FE_AR0-8	"SCADA EN/0S,SCADB/AR0-8,SCAD/A+B,FE/SCAD"
						; 2326	FE_AR0-8 COMP	"SCADA EN/0S,SCADB/AR0-8,SCAD/A-B-1,FE/SCAD"
						; 2327	FE_#+AR0-8	"SCADA/#,SCADB/AR0-8,SCAD/A+B,FE/SCAD"
						; 2328	FE_AR0-8 AND #	"SCADA/#,SCADB/AR0-8,SCAD/AND,FE/SCAD"
						; 2329	FE_FE OR AR0-8	"SCADA/FE,SCADB/AR0-8,SCAD/OR,FE/SCAD"
						; 2330	FE_FE AND AR0-8	"SCADA/FE,SCADB/AR0-8,SCAD/AND,FE/SCAD"
						; 2331	GEN P AND #	"SCADA/AR0-5,SCADB/#,SCAD/AND"
						; 2332	GEN P AND SC	"SCADA/AR0-5,SCADB/SC,SCAD/AND"
						; 2333	FE_P AND #	"SCADA/AR0-5,SCADB/#,SCAD/AND,FE/SCAD"
						; 2334	FE_P AND SC	"SCADA/AR0-5,SCADB/SC,SCAD/AND,FE/SCAD"
						; 2335	FE_P+SC		"SCADA/AR0-5,SCADB/SC,SCAD/A+B,FE/SCAD"
						; 2336	FE_FE SHRT	"COND/FE SHRT,FE/0"
						; 2337	CLR FE		"SCADA EN/0S,SCAD/A,FE/SCAD"
						; 2338	FE_1		"SCADA EN/0S,SCAD/A+1,FE/SCAD"
						; 2339	FE_-1		"SCADA EN/0S,SCAD/A-1,FE/SCAD"
						; 2340	FE_FE+1		"SCADA/FE,SCAD/A+1,FE/SCAD"
						; 2341	FE_FE-1		"SCADA/FE,SCAD/A-1,FE/SCAD"
						; 2342	GEN SC		"SCADB/SC,SCADA EN/0S,SCAD/A+B"
						; 2343	GEN -SC-1	"SCADB/SC,SCADA EN/0S,SCAD/A-B-1"
						; 2344	GEN FE		"SCADA/FE,SCAD/A"
						; 2345	GEN FE-SC	"SCADA/FE,SCADB/SC,SCAD/A-B"
						; 2346	GEN FE AND SC	"SCADA/FE,SCADB/SC,SCAD/AND"
						; 2347	GEN FE AND #	"SCADA/FE,SCADB/#,SCAD/AND"
						; 2348	GEN FE-1	"SCADA/FE,SCAD/A-1"
						; 2349	GEN FE-#	"SCADA/FE,SCADB/#,SCAD/A-B"
						; 2350	GEN FE AND S	"SCADA/FE,SCADB/AR6-11,SCAD/AND"
						; 2351	GEN #+SC	"SCADA/#,SCADB/SC,SCAD/A+B"
						; 2352	GEN #-SC	"SCADA/#,SCADB/SC,SCAD/A-B"
						; 2353	GEN #+AR0-8	"SCADA/#,SCADB/AR0-8,SCAD/A+B"
						; 2354	GEN # AND AR0-8	"SCADA/#,SCADB/AR0-8,SCAD/AND"
						; 2355	GEN P-S		"SCADA/AR0-5,SCADB/AR6-11,SCAD/A-B"
						; 2356	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 48
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- AR MIXER MIXER (BITS 0-8)

						; 2357	.TOC	"MACROS -- AR MIXER MIXER (BITS 0-8)"
						; 2358	
						; 2359	GEN P-#		"SCADA/AR0-5,SCADB/#,SCAD/A-B"
						; 2360	P_SCAD		"SPEC/ARL IND,ARL/ARMM,AR0-8/LOAD,ARMM/SCAD POS"
						; 2361	P_SCAD.M	"MEM/ARL IND,ARL/ARMM,AR0-8/LOAD,ARMM/SCAD POS"
						; 2362	P_SCAD.C	"COND/ARL IND,ARL/ARMM,AR0-8/LOAD,ARMM/SCAD POS"
						; 2363	P_SCAD#		"COND/LD AR0-8,AR/ARMM,ARMM/SCAD POS"
						; 2364	P_P-S		"SCADA/AR0-5,SCADB/AR6-11,SCAD/A-B,P_SCAD.M"
						; 2365	P_P+S		"SCADA/AR0-5,SCADB/AR6-11,SCAD/A+B,P_SCAD"
						; 2366	P_P+1		"SCADA/AR0-5,SCAD/A+1,P_SCAD"
						; 2367	P_SC		"SCADA EN/0S,SCADB/SC,SCAD/A+B,P_SCAD.M"
						; 2368	P_SC#		"SCADA EN/0S,SCADB/SC,SCAD/A+B,P_SCAD#"
						; 2369	P_-SC		"SCADA EN/0S,SCADB/SC,SCAD/A-B,P_SCAD.M"
						; 2370	P_P OR SC	"SCADA/AR0-5,SCADB/SC,SCAD/OR,P_SCAD.M"
						; 2371	P_P OR SC#	"SCADA/AR0-5,SCADB/SC,SCAD/OR,P_SCAD#"
						; 2372	P_P AND SC	"SCADA/AR0-5,SCADB/SC,SCAD/AND,P_SCAD.M"
						; 2373	P_P OR #	"SCADA/AR0-5,SCADB/#,SCAD/OR,P_SCAD#"
						; 2374	P_P AND #	"SCADA/AR0-5,SCADB/#,SCAD/AND,P_SCAD#"
						; 2375	P_P+#		"SCADA/AR0-5,SCADB/#,SCAD/A+B,P_SCAD#"
						; 2376	P_P-#		"SCADA/AR0-5,SCADB/#,SCAD/A-B,P_SCAD#"
						; 2377	P_FE		"SCADA/FE,SCAD/A,P_SCAD"
						; 2378	P_#		"SCADA/#,SCAD/A,P_SCAD#"
						; 2379	GEN S AND #	"SCADA/#,SCADB/AR6-11,SCAD/AND"
						; 2380	P_FE-S		"SCADA/FE,SCADB/AR6-11,SCAD/A-B,P_SCAD.C"
						; 2381	P_FE+SC		"SCADA/FE,SCADB/SC,SCAD/A+B,P_SCAD.C"
						; 2382	P_FE OR SC	"SCADA/FE,SCADB/SC,SCAD/OR,P_SCAD"
						; 2383	EXP_SCAD	"MEM/ARL IND,ARL/ARMM,AR0-8/LOAD,ARMM/SCAD EXP"
						; 2384	EXP_SCAD.C	"COND/REG CTL,AR CTL/AR0-8 LOAD,AR/ARMM,ARMM/SCAD EXP"
						; 2385	EXP TST		"COND/REG CTL,EXP TST/AR_EXP"
						; 2386	CLR P		"SCADA EN/0S,SCAD/A,P_SCAD"
						; 2387	P_1S		"SCADA EN/0S,SCAD/A-1,P_SCAD"
						; 2388	CLR EXP		"SCADA EN/0S,SCAD/A,EXP_SCAD"
						; 2389	EXP_1		"SCADA EN/0S,SCAD/A+1,EXP_SCAD"
						; 2390	EXP_SIGN	"SPEC/ARL IND,ARL/ARMM,AR0-8/LOAD,ARMM/EXP_SIGN"
						; 2391	EXP_SIGN.C	"COND/ARL IND,ARL/ARMM,AR0-8/LOAD,ARMM/EXP_SIGN"
						; 2392	EXP_SIGN.M	"MEM/ARL IND,ARL/ARMM,AR0-8/LOAD,ARMM/EXP_SIGN"
						; 2393	EXP_SC		"SCADA EN/0S,SCADB/SC,SCAD/A+B,EXP_SCAD"
						; 2394	EXP_-SC-1	"SCADA EN/0S,SCADB/SC,SCAD/A-B-1,EXP_SCAD"
						; 2395	EXP_FE TST	"SCADA/FE,SCAD/A,EXP_SCAD.C,EXP TST"
						; 2396	EXP_-SC-1 TST	"SCADA EN/0S,SCADB/SC,SCAD/A-B-1,EXP_SCAD.C,EXP TST"
						; 2397	AR0-8_SCAD	"SPEC/ARL IND,ARL/ARMM,AR0-8/LOAD,ARMM/SCAD EXP"
						; 2398	AR0-8_SCAD#	"ARMM/SCAD EXP,AR/ARMM,COND/LD AR0-8"
						; 2399	AR0-8_SCAD.M	"MEM/ARL IND,ARL/ARMM,AR0-8/LOAD,ARMM/SCAD EXP"
						; 2400	AR0-8_SCAD.R	"ARMM/SCAD EXP,AR/ARMM,COND/REG CTL,AR CTL/AR0-8 LOAD"
						; 2401	AR0-8_SC	"SCADA EN/0S,SCADB/SC,SCAD/A+B,AR0-8_SCAD"
						; 2402	AR0-8_-SC-1	"SCADA EN/0S,SCADB/SC,SCAD/A-B-1,AR0-8_SCAD"
						; 2403	AR0-8_FE	"SCADA/FE,SCAD/A,AR0-8_SCAD"
						; 2404	AR0-8_FE.M	"SCADA/FE,SCAD/A,AR0-8_SCAD.M"
						; 2405	AR0-8_FE.R	"GEN FE,AR0-8_SCAD.R"
						; 2406	AR0-8_FE#	"SCADA/FE,SCAD/A,ARMM/SCAD EXP,AR/ARMM,COND/LD AR0-8"
						; 2407	AR0-8_FE-SC	"SCADA/FE,SCADB/SC,SCAD/A-B,AR0-8_SCAD.M"
						; 2408	AR0-8_FE OR SC	"SCADA/FE,SCADB/SC,SCAD/OR,AR0-8_SCAD.M"
						; 2409	AR0-8_FE+#	"SCADA/FE,SCADB/#,SCAD/A+B,AR0-8_SCAD#"
						; 2410	AR0-8_FE OR #	"SCADA/FE,SCADB/#,SCAD/OR,AR0-8_SCAD#"
						; 2411	AR0-8_# AND AR0-8	"SCADA/#,SCADB/AR0-8,SCAD/AND,AR0-8_SCAD#"
						; 2412	AR0-8_#		"COND/LD AR0-8,AR/ARMM,ARMM/#"
						; 2413	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 49
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- MICROPROGRAM SKIPS

						; 2414	.TOC	"MACROS -- MICROPROGRAM SKIPS"
						; 2415	
						; 2416	SKP AR0		"SKIP/AR0"
						; 2417	SKP ARX0	"SKIP/ARX0"
						; 2418	SKP BR0		"SKIP/BR0"
						; 2419	SKP AD0		"SKIP/AD0"
						; 2420	SKP ADX0	"SKIP/ADX0"
						; 2421	SKP AR18	"SKIP/AR18"
						; 2422	SKP SC0		"SKIP/SC0"
						; 2423	SKP SCAD0	"SKIP/SCAD0"
						; 2424	SKP AD NE	"SKIP/AD#0"
						; 2425	SKP SCAD NE	"SKIP/SCAD#0"
						; 2426	SKP CRY0	"SKIP/AD CRY0"
						; 2427	SKP INTRPT	"SKIP/INTRPT"
						; 2428	SKP AC#0	"SKIP/AC#0"
						; 2429	SKP -START	"SKIP/-START"
						; 2430	SKP RUN		"SKIP/RUN"
						; 2431	SKP KERNEL	"SKIP/KERNEL"
						; 2432	SKP USER	"SKIP/USER"
						; 2433	SKP P!S XCT	"SKIP/P!S XCT"
						; 2434	SKP RPW		"SKIP/RPW REF"
						; 2435	SKP AC REF	"SKIP/AC REF"
						; 2436	SKP FETCH	"SKIP/FETCH"
						; 2437	SKP SC LE 36	"SCADB/SC,SCADA/#,#/-36.,SCAD/A+B,SKIP/SCAD0"
						; 2438	SKP SC NE	"SCADB/SC,SCADA EN/0S,SCAD/A+B,SKIP/SCAD#0"
						; 2439	SKP FE0		"SCADA/FE,SCAD/A,SKIP/SCAD0"
						; 2440	SKP EXP NE	"SCADA/AR EXP,SCAD/A,SKIP/SCAD#0"
						; 2441	SKP P NE	"SCADA/AR0-5,SCAD/A,SKIP/SCAD#0"
						; 2442	SKP AR GT BR	"ADA/AR,ADB/BR,AD/XOR,SKIP/AD CRY0"
						; 2443	SKP AR GT FM	"ADA/AR,ADB/FM,AD/XOR,SKIP/AD CRY0"
						; 2444	SKP ARX LT BRX	"ADA EN/EN,ADB/BR,AD/A-B,SKIP/ADX0"
						; 2445	SKP ARX LE BRX	"ADA EN/EN,ADB/BR,AD/A-B-1,SKIP/ADX0"
						; 2446	SKP MQ EQ -1	"ADA/MQ,AD/CRY A EQ -1,SKIP/AD CRY0"
						; 2447	SKP AR SIG	"ADA/AR,AD/A+XCRY,SPEC/XCRY AR0,SKIP/AD#0"
						; 2448	SKP AC0-	"FMADR/AC0,ADB/FM,AD/B,SKIP/AD0"
						; 2449	SKP AC0+	"FMADR/AC0,ADB/FM,AD/SETCB,SKIP/AD0"
						; 2450	SKP AR1		"ADA/AR,AD/A*2,SKIP/AD0"
						; 2451	SKP AR2		"ADB/AR*4,AD/B,SKIP/AD0"
						; 2452	SKP AR6		"SCADB/AR6-11,SCADA/#,#/40,SCAD/AND,SKIP/SCAD#0"
						; 2453	SKP AR NE	"ADA/AR,AD/CRY A#0,SKIP/AD CRY0"
						; 2454	SKP ARX2	"ADB/AR*4,AD/B,SKIP/ADX0"
						; 2455	SKP ARX NE	"ADA/ARX,AD/CRY A#0,SKIP/AD CRY0"
						; 2456	SKP BR EQ	"ADA EN/0S,ADB/BR,AD/CRY A GE B,SKIP/AD CRY0"
						; 2457	SKP BR EQ -1	"ADA EN/0S,ADB/BR,AD/A+B+1,SKIP/AD CRY0"
						; 2458	SKP ARX+MQ NE	"ADA/MQ,AD/CRY A#0,SPEC/AD LONG,SKIP/AD CRY0"
						; 2459	SKP AR EQ	"ADA EN/0S,ADB/AR*4,AD/ORCB+1,SKIP/AD CRY0"
						; 2460	
						; 2461	.TOC	"MACROS -- CRY0 GENERATORS"
						; 2462	
						; 2463	NO CRY		"AD/SETCA"
						; 2464	TEST AR		"ADA/AR,AD/CRY A#0"
						; 2465	TEST ARX	"ADA/ARX,AD/CRY A#0"
						; 2466	TEST ARX.AR*4	"ADA/ARX,ADB/AR*4,AD/CRY A.B#0"
						; 2467	TEST AR.AC0	"FMADR/AC0,ADB/FM,ADA/AR,AD/CRY A.B#0"
						; 2468	TEST AR.BR	"ADB/BR,ADA/AR,AD/CRY A.B#0"
						; 2469	TEST AR.MSK	"MSK,ADB/FM,ADA/AR,AD/CRY A.B#0"
						; 2470	TEST BRL	"ADA EN/0S,ADB/BR,AD/ORCB+1,GEN CRY18"
						; 2471	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 50
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- SUBROUTINE CALL AND RETURNS

						; 2472	.TOC	"MACROS -- SUBROUTINE CALL AND RETURNS"
						; 2473	
						; 2474	CALL		"SPEC/CALL"
						; 2475	CALL.M		"MEM/ARL IND,CALL/CALL"
						; 2476	CALL.S		"SPEC/ARL IND,CALL/CALL"
						; 2477	CALL.C		"COND/ARL IND,CALL/CALL"
						; 2478	
						; 2479	RETURN0		"DISP/RETURN,J/0"
						; 2480	RETURN1		"DISP/RETURN,J/1"
						; 2481	RETURN2		"DISP/RETURN,J/2"
						; 2482	RETURN3		"DISP/RETURN,J/3"
						; 2483	RETURN4		"DISP/RETURN,J/4"
						; 2484	RETURN5		"DISP/RETURN,J/5"
						; 2485	RETURN6		"DISP/RETURN,J/6"
						; 2486	RETURN7		"DISP/RETURN,J/7"
						; 2487	RETURN10	"DISP/RETURN,J/10"
						; 2488	RETURN12	"DISP/RETURN,J/12"
						; 2489	
						; 2490	.TOC	"MACROS -- DISPATCHES"
						; 2491	
						; 2492	IR DISP		"DISP/DRAM J"
						; 2493	B DISP		"DISP/DRAM B"
						; 2494	EA MOD DISP	"DISP/EA MOD"
						; 2495	EA TYPE DISP	"DISP/EA TYPE"
						; 2496	NXT INSTR	"MEM/MB WAIT,DISP/NICOND,#/0,J/NEXT"	;MUSTN'T CLEAR FE!
						; 2497	.IF/NXT.INSTR.BITES
						; 2498	NXT INSTR AFTER AC1	"J/FINI"
						; 2499	FINISH			"J/FINI"	;USE INSTEAD OF NXT INSTR IF FM WRITE
						; 2500	.IF/JPC SUPPORT
						; 2501	NXT INSTR AFTER JPC	"J/FINI"
						; 2502	.ENDIF/JPC SUPPORT
						; 2503	.IFNOT/NXT.INSTR.BITES
						; 2504	NXT INSTR AFTER AC1	"NXT INSTR"
						; 2505	FINISH			"NXT INSTR"	;USE INSTEAD OF NXT INSTR IF FM WRITE
						; 2506	.IF/JPC SUPPORT
						; 2507	NXT INSTR AFTER JPC	"NXT INSTR"
						; 2508	.ENDIF/JPC SUPPORT
						; 2509	.ENDIF/NXT.INSTR.BITES
						; 2510	SH DISP		"SH/SHIFT AR!ARX,DISP/SH0-3"
						; 2511	AR0-3 DISP	"SH/AR,DISP/SH0-3"
						; 2512	AR18-21 DISP	"SH/AR SWAP,DISP/SH0-3"
						; 2513	ARX0-3 DISP	"SH/ARX,DISP/SH0-3"
						; 2514	BYTE DISP	"DISP/BYTE"
						; 2515	SIGNS DISP	"DISP/SIGNS"
						; 2516	SR DISP		"DISP/SR"
						; 2517	PF DISP		"DISP/PG FAIL"
						; 2518	NORM		"DISP/NORM"
						; 2519	NORM AR		"ADB/AR*4,AD/B,DISP/NORM"
						; 2520	NORM -AR	"ADA EN/0S,ADB/AR*4,AD/A-B,AR/AD*.25,ARX/ADX*.25,DISP/NORM"
						; 2521	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 51
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- I/O OPERATIONS ON EBUS

						; 2522	.TOC	"MACROS -- I/O OPERATIONS ON EBUS"
						; 2523	
						; 2524	AR_EBUS		"AR/EBUS,TIME/5T"
						; 2525	IO INIT		"COND/EBUS CTL,EBUS CTL/IO INIT"
						; 2526	SET DATAO	"COND/EBUS CTL,EBUS CTL/DATAO"
						; 2527	SET DATAI	"COND/EBUS CTL,EBUS CTL/DATAI,AD/0S,AR/AD"
						; 2528	REQ EBUS	"COND/EBUS CTL,EBUS CTL/REQ EBUS"
						; 2529	REL EBUS	"COND/EBUS CTL,EBUS CTL/REL EBUS"
						; 2530	DROP EBUS REQ	"COND/EBUS CTL,EBUS CTL/0"
						; 2531	SKP -EBUS GRANT	"SKIP/-EBUS GRANT"
						; 2532	SKP -EBUS XFER	"SKIP/-EBUS XFER"
						; 2533	SET EBUS DEMAND	"COND/EBUS CTL,EBUS CTL/EBUS DEMAND"
						; 2534	CLR EBUS DEMAND	"COND/EBUS CTL,EBUS CTL/EBUS NODEMAND"
						; 2535	SKP IO LEGAL	"SKIP/IO LEGAL"
						; 2536	SKP PI CYCLE	"SKIP/PI CYCLE"
						; 2537	GET ECL EBUS	"COND/EBUS CTL,EBUS CTL/GRAB EEBUS"
						; 2538	REL ECL EBUS	"COND/EBUS CTL,EBUS CTL/REL EEBUS"
						; 2539	
						; 2540	DIAG OUT	"COND/DIAG FUNC,ADA/AR,AD/A"
						; 2541	DIAG IN		"COND/DIAG FUNC,AR/EBUS"
						; 2542	AR_EBUS REG	"DIAG IN,DIAG FUNC/RD EBUS REG"
						; 2543	AR05_SCD ADDR BRK CYC  "DIAG IN,DIAG FUNC/537"
						; 2544	AR03-04_SCD TRAP CYC   "DIAG IN,DIAG FUNC/530"
						; 2545	DATAO APR	"DIAG OUT,DIAG FUNC/DATAO APR"
						; 2546	DATAI APR(L)	"DIAG IN,DIAG FUNC/DATAI APR"
						; 2547	CONO APR	"DIAG OUT,DIAG FUNC/CONO APR"
						; 2548	CONI APR(L)	"DIAG IN,DIAG FUNC/CONI APR(L)"
						; 2549	CONI APR(R)	"DIAG IN,DIAG FUNC/CONI APR(R)"
						; 2550	CONO PI		"DIAG OUT,DIAG FUNC/CONO PI"
						; 2551	CONI PI(L)	"DIAG IN,DIAG FUNC/CONI PI(L)"
						; 2552	CONI PI(R)	"DIAG IN,DIAG FUNC/CONI PI(R)"
						; 2553	CONI PI(PAR)	"DIAG IN,DIAG FUNC/CONI PI(PAR)"
						; 2554	DATAO PAG(L)	"DIAG OUT,DIAG FUNC/DATAO PAG"
						; 2555	DATAI PAG(L)	"DIAG IN,DIAG FUNC/DATAI PAG(L)"
						; 2556	CONO PAG	"DIAG OUT,DIAG FUNC/CONO PAG"
						; 2557	CONI PAG	"DIAG IN,DIAG FUNC/CONI PAG"
						; 2558	AR_SERIAL	"AR/ARMM,COND/REG CTL,AR CTL/ARR LOAD"
						; 2559	LD PREV CTXT	"COND/DIAG FUNC,DIAG FUNC/LD PCS+CWSX,ADA/PC,AD/A"
						; 2560	
						; 2561	AR_TIME BASE	"DIAG IN,DIAG FUNC/RD TIME"
						; 2562	RD+CLR TB	"SPEC/MTR CTL,AR_TIME BASE"
						; 2563	AR_PERF CNT	"DIAG IN,DIAG FUNC/RD PERF CNT"
						; 2564	RD+CLR PA	"SPEC/MTR CTL,AR_PERF CNT"
						; 2565	AR_EBOX CNT	"DIAG IN,DIAG FUNC/RD EBOX CNT"
						; 2566	RD+CLR E CNT	"SPEC/MTR CTL,AR_EBOX CNT"
						; 2567	AR_CACHE CNT	"DIAG IN,DIAG FUNC/RD CACHE CNT"
						; 2568	RD+CLR C CNT	"SPEC/MTR CTL,AR_CACHE CNT"
						; 2569	AR_INTERVAL	"DIAG IN,DIAG FUNC/RD INTRVL"
						; 2570	AR_PERIOD	"DIAG IN,DIAG FUNC/RD PERIOD"
						; 2571	CONI MTR	"DIAG IN,DIAG FUNC/CONI MTR"
						; 2572	AR_MTR REQ	"DIAG IN,DIAG FUNC/RD MTR REQ"
						; 2573	CONO TIM	"SPEC/MTR CTL,DIAG OUT,DIAG FUNC/CONO TIM"
						; 2574	CONO MTR	"SPEC/MTR CTL,DIAG OUT,DIAG FUNC/CONO MTR"
						; 2575	BLKO TIM(L)	"SPEC/MTR CTL,DIAG OUT,DIAG FUNC/LD PA LEFT"
						; 2576	BLKO TIM(R)	"SPEC/MTR CTL,DIAG OUT,DIAG FUNC/LD PA RIGHT"
						; 2577	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 52
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- MEMORY ACCESS

						; 2578	.TOC	"MACROS -- MEMORY ACCESS"
						; 2579	
						; 2580	LOAD AR		"MEM/LOAD AR"
						; 2581	LOAD ARX	"MEM/LOAD ARX"
						; 2582	LOAD IR		"COND/LOAD IR"
						; 2583	LOAD AR VIA RPW	"MEM/RPW"
						; 2584	EXIT		"DISP/DRAM B,MEM/B WRITE,J/ST0"
						; 2585	EXIT DBL	"MB WAIT,J/ST2AC"	;"I FETCH,J/DSTAC" WHEN TIMING FIXED
						; 2586	STORE		"MEM/WRITE"
						; 2587	B WRITE		"DISP/DRAM B,MEM/B WRITE"
						; 2588	I FETCH		"VMA/PC+1,MEM/FETCH,FETCH/UNCOND"
						; 2589	REFETCH		"VMA/PC,MEM/FETCH,FETCH/UNCOND"
						; 2590	FETCH		"MEM/FETCH,FETCH/UNCOND"
						; 2591	FETCH+1		"COND/VMA INC,MEM/FETCH,FETCH/UNCOND"
						; 2592	COMP FETCH	"AD/XOR,VMA/PC+1,MEM/FETCH,FETCH/COMP"
						; 2593	SKIP FETCH	"ADA/AR,AD/A,VMA/PC+1,MEM/FETCH,FETCH/SKIP"
						; 2594	JUMP FETCH	"VMA/PC+1,MEM/FETCH,FETCH/JUMP"
						; 2595	TEST FETCH	"VMA/PC+1,MEM/FETCH,FETCH/TEST"
						; 2596	JFCL FETCH	"VMA/PC+1,MEM/FETCH,FETCH/JFCL"
						; 2597	CMS FETCH	"VMA/PC+1,MEM/FETCH,FETCH/SKIP"
						; 2598	A READ		"VMA/PC+1,DISP/DRAM A RD,MEM/A RD,#/0,J/0"
						; 2599	A INDRCT	"MEM/A IND,VMA/1"
						; 2600	BYTE READ	"MEM/BYTE RD"
						; 2601	BYTE INDRCT	"MEM/BYTE IND,VMA/1"
						; 2602	
						; 2603	MB WAIT		"MEM/MB WAIT"
						; 2604	FIN STORE	"FMADR/VMA"		;FINISH STOREING
						; 2605	FIN XFER	"FMADR/VMA,ADB/FM,AD/B"	;FINISH XFER WHILE STARTING ANOTHER
						; 2606	AR_MEM		"MEM/MB WAIT,FMADR/VMA,ADB/FM,AD/B"
						; 2607	ARX_MEM		"MEM/MB WAIT,FMADR/VMA,ADB/FM,AD/B"
						; 2608	MEM_AR		"FMADR/VMA,MEM/MB WAIT"
						; 2609	EPT REF		"SPEC/SP MEM CYCLE,SP MEM/EPT"
						; 2610	EPT FETCH	"MEM/LOAD ARX,SPEC/SP MEM CYCLE,SP MEM/EPT FETCH"
						; 2611	UPT REF		"SPEC/SP MEM CYCLE,SP MEM/UPT"
						; 2612	UPT FETCH	"MEM/LOAD ARX,SPEC/SP MEM CYCLE,SP MEM/UPT FETCH"
						; 2613	PT REF		"SPEC/SP MEM CYCLE,SP MEM/PT"
						; 2614	PT FETCH	"MEM/LOAD ARX,SPEC/SP MEM CYCLE,SP MEM/PT FETCH"
						; 2615	PHYS REF	"SPEC/SP MEM CYCLE,SP MEM/UNPAGED"
						; 2616	EXEC REF	"SPEC/SP MEM CYCLE,SP MEM/EXEC"
						; 2617	USER REF	"SPEC/SP MEM CYCLE,SP MEM/USER"
						; 2618	MAP		"MEM/REG FUNC,MREG FNC/MAP"
						; 2619	LOAD EBR	"MEM/REG FUNC,MREG FNC/LOAD EBR"
						; 2620	LOAD UBR	"MEM/REG FUNC,MREG FNC/LOAD UBR"
						; 2621	READ EBR	"MEM/REG FUNC,MREG FNC/READ EBR"
						; 2622	READ UBR	"MEM/REG FUNC,MREG FNC/READ UBR"
						; 2623	READ ERA	"MEM/REG FUNC,MREG FNC/READ ERA"
						; 2624	SWEEP CACHE	"MEM/REG FUNC,MREG FNC/LOAD CCA"
						; 2625	SBUS DIAG	"MEM/REG FUNC,MREG FNC/SBUS DIAG"
						; 2626	WR REFILL RAM	"MEM/REG FUNC,MREG FNC/WR REFILL RAM"
						; 2627	
						; 2628	CLR PT LINE	"COND/MBOX CTL,MBOX CTL/CLR PT LINE"
						; 2629	WR PT ENTRY	"COND/MBOX CTL,MBOX CTL/PT WR"
						; 2630	PT SEL_INVAL	"COND/MBOX CTL,MBOX CTL/PT DIR CLR"
						; 2631	PT SEL_NORMAL	"COND/MBOX CTL,MBOX CTL/NORMAL"
						; 2632	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 53
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- FLAG CONTROL

						; 2633	.TOC	"MACROS -- FLAG CONTROL"
						; 2634	
						; 2635	TRAP1		"COND/PCF_#,PC FLAGS/TRAP1"
						; 2636	TRAP2		"COND/PCF_#,PC FLAGS/TRAP2"
						; 2637	TRAP3		"COND/PCF_#,PC FLAGS/TRAP3"
						; 2638	SET FPD		"COND/PCF_#,PC FLAGS/FPD"
						; 2639	CLR FPD		"SPEC/CLR FPD"
						; 2640	SET AROV	"COND/PCF_#,PC FLAGS/AROV"
						; 2641	SET NO DIVIDE	"COND/PCF_#,PC FLAGS/DIV CHK"
						; 2642	SET FLOV	"COND/PCF_#,PC FLAGS/FLOV"
						; 2643	SET FL NO DIV	"COND/PCF_#,PC FLAGS/FDV CHK"
						; 2644	EXP TEST	"COND/REG CTL,EXP TST/AR_EXP"
						; 2645	
						; 2646	GEN CRY18	"SPEC/GEN CRY18"
						; 2647	INH CRY18	"SPEC/INH CRY18"
						; 2648	AD LONG		"SPEC/AD LONG"
						; 2649	AD FLAGS	"COND/AD FLAGS"
						; 2650	SET FLAGS_AR	"SPEC/FLAG CTL,FLAG CTL/SET FLAGS"
						; 2651	RSTR FLAGS_AR	"SPEC/FLAG CTL,FLAG CTL/RSTR FLAGS"
						; 2652	JFCL T		"SPEC/FLAG CTL,FLAG CTL/JFCL"
						; 2653	JFCL S		"SPEC/FLAG CTL,FLAG CTL/JFCL+LD"
						; 2654	DISMISS		"SPEC/FLAG CTL,FLAG CTL/DISMISS"
						; 2655	PORTAL		"SPEC/FLAG CTL,FLAG CTL/PORTAL"
						; 2656	HALT		"SPEC/FLAG CTL,FLAG CTL/HALT"
						; 2657	
						; 2658	SET PI CYCLE	"COND/SPEC INSTR,SPEC INSTR/SET PI CYCLE"
						; 2659	SET PC+1 INH	"COND/SPEC INSTR,SPEC INSTR/INH PC+1"
						; 2660	CLR INTRPT INH	"COND/SPEC INSTR,SPEC INSTR/0"
						; 2661	TAKE INTRPT	"SKIP/-MTR REQ,J/MTRINT"
						; 2662	ABORT INSTR	"COND/SPEC INSTR,SPEC INSTR/INSTR ABORT"
						; 2663	SET SXCT	"COND/SPEC INSTR,SPEC INSTR/SXCT"
						; 2664	SET PXCT	"COND/SPEC INSTR,SPEC INSTR/PXCT"
						; 2665	SET HALTED	"COND/SPEC INSTR,SPEC INSTR/HALTED"
						; 2666	CONTINUE	"COND/SPEC INSTR,SPEC INSTR/CONT"
						; 2667	SET CONS XCT	"COND/SPEC INSTR,SPEC INSTR/CONS XCT"
						; 2668	
						; 2669	SET IO PF	"COND/MBOX CTL,MBOX CTL/SET IO PF ERR"
						; 2670	
						; 2671	
						; 2672	#OPTIONS	"Q400/Q,Q200/Q,Q100/Q,Q40/Q,Q20/Q,Q10/Q,Q4/Q,Q2/Q,Q1/Q"
						; 2673	
						; 2674	BAG-BITING NO-OP	"FORCE AR-ARX"	;TO FIX GODDAMN TIMING SCREWS
						; 2675	SET MTR PA EN	"COND/EBOX STATE,#/225"
						; 2676	CLR MTR PA EN	"COND/EBOX STATE,#/025"
						; 2677	CLR ACCOUNT EN	"COND/EBOX STATE,#/145"
						; 2678	SET ACCOUNT EN	"COND/EBOX STATE,#/105"
						; 2679	SET TRACKS EN	"COND/EBOX STATE,#/131"
						; 2680	CLR TRACKS EN	"COND/EBOX STATE,#/121"
						; 2681	SET TRK+PA EN	"COND/EBOX STATE,#/231"
						; 2682	CLR TRK+PA EN	"COND/EBOX STATE,#/021"
						; 2683	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 54
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	MACROS -- STATE REGISTER CONTROL

						; 2684	.TOC	"MACROS -- STATE REGISTER CONTROL"
						; 2685	
						; 2686	SR_#		"COND/SR_#"		;USED FOR NON-PAGE-FAIL APPLICATIONS
						; 2687	SR_0		"COND/SR_#,#/0"
						; 2688	SR_1		"COND/SR_#,#/1"
						; 2689	SR_BLT(SRC)	"COND/SR_#,#/607"	;CONTEXT CONTROLLED BY PXCT 2,1
						; 2690	SR_BLT(DST)	"COND/SR_#,#/107"	;  BY PXCT 10,4
						; 2691	.IF/EIS
						; 2692	SR_ED(S)	"COND/SR_#,#/1"
						; 2693	SR_ED(+D)	"COND/SR_#,#/24"
						; 2694	.IF/DECIMAL
						; 2695	SR_DB		"COND/SR_#,#/2"		;D2B ANYWHERE
						; 2696	SR_BDF		"COND/SR_#,#/3"		;B2D STORING FILLERS
						; 2697	SR_BDD		"COND/SR_#,#/6"		;B2D AFTER UPDATING DST PTR
						; 2698	SR_BDT		"COND/SR_#,#/10"	;B2D IN TRANSLATION
						; 2699	.ENDIF/DECIMAL
						; 2700	SR_SRC		"COND/SR_#,#/11"
						; 2701	SR_DST		"COND/SR_#,#/12"
						; 2702	SR_SRC+DST	"COND/SR_#,#/13"
						; 2703	SR_DSTF		"COND/SR_#,#/14"
						; 2704	.ENDIF/EIS
						; 2705	.IF/MAP
						; 2706	SR_MAP		"COND/SR_#,#/15"	;CATCH MAP PAGE FAILURES
						; 2707	.ENDIF/MAP
						; 2708	.IF/LISP
						; 2709	SR_LIST		"COND/SR_#,#/16"	;LISP LIST HACKERY
						; 2710	.ENDIF/LISP
						; 2711	SR_JRSTF	"COND/SR_#,#/17"	;FOR JRSTF ABORT INSTR BUG
						; 2712	
						; 2713	SET SR1		"COND/SR_#,#/64"
						; 2714	SET SR2		"COND/SR_#,#/62"
						; 2715	SET SR3		"COND/SR_#,#/61"
						; 2716	CLR SR2		"COND/SR_#,#/20"
						; 2717	
						; 2718	.TOC	"DISPATCH RAM MACROS"
						; 2719	
						; 2720		.DCODE
						; 2721	
						; 2722	;"A FIELD" MACROS
						; 2723	; DECODED TO TELL WHAT TO DO WITH EFFECTIVE ADDRESS
						; 2724	; AND WHETHER TO PREFETCH FROM PC+1
						; 2725	
						; 2726	I	"A/IMMED"
						; 2727	I-PF	"A/IMMED-PF"
						; 2728	W	"A/WR-TST"
						; 2729	R	"A/READ"
						; 2730	R-PF	"A/READ-PF"
						; 2731	RW	"A/RD-WR"
						; 2732	.IF/RPW
						; 2733	RPW	"A/RD-P-WR"
						; 2734	.IFNOT/RPW
						; 2735	RPW	"A/RD-WR"
						; 2736	.ENDIF/RPW
						; 2737	.IF/WRTST
						; 2738	IW	"A/WR-TST"
						; 2739	.IFNOT/WRTST
						; 2740	IW	"A/IMMED"
						; 2741	.ENDIF/WRTST
						; 2742	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 55
; DSK: UCODE; MACRO 43	17:13:16 20-AUG-2018	DISPATCH RAM MACROS

						; 2743	;"B FIELD" MACROS
						; 2744	; DECODED BY MOST INSTRUCTIONS TO TELL WHERE TO STORE RESULTS,
						; 2745	; BUT USED BY OTHERS TO HOLD VARIOUS "MODE" INFORMATION
						; 2746	
						; 2747	AC	"B/AC"
						; 2748	M	"B/MEM"
						; 2749	S	"B/SELF"
						; 2750	B	"B/BOTH"
						; 2751	DBL AC	"B/DBL AC"
						; 2752	DBL B	"B/DBL BOTH"
						; 2753	FL-AC	"B1-2/AC"
						; 2754	FL-MEM	"B1-2/MEM"
						; 2755	FL-BOTH	"B1-2/BOTH"
						; 2756	
						; 2757	TN-	"B0/CRY0(1),B1-2/0"
						; 2758	TNE	"B0/CRY0(0),B1-2/0"
						; 2759	TNA	"B0/CRY0(0),B1-2/0"
						; 2760	TNN	"B0/CRY0(1),B1-2/0"
						; 2761	TZ-	"B0/CRY0(1),B1-2/1"
						; 2762	TZE	"B0/CRY0(0),B1-2/1"
						; 2763	TZA	"B0/CRY0(0),B1-2/1"
						; 2764	TZN	"B0/CRY0(1),B1-2/1"
						; 2765	TC-	"B0/CRY0(1),B1-2/2"
						; 2766	TCE	"B0/CRY0(0),B1-2/2"
						; 2767	TCA	"B0/CRY0(0),B1-2/2"
						; 2768	TCN	"B0/CRY0(1),B1-2/2"
						; 2769	TO-	"B0/CRY0(1),B1-2/3"
						; 2770	TOE	"B0/CRY0(0),B1-2/3"
						; 2771	TOA	"B0/CRY0(0),B1-2/3"
						; 2772	TON	"B0/CRY0(1),B1-2/3"
						; 2773	
						; 2774	SJC-	"B/SJC-"
						; 2775	SJCL	"B/SJCL"
						; 2776	SJCE	"B/SJCE"
						; 2777	SJCLE	"B/SJCLE"
						; 2778	SJCA	"B/SJCA"
						; 2779	SJCGE	"B/SJCGE"
						; 2780	SJCN	"B/SJCN"
						; 2781	SJCG	"B/SJCG"
						; 2782	
						; 2783	BLKI	"B0/CRY0(0),B1-2/2"
						; 2784	BLKO	"B0/CRY0(0),B1-2/0"
						; 2785	DATAI	"B/6"
						; 2786	DATAO	"B/4"
						; 2787	CONI	"B/6"
						; 2788	CONO	"B/4"
						; 2789	CONSO	"B0/CRY0(1),B1-2/1"
						; 2790	CONSZ	"B0/CRY0(0),B1-2/1"
						; 2791	
						; 2792		.UCODE
						; 2793	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 56
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	DISPATCH RAM MACROS

						; 2794	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 57
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	THE INSTRUCTION LOOP

						; 2795	.TOC	"THE INSTRUCTION LOOP"
						; 2796	
						; 2797	;INSTRUCTION DECODE, EA COMPUTATION, AND OPERAND FETCH
						; 2798	;	IN GENERAL, AN INSTRUCTION IS STARTED AT XCTGO.
						; 2799	; AT THIS TIME THE INSTRUCTION IS IN ARX AND IR, AND PC HAS ITS ADDRESS.
						; 2800	; THE DRAM OUTPUTS AND "AC" BITS WILL SETTLE DURING THIS
						; 2801	; MICROINSTRUCTION, AND WILL BE LATCHED BY THE CLOCK WHICH ENDS
						; 2802	; THE CYCLE.  XCTGO DISPATCHES ON THE STATE OF THE
						; 2803	; INDIRECT AND INDEX BITS OF THE ARX (EA MOD DISP) TO COMPEA OR
						; 2804	; ONE OF THE THREE LOCATIONS FOLLOWING IT.
						; 2805	;	IF INDIRECT IS SPECIFIED, THE INDIRECT POINTER IS FETCHED (AT
						; 2806	; COMPEA+2 OR +3 DEPENDING ON WHETHER INDEXING IS ALSO SPECIFIED).
						; 2807	; WE WAIT FOR IT AT INDRCT, AND THEN LOOP BACK TO COMPEA.  WHEN NO
						; 2808	; INDIRECT IS CALLED FOR, WE COMPUTE THE INSTRUCTION'S EFFECTIVE ADDRESS
						; 2809	; (EA) AT COMPEA OR COMPEA+1 (DEPENDING ON WHETHER INDEXING IS CALLED
						; 2810	; FOR), AND PERFORM THE FUNCTION "A READ", WHOSE OPERATION DEPENDS
						; 2811	; ON THE DRAM A FIELD, AS FOLLOWS:
						; 2812	;
						; 2813	; MACRO	 A-FLD	MEM FUNCTION	VMA	DISPATCH
						; 2814	;  I	  0	NONE		AD(=EA)  DRAM J
						; 2815	; I-PF	  1	FETCH		PC+1	 DRAM J
						; 2816	;	  2	NONE		AD	   42
						; 2817	;  W	  3	WR TST		AD	   43
						; 2818	;  R	  4	READ		AD	   44
						; 2819	; R-PF	  5	READ		AD	   45
						; 2820	; RW	  6	READ/WR TST	AD	   46
						; 2821	; RPW	  7	RD-PSE/WR TST	AD	   47
						; 2822	;
						; 2823	;	A FIELD VALUES 0 AND 1 ARE USED FOR INSTRUCTIONS WHICH NEITHER
						; 2824	; READ NOR WRITE THE CONTENTS OF EA (IMMEDIATE-MODE INSTRUCTIONS,
						; 2825	; JUMPS, ETC).  THESE DISPATCH FROM "A READ" DIRECTLY TO THE MICROCODE
						; 2826	; WHICH HANDLES THE INSTRUCTION.  IF THE A FIELD CONTAINS 1, "A READ"
						; 2827	; CAUSES A PREFETCH (FROM PC+1), SO THAT THE MBOX CAN WORK ON GETTING
						; 2828	; THE NEXT INSTRUCTION INTO ARX WHILE THE EBOX PERFORMS THIS ONE.
						; 2829	;	IF THE A FIELD CONTAINS 3, THE MBOX PERFORMS A PAGING CHECK ON
						; 2830	; EA, AND CAUSES A PAGE FAIL IF THAT LOCATION IS NOT WRITABLE.
						; 2831	; THE MICROCODE GOES TO 43 TO WAIT FOR COMPLETION OF THE PAGE CHECK,
						; 2832	; AND AT THAT LOCATION LOADS AC INTO AR.  THE WRITABILITY OF EA IS
						; 2833	; VERIFIED AT THIS TIME TO PREVENT INCORRECTLY SETTING FLAGS OR
						; 2834	; THE PROCESSOR STATE IF THE INSTRUCTION WILL BE ABORTED BY PAGE
						; 2835	; FAILURE.  LOCATION 43 THEN DISPATCHES TO THE HANDLER FOR THE
						; 2836	; CURRENT INSTRUCTION.
						; 2837	;	A FIELD VALUES 4 TO 7 PERFORM READS FROM EA.  6 AND 7 ALSO TEST
						; 2838	; THE WRITABILITY OF THE LOCATION, AND 7 PERFORMS THE FIRST HALF OF
						; 2839	; A READ-PAUSE-WRITE CYCLE IF EA IS AN UN-CACHED ADDRESS.  THE DISPATCH
						; 2840	; IS TO 40+A, WHERE WE WAIT FOR MEMORY DATA TO ARRIVE IN AR.  IF THE A
						; 2841	; FIELD WAS 5, WE PREFETCH FROM PC+1 AS SOON AS THE DATA ARRIVES.
						; 2842	; IN ANY CASE, WE DISPATCH ACCORDING TO THE DRAM J FIELD TO THE
						; 2843	; HANDLER FOR THE INSTRUCTION.
						; 2844	;	IF A PAGE FAIL OCCURS AT ANY TIME (EITHER IN THIS CODE OR DURING
						; 2845	; INSTRUCTION EXECUTION) THE MICROPROCESSOR TRAPS TO CRAM LOCATION
						; 2846	; 1777, WHERE IT CAUSES A PAGE FAIL TRAP.
						; 2847	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 58
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	THE INSTRUCTION LOOP

						; 2848	;	MOST INSTRUCTIONS (THE MOVE, HALFWORD, AND BOOLEAN GROUPS,
						; 2849	; PLUS ADD AND SUB) ARE PERFORMED BY HANDLERS CONSISTING OF ONE OR
						; 2850	; TWO MICROINSTRUCTIONS WHICH LEAVE THE RESULT IN AR, AND COMPLETE
						; 2851	; BY INVOKING THE "EXIT" MACRO.  EXIT USES THE MEM/B WRITE FUNCTION
						; 2852	; TO BEGIN A STORE TO MEMORY FOR THOSE MODES IN WHICH THE RESULT
						; 2853	; GOES TO MEMORY, AND DISP/DRAM B TO GET TO ONE OF THE MICROINSTRUCTIONS
						; 2854	; FOLLOWING ST0.  THIS CODE DEPENDS ON A CERTAIN AMOUNT OF CORRELATION
						; 2855	; BETWEEN THE DRAM A AND B FIELDS.  IN PARTICULAR, STAC (STORE AC)
						; 2856	; ASSUMES THAT A PREFETCH HAS OCCURRED, WHILE THE OTHERS ASSUME THAT
						; 2857	; NO PREFETCH HAS OCCURED.  THUS NORMAL AND IMMEDIATE MODES, WHOSE
						; 2858	; RESULTS GO ONLY TO AC, MUST PREFETCH IN THE DRAM A FIELD, WHILE
						; 2859	; MEM, BOTH, AND SELF MODES, WHOSE RESULTS GO TO MEMORY, MUST NOT.
						; 2860	; (THIS RESTRICTION IS AVOIDED FOR THOSE INSTRUCTIONS WHICH NEVER
						; 2861	; PREFETCH -- IN MUL, DIV, AND IDIV BY USE OF THE EXIT TO ST2AC,
						; 2862	; AND IN IMUL AND THE SINGLE PRECISION FLOATING POINT
						; 2863	; INSTRUCTIONS BY A RESTRICTED EXIT TO ST6.)
						; 2864	;	ANOTHER LARGE SET OF INSTRUCTIONS (SKIP, AOS, SOS, JUMP, AOJ,
						; 2865	; SOJ, AOBJ, CAI, CAM, AND THE TEST GROUP) KNOWS WHERE TO PUT THE
						; 2866	; RESULTS WITHOUT MODE INFORMATION, AND THEY USE THE DRAM B FIELD TO
						; 2867	; DETERMINE WHETHER TO SKIP OR JUMP, AS A FUNCTION OF THEIR OPERANDS.
						; 2868	; SKIP, AOS, AND SOS ARE CONSIDERED SELF-MODE INSTRUCTIONS,
						; 2869	; AND AFTER MAKING THE FETCH DECISION (AND RE-WRITING MEMORY, IN
						; 2870	; THE CASE OF AOS OR SOS), JUMP TO STSELF TO DECIDE WHETHER OR NOT
						; 2871	; TO PUT THE RESULT ALSO IN AC.  THE OTHER INSTRUCTIONS OF THIS SET
						; 2872	; JUMP TO STORAC OR NOP AFTER MAKING THE FETCH DECISION, DEPENDING
						; 2873	; ON WHETHER OR NOT THE OPCODE DEFINITION REQUIRES MODIFICATION OF AC.
						; 2874	; (NOTE THE DIFFERENCE BETWEEN STAC AND FINI ON THE ONE HAND,
						; 2875	; AND STORAC AND NOP ON THE OTHER -- STORAC AND NOP MUST BE USED WHEN
						; 2876	; THE NEXT INSTRUCTION FETCH OCCURS ON THE PRECEDING EBOX CYCLE, BECAUSE
						; 2877	; NICOND MUST NOT IMMEDIATELY FOLLOW A FETCH (ONE CYCLE REQUIRED FOR
						; 2878	; VMA AC REF TO MAKE IT THROUGH THE NICOND LOGIC), STAC AND FINI ARE
						; 2879	; USED WHEN THERE HAS BEEN AN INTERVENING CYCLE.)
						; 2880	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 59
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	NEXT INSTRUCTION DISPATCH

						; 2881	.TOC	"NEXT INSTRUCTION DISPATCH"
						; 2882	
						; 2883	;START BY PUTTING PC WORD IN AR, JUMP HERE
						; 2884	0:
U 0000, 0243,0001,0040,0000,0000,0024,0020	; 2885	START:	SET FLAGS_AR,BR/AR,J/BRJMP	;LOAD UP FLAGS
U 0001, 0010,0001,0000,0000,0106,0010,0400	; 2886	CONT:	VMA/PC,FETCH,J/XCTW		;HERE TO CONTINUE FROM PC
						; 2887	
						; 2888	;	DISP/NICOND (THE "NXT INSTR" MACRO) BRINGS US TO ONE OF THE
						; 2889	; LOCATIONS FOLLOWING "NEXT".  PC HAS BEEN UPDATED TO ADDRESS THE NEXT
						; 2890	; INSTRUCTION IN THE NORMAL FLOW, AND IF IT IS FROM MEMORY
						; 2891	; (AS OPPOSED TO AC'S), THE INSTRUCTION IS IN ARX AND IR.
						; 2892	;	THE NICOND DISPATCH IS PRIORITY ENCODED, AS FOLLOWS:
						; 2893	; [FOR FULL DETAILS, SEE PRINT CON2]
						; 2894	;(1)	IF PI CYCLE IS TRUE, GO TO NEXT FOR SECOND HALF
						; 2895	; OF STANDARD OR VECTOR INTERRUPT.
						; 2896	;(2)	IF THE RUN FLOP (CON RUN) IS OFF, GO TO NEXT+2, FROM WHICH THE
						; 2897	; MICROCODE WILL ENTER THE HALT LOOP TO WAIT FOR THE CONSOLE TO RESTART
						; 2898	; INSTRUCTION PROCESSING.
						; 2899	;(3)	IF THE METER HAS A REQUEST, GO TO NEXT+4 (MTRINT) TO SERVE IT.
						; 2900	;(4)	IF THE PI SYSTEM HAS A REQUEST READY, GO TO NEXT+6 (INTRPT)
						; 2901	; TO START A PI CYCLE.
						; 2902	;(5)	IF CON UCODE STATE 05 (TRACK EN) IS SET, GO TO NEXT+10 OR 11.
						; 2903	; THIS FLOP IS ENTIRELY UNDER CONTROL OF THE MICROCODE, AND IS ONLY
						; 2904	; USED FOR THE SPECIAL STATISTICS-GATHERING MICROCODE.
						; 2905	;(6)	IF THE LAST INSTRUCTION SET A TRAP FLAG, GO TO NEXT+13 OR +17,
						; 2906	; IT DOESN'T MATTER WHICH.
						; 2907	;(7)	IF VMA CONTAINS AN AC ADDRESS, IMPLYING THAT THE NEXT
						; 2908	; INSTRUCTION IS TO COME OUT OF FAST MEMORY, GO TO NEXT+16 TO GET IT.
						; 2909	;(10)	--NORMAL CASE-- THE INSTRUCTION IS IN ARX, READY TO GO, GO
						; 2910	; TO NEXT+12 (XCTGO).
						; 2911	
						; 2912	=11*0000				;USE LOC'NS INACCESSIBLE TO DRAM
						; 2913	NEXT:	SET PI CYCLE,GEN FE,		;2ND PART OF INTERRUPT
U 0140, 1446,4001,0000,0000,0020,1534,0714	; 2914			BYTE DISP,J/PICYC2	;SKIP IF VECTOR INT
U 0142, 0050,3441,2000,0000,0000,1510,0302	; 2915	=0010	AR_0S,SET HALTED,J/HALT1	;HERE IF RUN FLOP OFF
						; 2916	=0100
U 0144, 1366,0001,0000,0000,0000,2110,0145	; 2917	MTRINT:	CLR ACCOUNT EN,J/MTRREQ		;HERE IF METER REQUEST UP
U 0145, 1441,4001,3000,0302,0060,0010,0002	; 2918		AR_EBUS,SC_#,#/2,J/PICYC1	;HERE IF TAKE INTRPT DOESNT FIND
						; 2919	=0110					; A METER REQUEST
U 0146, 1441,4001,3000,0302,0060,0010,0002	; 2920	INTRPT:	AR_EBUS,SC_#,#/2,J/PICYC1	;HERE IF INTERRUPT PENDING
						; 2921	.IF/TRACKS
						; 2922	=1000	AR_TRX+1,GEN CRY18,SKP CRY0,J/TRK1	;HERE TO STORE PC BEFORE
						; 2923		AR_TRX+1,GEN CRY18,SKP CRY0,J/TRK1	; EXECUTING NEXT INSTR
						; 2924	.ENDIF/TRACKS
						; 2925	.IF/OP.CNT
						; 2926	=1000	SC_#,#/9.,SKP USER,J/OPCT1	;COUNT THIS INSTR
						; 2927		SC_#,#/9.,SKP USER,J/OPCT1
						; 2928	.ENDIF/OP.CNT
						; 2929	.IF/OP.TIME
						; 2930	=1000	AR_2,CLR TRK+PA EN,J/OPTM1	;TIME OUT THIS INSTR
						; 2931		AR_2,CLR TRK+PA EN,J/OPTM1
						; 2932	.ENDIF/OP.TIME
						; 2933	;-- THE NICOND DISPATCH BLOCK CONTINUES ON THE NEXT PAGE --
						; 2934	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 60
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	NEXT INSTRUCTION DISPATCH

						; 2935	;-- NICOND DISPATCH CONTINUED --
						; 2936	
						; 2937	=1010
						; 2938	XCTGO:	BRX/ARX,SET ACCOUNT EN,		;SAVE INSTR, ENABLE ACCOUNTING,
U 0152, 0160,2341,2020,0000,0000,2136,0105	; 2939		    EA MOD DISP,J/COMPEA,AR_1S	;GO CALCULATE EA, -1 FOR SOJ HACK
						; 2940	.IFNOT/ONE PROCEED
						; 2941	TRAP:	VMA_420+TRAP,J/TRAPX		;HERE IF TRAP BITS SET
						; 2942	.IF/ONE PROCEED
U 0153, 0002,0001,0000,4402,0000,2210,0400	; 2943	TRAP:	GET ECL EBUS,SC_1,J/TR3CHK	;TRAP, CHECK FOR ONE PROCEED
						; 2944	.ENDIF/ONE PROCEED
U 0156, 0152,3240,0203,0000,0020,1410,0000	; 2945	=1110	ARX_FM(VMA),TIME/3T,LOAD IR,J/XCTGO	;HERE IF INSTR IS IN FM
						; 2946	.IFNOT/ONE PROCEED
						; 2947		VMA_420+TRAP,J/TRAPX		;HERE IF TRAP BITS SET
						; 2948	.IF/ONE PROCEED
						; 2949		ARX_FM(VMA),TIME/3T,LOAD IR,	;HERE IF TRAP AND VMA->ACS
U 0157, 0153,3200,0203,0000,0020,1410,0000	; 2950			J/TRAP			;FETCH THE INSTR THEN TRAP
						; 2951	.ENDIF/ONE PROCEED
						; 2952	
						; 2953	.IF/ONE PROCEED
						; 2954	;HERE ON TRAPS, WITH INSTRUCTION IN ARX AND IR, 1 IN SC,
						; 2955	;AND ECL EBUS GRABBED.  UNFORTUNATELY THE HARDWARE CAREFULLY
						; 2956	;CLEARS THE TRAP BITS IN THE PC WORD ON A NICOND, BUT
						; 2957	;WE CAN USE A DIAGNOSTIC FUNCTION TO READ THE TRAP CYC BITS (SCD4).
						; 2958	;THE "ADDRESS BREAK INHIBIT" HAIR (SCD5) IS USED TO
						; 2959	;DETECT WHEN AN INSTRUCTION IS COMPLETED.
						; 2960	;IF THIS IS A TRAP 3, AND SCD ADDR BRK CYC IS TRUE, WE ARE
						; 2961	;IN THE MIDDLE OF A ONE-PROCEED, SO SUPPRESS THE TRAP.
						; 2962	;SCD ADDR BRK CYC IS ON WHEN NICOND IS DONE WITH
						; 2963	;ADR BRK INH SET IN THE PC FLAGS (I.E. JUST STARTING
						; 2964	;OR RE-STARTING THE INSTRUCTION BEING ONE-PROCEEDED.)
						; 2965	
U 0002, 0003,0001,3000,0000,0000,2010,0530	; 2966	TR3CHK:	AR03-04_SCD TRAP CYC
U 0003, 0034,4001,0000,0000,0140,3107,0420	; 2967		VMA_420+TRAP,SH DISP,J/TR3DSP	;VMA -> TRAP INST, CHECK TRAP NUMBER
						; 2968	=11100
						; 2969	TR3DSP:
						; 2970	=01
U 0035, 0006,4001,0000,0000,0000,2210,0000	; 2971		REL ECL EBUS,J/TRAPX		;TRAP 1 - TAKE TRAP
U 0036, 0006,4001,0000,0000,0000,2210,0000	; 2972		REL ECL EBUS,J/TRAPX		;TRAP 2 - TAKE TRAP
U 0037, 0004,0001,3000,0000,0000,2010,0537	; 2973		AR05_SCD ADDR BRK CYC		;TRAP 3 - CHECK FOR ONE PROCEED
U 0004, 0020,0001,0000,7100,0020,5210,0000	; 2974		GEN P AND SC,SKP SCAD NE	;SKIP IF ONE-PROCEEDING
						; 2975	=1***0
U 0020, 0006,4001,0000,0000,0000,2210,0000	; 2976		REL ECL EBUS,J/TRAPX		;NO, TAKE THE TRAP
U 0021, 0005,4001,0000,0000,0000,2210,0000	; 2977		REL ECL EBUS			;YES, DO THE INSTR THEN
U 0005, 0152,4001,0000,0000,0000,1110,0060	; 2978		TRAP3,J/XCTGO			;ARRANGE FOR ANOTHER TRAP
						; 2979						;WHEN THE INSTRUCTION COMPLETES
						; 2980	.ENDIF/ONE PROCEED
						; 2981	
						; 2982	;HERE ON TRAPS, VMA SETUP WITH 420+TRAP CODE
						; 2983	
U 0006, 0007,0001,0000,0000,0013,0026,0031	; 2984	TRAPX:	LOAD ARX,PT REF			;GET AND XCT TRAP INSTR
U 0007, 0010,0001,0000,0000,0000,1510,0100	; 2985		SET PC+1 INH			;DON'T INCREMENT PC FOR THIS INSTR
						; 2986	
						; 2987	;HERE AFTER FETCHING INSTR TO BE EXECUTED
						; 2988	
U 0010, 0152,3240,0003,0000,0022,1410,0000	; 2989	XCTW:	ARX_MEM,LOAD IR,J/XCTGO		;GET INSTR TO XCT
						; 2990	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 61
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	EFFECTIVE ADDRESS COMPUTATION AND OPERAND FETCH

						; 2991	.TOC	"EFFECTIVE ADDRESS COMPUTATION AND OPERAND FETCH"
						; 2992	
						; 2993	;COME HERE WITH -1 IN AR IF YOU EXPECT SOJ TO WORK!
						; 2994	=11***00				;HERE WITH XR CALC IN PROG
						; 2995	COMPEA:	AR_ARX (AD),A READ,		;NO MOD, GET OPERAND IF ANY
U 0160, 0000,3711,2010,0000,1204,0002,0000	; 2996			MQ_AR			;SOJ SERIES EXPECTS -1 IN MQ
						; 2997		AR_ARX+XR,A READ,		;INDEXED, NO @
U 0161, 0000,0610,2012,0000,1224,0002,0000	; 2998			MQ_AR			;SOJ SERIES EXPECTS -1 IN MQ
						; 2999		GEN ARX,A INDRCT,		;DO INDIRECT, NO INDEX
U 0162, 0150,3713,0000,0000,0110,7010,0000	; 3000			SKP INTRPT,J/INDRCT
						; 3001		GEN ARX+XR,A INDRCT,		;BOTH @ AND XR
U 0163, 0150,0610,0002,4000,0130,7010,0000	; 3002			SKP INTRPT,J/INDRCT
						; 3003	=11****0
U 0150, 0011,3240,0003,0000,0022,0010,0000	; 3004	INDRCT:	ARX_MEM,J/INDLP			;GET INDIRECT POINTER, EVAL
U 0151, 0144,3200,0003,0000,0022,7710,0000	; 3005	TAKINT:	ARX_MEM,TAKE INTRPT		;INTERRUPT DURING INDIRECT
						; 3006	
						; 3007	;APPARENTLY  A INDRCT  AT COMPEA+2/+3 CAN
						; 3008	; CAUSE AR AS WELL AS ARX TO BE CLOBBERED BY ARX_MEM.
						; 3009	;HENCE WE MUST RESTORE THE -1 THAT THE  SOJ  SERIES DEPENDS ON.
						; 3010	
U 0011, 0160,2341,2000,0000,0000,0036,0000	; 3011	INDLP:	EA MOD DISP,AR_1S,J/COMPEA	;EVALUATE POINTER
						; 3012	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 62
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	WAIT FOR (E)

						; 3013	.TOC	"WAIT FOR (E)"
						; 3014	
						; 3015	;THE EXECUTE CODE FOR EACH INSTRUCTION IS ENTERED WITH
						; 3016	; THE OPCODE AND AC # IN BRX AND IR, THE LAST INDIRECT WORD
						; 3017	; IN ARX, AND AR AND VMA SETUP AS A FUNCTION OF THE A
						; 3018	; FIELD OF THE DISPATCH RAM. A PREFETCH IS IN PROGRESS IF THE
						; 3019	; DRAM A FIELD WAS 1 OR 5 (OR IF IR CONTAINS "JRST 0,").
						; 3020	
						; 3021	;ON "A READ", THE HARDWARE DISPATCHES TO THE EXECUTE CODE FOR
						; 3022	; THE INSTRUCTION IF THE DRAM A FIELD IS 0 OR 1.  IF THE A FIELD
						; 3023	; CONTAINS 2-7, THE HARDWARE DISPATCHES TO 40+A, BELOW:
						; 3024	
						; 3025	;COME HERE ON "A READ" FUNCTION IF DRAM A FIELD IS 3
						; 3026	; A "WRITE TST" IS IN PROGRESS
						; 3027	
						; 3028	43:	BR/AR,AR_AC0,MB WAIT,		;WAIT FOR PERMISSION TO WRITE
U 0043, 0000,3240,2040,0000,0022,0001,0000	; 3029			TIME/3T,IR DISP,J/0	;AND GO TO EXECUTE CODE
						; 3030	
						; 3031	;HERE ON "A READ" FUNCTION IF DRAM A FIELD IS 4
						; 3032	; A "LOAD AR" IS IN PROGRESS
						; 3033	
						; 3034	44:	BR/AR,AR_MEM,TIME/3T,		;GET OPERAND
U 0044, 0000,3200,0043,0000,0022,0001,0000	; 3035			IR DISP,J/0		; START EXECUTE
						; 3036	
						; 3037	;HERE ON "A READ" IF A FIELD IS 5
						; 3038	; A "LOAD AR" IS IN PROGRESS, AND WE MUST PREFETCH WHEN IT COMPLETES
						; 3039	
						; 3040	45:	BR/AR,FIN XFER,I FETCH,		;GET OPERAND, PREFETCH,
U 0045, 0000,3240,0043,0000,0226,0001,0400	; 3041			TIME/3T,IR DISP,J/0	; & START EXECUTE
						; 3042	
						; 3043	;HERE ON "A READ" IF A FIELD IS 6
						; 3044	; A "LOAD AR" IS IN PROGRESS, BUT PAGING IS TESTING WRITABILITY
						; 3045	
						; 3046	46:	BR/AR,AR_MEM,TIME/3T,		;GET OPERAND
U 0046, 0000,3200,0043,0000,0022,0001,0000	; 3047			IR DISP,J/0		; START EXECUTE
						; 3048	
						; 3049	;HERE ON "A READ" IF A FIELD IS 7
						; 3050	; A "READ-PAUSE-WRITE" IS IN PROGRESS
						; 3051	
						; 3052	47:	BR/AR,AR_MEM,TIME/3T,		;GET OPERAND
U 0047, 0000,3200,0043,0000,0022,0001,0000	; 3053			IR DISP,J/0		; START EXECUTE
						; 3054	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 63
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	TERMINATION

						; 3055	.TOC	"TERMINATION"
						; 3056	
						; 3057	;DISPATCH HERE WITH THE "EXIT" MACRO,
						; 3058	; OR JUMP DIRECTLY TO ONE OF THESE LOCATIONS.
						; 3059	
						; 3060	=11*000
						; 3061	ST0:					;BASE FOR B DISP IN EXIT MACRO
						; 3062	=001
U 0061, 0014,5441,2000,0000,0226,1016,0400	; 3063	ST2AC:	AC0_AR,AR_SIGN,I FETCH,J/STD1	;HERE TO STORE AC0 & AC1
U 0062, 0061,4001,0003,0000,0002,0010,0000	; 3064		FIN STORE,EXIT DBL		;MULB, DIVB, ETC ...
						; 3065		FIN STORE,I FETCH,		;SELF MODE
U 0063, 0070,4001,0003,0000,0206,4610,0400	; 3066			SKP AC#0,J/STSELF	; RESULT TO AC TOO?
						; 3067	=101
U 0065, 0140,0001,0000,0000,0002,1006,0000	; 3068	STAC:	AC0_AR,NXT INSTR		;NORMAL AND IMMEDIATE MODES
						; 3069	ST6:
						; 3070	IFNOP:
U 0066, 0071,4001,0003,0000,0206,0010,0400	; 3071	STMEM:	FIN STORE,I FETCH,J/NOP		;MEM MODE
						; 3072	IFSTAC:
U 0067, 0070,0001,0003,0000,0206,0010,0400	; 3073	STBOTH:	FIN STORE,I FETCH,J/STORAC	;BOTH MODE
						; 3074	=
						; 3075	;HERE TO FINISH, AFTER FETCHING NEXT INSTRUCTION.
						; 3076	; WE MUST GUARANTEE AT LEAST ONE EBOX CYCLE BETWEEN FETCH AND NICOND,
						; 3077	; TO ALLOW VMA AC REF TO MAKE IT THROUGH THE NICOND LOGIC.
						; 3078	=11***0
						; 3079	STSELF:					;SKIP, AOS, SOS COME HERE
U 0070, 0065,0001,0000,0000,0000,1610,0000	; 3080	STORAC:	SR_0,J/STAC			;STORE AC, TOO
U 0071, 0012,4001,0000,0000,0000,0010,0000	; 3081	NOP:	J/FINI				;DELAY THEN NXT INSTR
						; 3082	
						; 3083	.IF/JPC SUPPORT
						; 3084	=11*110
						; 3085	NJPCP:	AR_PC,SKP USER,J/JPCEX		;FOR JPC HACK - SKIP IF NOT JUMPING
						; 3086	.ENDIF/JPC SUPPORT
U 0012, 0140,0001,0000,0000,0002,1606,0000	; 3087	FINI:	SR_0,NXT INSTR			;GET NEXT INSTR IN ARX & IR,
						; 3088						; LOAD PC, TEST PI CYCLE, RUN,
						; 3089						; PI READY, TRAPS
						; 3090	
						; 3091	;HERE TO STORE ARITHMETIC DOUBLE RESULTS
						; 3092	
U 0013, 0014,5441,2000,0000,0020,1016,0000	; 3093	DSTAC:	AC0_AR,AR_SIGN			;HERE WITH FETCH STARTED
U 0014, 0015,0001,4000,0000,0000,1610,0000	; 3094	STD1:	AR_SHIFT,SR_0			;BRING IN LOW PART
U 0015, 0140,4001,0001,0000,0002,1006,0000	; 3095	STAC1:	AC1_AR,NXT INSTR AFTER AC1	;STORE AC1
						; 3096	
						; 3097	
						; 3098	;HERE TO GET MICRO-CODE VERSION #.  FIXED LOC'N SO SOFTWARE CAN FIND IT
						; 3099	137:
U 0137, 1474,4001,0040,0000,0000,0110,0126	; 3100	UVERS:	BR/AR,AR0-8_#,#/VERS,J/GTAR08	;COPY VERSION TO AR
						; 3101	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 64
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	MOVE GROUP, EXCH, BLT

						; 3102	.TOC	"MOVE GROUP, EXCH, BLT"
						; 3103	
						; 3104		.DCODE
D 0200, 5500,0200				; 3105	200:	R-PF,	AC,	J/MOVE	;BASIC MOVE
D 0201, 1501,0200				; 3106		I-PF,	AC,	J/MOVE
						; 3107	.IF/WRTST
						; 3108		W,	M,	J/MOVE
						; 3109	.IFNOT/WRTST
D 0202, 0100,0202				; 3110		I,	B/1,	J/MOVEM
						; 3111	.ENDIF/WRTST
D 0203, 7301,0200				; 3112		RPW,	S,	J/MOVE
						; 3113	
D 0204, 5500,0100				; 3114	204:	R-PF,	AC,	J/MOVS
D 0205, 1501,0100				; 3115		I-PF,	AC,	J/MOVS
D 0206, 3600,0100				; 3116		W,	M,	J/MOVS
D 0207, 7301,0100				; 3117		RPW,	S,	J/MOVS
						; 3118	
D 0210, 5501,0102				; 3119	210:	R-PF,	AC,	J/MOVN
D 0211, 1500,0102				; 3120		I-PF,	AC,	J/MOVN
D 0212, 3601,0102				; 3121		W,	M,	J/MOVN
D 0213, 7300,0102				; 3122		RPW,	S,	J/MOVN
						; 3123	
D 0214, 5501,0101				; 3124	214:	R-PF,	AC,	J/MOVM
D 0215, 1500,0101				; 3125		I-PF,	AC,	J/MOVM
D 0216, 3601,0101				; 3126		W,	M,	J/MOVM
D 0217, 7300,0101				; 3127		RPW,	S,	J/MOVM
						; 3128		.UCODE
						; 3129	
						; 3130	; ENTER WITH 0,E, (E), OR (AC) IN AR
						; 3131	
						; 3132	=00****
U 0100, 0060,4001,4000,0000,3005,0033,0000	; 3133	MOVS:	AR_AR SWAP,EXIT			;ALSO USED BY HALFWORD GROUP
						; 3134	=
						; 3135	=00****
U 0101, 0200,0001,0040,0000,0000,4510,0000	; 3136	MOVM:	BR/AR,SKP AR0,J/MOVE		;FORCE POSITIVE
						; 3137	=
						; 3138	=00****
U 0102, 0201,0001,0040,0000,0000,0010,0000	; 3139	MOVN:	BR/AR,J/MOVNEG			;GET NEGATIVE
						; 3140	=
						; 3141	=00*000
U 0200, 0060,0001,0000,0000,0005,0033,0000	; 3142	MOVE:	EXIT				;STORE AS IS FROM AR
U 0201, 0200,5142,2000,0000,0022,1310,0000	; 3143	MOVNEG:	AR_-BR,AD FLAGS,FETCH WAIT,J/MOVE
						; 3144	
						; 3145	;EXCH, BLT
						; 3146	
						; 3147		.DCODE
D 0250, 7000,0202				; 3148	250:	RPW,	B/0,	J/EXCH
D 0251, 0000,0203				; 3149		I,		J/BLT
						; 3150		.UCODE
						; 3151	
						; 3152	=00***0
						; 3153	MOVEM:					;LIKE EXCH, EXCEPT NO STORE AC
U 0202, 0154,3200,2400,0000,1036,0010,0000	; 3154	EXCH:	ARX_AR,AR_AC0,STORE,J/STMAC	;PUT AC AT E, THEN STORE AC
						; 3155	
						; 3156	BLT:	MQ_AR,ARX_AR,			;END ADDR TO MQ & ARX
U 0203, 1755,3200,2410,0000,1020,0610,0000	; 3157			ARR_AC0,ARL_ARL,J/BLT1	;FIRST DEST ADDR TO AR
						; 3158	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 65
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	HALFWORD GROUP

						; 3159	.TOC	"HALFWORD GROUP"
						; 3160	;	DESTINATION LEFT HALF
						; 3161	
						; 3162		.DCODE
D 0500, 5500,0205				; 3163	500:	R-PF,	AC,	J/HLL
D 0501, 1501,0205				; 3164		I-PF,	AC,	J/HLL
D 0502, 7600,0204				; 3165		RPW,	M,	J/HRR		;HLLM = HRR EXCEPT FOR STORE
D 0503, 7301,0200				; 3166		RPW,	S,	J/MOVE		;HLLS = MOVES
						; 3167	
D 0504, 5500,0103				; 3168		R-PF,	AC,	J/HRL
D 0505, 1501,0103				; 3169		I-PF,	AC,	J/HRL
D 0506, 7601,0106				; 3170		RPW,	M,	J/HRLM
D 0507, 7300,0107				; 3171		RPW,	S,	J/HRLS
						; 3172	
D 0510, 5500,0212				; 3173	510:	R-PF,	AC,	J/HLLZ
D 0511, 1501,0212				; 3174		I-PF,	AC,	J/HLLZ
D 0512, 3600,0212				; 3175		W,	M,	J/HLLZ
D 0513, 7301,0212				; 3176		RPW,	S,	J/HLLZ
						; 3177	
D 0514, 5500,0206				; 3178		R-PF,	AC,	J/HRLZ
D 0515, 1501,0206				; 3179		I-PF,	AC,	J/HRLZ
D 0516, 3600,0206				; 3180		W,	M,	J/HRLZ
D 0517, 7301,0206				; 3181		RPW,	S,	J/HRLZ
						; 3182	
D 0520, 5501,0213				; 3183	520:	R-PF,	AC,	J/HLLO
D 0521, 1500,0213				; 3184		I-PF,	AC,	J/HLLO
D 0522, 3601,0213				; 3185		W,	M,	J/HLLO
D 0523, 7300,0213				; 3186		RPW,	S,	J/HLLO
						; 3187	
D 0524, 5501,0207				; 3188		R-PF,	AC,	J/HRLO
D 0525, 1500,0207				; 3189		I-PF,	AC,	J/HRLO
D 0526, 3601,0207				; 3190		W,	M,	J/HRLO
D 0527, 7300,0207				; 3191		RPW,	S,	J/HRLO
						; 3192	
D 0530, 5501,0116				; 3193	530:	R-PF,	AC,	J/HLLE
D 0531, 1500,0116				; 3194		I-PF,	AC,	J/HLLE
D 0532, 3601,0116				; 3195		W,	M,	J/HLLE
D 0533, 7300,0116				; 3196		RPW,	S,	J/HLLE
						; 3197	
D 0534, 5500,0114				; 3198		R-PF,	AC,	J/HRLE
D 0535, 1501,0114				; 3199		I-PF,	AC,	J/HRLE
D 0536, 3600,0114				; 3200		W,	M,	J/HRLE
D 0537, 7301,0114				; 3201		RPW,	S,	J/HRLE
						; 3202	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 66
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	HALFWORD GROUP

						; 3203	;	DESTINATION RIGHT HALF
						; 3204	
D 0540, 5501,0204				; 3205	540:	R-PF,	AC,	J/HRR
D 0541, 1500,0204				; 3206		I-PF,	AC,	J/HRR
D 0542, 7601,0205				; 3207		RPW,	M,	J/HLL		;HRRM = HLL EXCEPT FOR STORE
D 0543, 7301,0200				; 3208		RPW,	S,	J/MOVE		;HRRS = MOVES
						; 3209	
D 0544, 5501,0104				; 3210		R-PF,	AC,	J/HLR
D 0545, 1500,0104				; 3211		I-PF,	AC,	J/HLR
D 0546, 7600,0110				; 3212		RPW,	M,	J/HLRM
D 0547, 7301,0111				; 3213		RPW,	S,	J/HLRS
						; 3214	
D 0550, 5500,0112				; 3215	550:	R-PF,	AC,	J/HRRZ
D 0551, 1501,0112				; 3216		I-PF,	AC,	J/HRRZ
D 0552, 3600,0112				; 3217		W,	M,	J/HRRZ
D 0553, 7301,0112				; 3218		RPW,	S,	J/HRRZ
						; 3219	
D 0554, 5501,0210				; 3220		R-PF,	AC,	J/HLRZ
D 0555, 1500,0210				; 3221		I-PF,	AC,	J/HLRZ
D 0556, 3601,0210				; 3222		W,	M,	J/HLRZ
D 0557, 7300,0210				; 3223		RPW,	S,	J/HLRZ
						; 3224	
D 0560, 5501,0113				; 3225	560:	R-PF,	AC,	J/HRRO
D 0561, 1500,0113				; 3226		I-PF,	AC,	J/HRRO
D 0562, 3601,0113				; 3227		W,	M,	J/HRRO
D 0563, 7300,0113				; 3228		RPW,	S,	J/HRRO
						; 3229	
D 0564, 5500,0211				; 3230		R-PF,	AC,	J/HLRO
D 0565, 1501,0211				; 3231		I-PF,	AC,	J/HLRO
D 0566, 3600,0211				; 3232		W,	M,	J/HLRO
D 0567, 7301,0211				; 3233		RPW,	S,	J/HLRO
						; 3234	
D 0570, 5500,0105				; 3235	570:	R-PF,	AC,	J/HRRE
D 0571, 1501,0105				; 3236		I-PF,	AC,	J/HRRE
D 0572, 3600,0105				; 3237		W,	M,	J/HRRE
D 0573, 7301,0105				; 3238		RPW,	S,	J/HRRE
						; 3239	
D 0574, 5501,0115				; 3240		R-PF,	AC,	J/HLRE
D 0575, 1500,0115				; 3241		I-PF,	AC,	J/HLRE
D 0576, 3601,0115				; 3242		W,	M,	J/HLRE
D 0577, 7300,0115				; 3243		RPW,	S,	J/HLRE
						; 3244	
						; 3245		.UCODE
						; 3246	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 67
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	HALFWORD GROUP

						; 3247	;FIRST, THE 16 OPS WHICH DO NOT AFFECT THE "OTHER" HALF.
						; 3248	;THESE MUST BE TREATED SEPARATELY, BECAUSE THEY COMBINE MEMORY DATA
						; 3249	;IN AR WITH DATA FROM THE FM.  ENTER WITH 0,E OR (E) IN AR.
						; 3250	
						; 3251	=00***0
U 0204, 0060,3200,0000,0000,0025,0633,0002	; 3252	HRR:	ARL_AC0,ARR_ARR,EXIT		;HRR, HRRI, HLLM
						; 3253	=00****
U 0205, 0060,3200,2000,0000,0025,0633,0000	; 3254	HLL:	ARR_AC0,ARL_ARL,EXIT		;HLL, HLLI, HRRM
						; 3255	=			;HRRS, HLLS ARE BOTH EQUIVALENT TO MOVES
						; 3256	=00****
U 0103, 0060,3240,2000,0000,3025,0633,0004	; 3257	HRL:	ARL_ARR,ARR_AC0,EXIT		;HRL, HRLI
						; 3258	=
						; 3259	=00****
U 0104, 0060,3240,4000,0000,3025,0633,0002	; 3260	HLR:	ARR_ARL,ARL_AC0,EXIT		;HLR, HLRI
						; 3261	=
						; 3262	=00***0
U 0106, 0100,3240,2000,0000,3020,0610,0004	; 3263	HRLM:	ARL_ARR,ARR_AC0,J/MOVS		;HRLM
U 0107, 0060,4001,0000,0000,3005,0633,0004	; 3264	HRLS:	ARL_ARR,ARR_ARR,EXIT		;HRLS
						; 3265	=
						; 3266	=00***0
U 0110, 0100,3240,4000,0000,3020,0610,0002	; 3267	HLRM:	ARR_ARL,ARL_AC0,J/MOVS		;HLRM
U 0111, 0060,4001,4000,0000,3005,0633,0000	; 3268	HLRS:	ARR_ARL,ARL_ARL,EXIT		;HLRS
						; 3269	=
						; 3270	;NOW THE HALFWORD OPS WHICH CONTROL THE "OTHER" HALF
						; 3271	; ENTER WITH 0,E, (E), OR (AC) IN AR
						; 3272	
						; 3273	=00****
U 0105, 0112,0001,0000,0000,0000,4410,0000	; 3274	HRRE:	SKP AR18			;SELECT HRRZ OR HRRO ON SIGN
						; 3275	=
						; 3276	=00***0
U 0112, 0060,4001,0000,0000,0005,0633,0020	; 3277	HRRZ:	ARL_0S,ARR_ARR,EXIT
U 0113, 0060,2301,0000,0000,0005,0633,0002	; 3278	HRRO:	ARL_1S,ARR_ARR,EXIT
						; 3279	=
						; 3280	=00****
U 0114, 0206,0001,0000,0000,0000,4410,0000	; 3281	HRLE:	SKP AR18
						; 3282	=
						; 3283	=00***0
U 0206, 0060,3441,2000,0000,3005,0633,0004	; 3284	HRLZ:	ARL_ARR,ARR_0S,EXIT
U 0207, 0060,2341,2000,0000,3005,0633,0004	; 3285	HRLO:	ARL_ARR,ARR_1S,EXIT
						; 3286	=
						; 3287	=00****
U 0115, 0210,0001,0000,0000,0000,4510,0000	; 3288	HLRE:	SKP AR0
						; 3289	=
						; 3290	=00***0
U 0210, 0060,0001,4000,0000,3005,0633,0020	; 3291	HLRZ:	ARR_ARL,ARL_0S,EXIT
U 0211, 0060,2341,4000,0000,3005,0633,0002	; 3292	HLRO:	ARR_ARL,ARL_1S,EXIT
						; 3293	=
						; 3294	=00****
U 0116, 0212,4001,0000,0000,0000,4510,0000	; 3295	HLLE:	SKP AR0
						; 3296	=
						; 3297	=00***0
U 0212, 0060,3401,2000,0000,0005,0633,0000	; 3298	HLLZ:	ARR_0S,ARL_ARL,EXIT
U 0213, 0060,2301,2000,0000,0005,0633,0000	; 3299	HLLO:	ARR_1S,ARL_ARL,EXIT
						; 3300	=
						; 3301	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 68
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	DMOVE, DMOVN, DMOVEM, DMOVNM

						; 3302	.TOC	"DMOVE, DMOVN, DMOVEM, DMOVNM"
						; 3303	;DOUBLE-WORD MOVES
						; 3304	
						; 3305		.DCODE
D 0120, 4001,0214				; 3306	120:	R,	B/0,	J/DMOVE
D 0121, 4100,0214				; 3307		R,	B/1,	J/DMOVN
						; 3308		.UCODE
						; 3309	
						; 3310	; ENTER WITH (E) IN AR
						; 3311	=00****
						; 3312	DMOVN:
U 0214, 0024,4001,0000,0000,0013,3633,0000	; 3313	DMOVE:	VMA_VMA+1,LOAD ARX,B DISP	;PICK UP (E+1)
						; 3314	=
						; 3315	=1**00
U 0024, 0325,3200,0003,0000,0022,0010,0000	; 3316		ARX_MEM,J/STDAC			;GO STORE DOUBLE AC
U 0025, 0023,3240,0003,0000,0022,0022,0500	; 3317		ARX_MEM,MQ_0.S,CALL.S,J/GTDBR	;LOAD BR WITH DOUBLE OPERAND
						; 3318	=11	AR_-BR LONG,AD FLAGS,		;NEGATE DOUBLE OPERAND
U 0027, 0016,5142,2600,0302,0020,1327,0043	; 3319			SC_#,#/35.		;& STORE RESULT
U 0016, 0014,3401,2000,0000,0206,1010,0400	; 3320	DBLST:	AC0_AR,AR_0S,I FETCH,J/STD1	;STORE HIGH WORD, READY LOW
						; 3321	
						; 3322	
						; 3323	;DOUBLE MOVES TO MEMORY
						; 3324	
						; 3325		.DCODE
D 0124, 3001,0300				; 3326	124:	W,		J/DMOVEM
D 0125, 3000,0301				; 3327		W,		J/DMOVNM
						; 3328		.UCODE
						; 3329	
						; 3330	;ENTER WITH (AC) IN AR
						; 3331	=00**00
U 0300, 0017,3200,0201,0302,0036,0010,0044	; 3332	DMOVEM:	ARX_AC1,STORE,SC_#,#/36.,J/DMVM1
U 0301, 0023,3200,0201,0000,0020,0022,0500	; 3333	DMOVNM:	ARX_AC1,MQ_0.S,CALL.S,J/GTDBR	;HIGH WORD IS ALREADY IN AR
						; 3334	=11	AR_-BR LONG,AD FLAGS,		;NEGATE
U 0303, 0017,5142,2600,0302,0036,1327,0043	; 3335			STORE,SC_#,#/35.	; & STORE
						; 3336	=
U 0017, 0022,3401,2003,0000,0002,3610,0000	; 3337	DMVM1:	MEM_AR,VMA_VMA+1,AR_0S
U 0022, 0066,4001,4000,0000,0016,0010,0000	; 3338		AR_SHIFT,STORE,J/STMEM
						; 3339	
U 0023, 0026,3721,0500,0000,0000,0010,0000	; 3340	GTDBR:	ARX_ARX*2			;SHIFT OUT LOW SIGN
U 0026, 0003,0001,0060,0000,0000,0003,0000	; 3341	LDBRL:	BR_AR LONG,RETURN3		;COPY TO BR LONG
						; 3342	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 69
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	BOOLEAN GROUP

						; 3343	.TOC	"BOOLEAN GROUP"
						; 3344	
						; 3345		.DCODE
D 0400, 1500,0215				; 3346	400:	I-PF,	AC,	J/SETZ
D 0401, 1500,0215				; 3347		I-PF,	AC,	J/SETZ
D 0402, 0601,0215				; 3348		IW,	M,	J/SETZ
D 0403, 0700,0215				; 3349		IW,	B,	J/SETZ
						; 3350		.UCODE
						; 3351	
						; 3352	=00****
U 0215, 0060,3401,2000,0000,0005,0033,0000	; 3353	SETZ:	AR_0S,EXIT
						; 3354	=
						; 3355		.DCODE
D 0404, 5501,0216				; 3356	404:	R-PF,	AC,	J/AND
D 0405, 1500,0216				; 3357		I-PF,	AC,	J/AND
D 0406, 7600,0216				; 3358		RPW,	M,	J/AND
D 0407, 7701,0216				; 3359		RPW,	B,	J/AND
						; 3360		.UCODE
						; 3361	
						; 3362	=00****
U 0216, 0060,3600,2000,4000,0025,0033,0000	; 3363	AND:	AR_AR*AC0,AD/AND,EXIT
						; 3364	=
						; 3365		.DCODE
D 0410, 5500,0217				; 3366	410:	R-PF,	AC,	J/ANDCA
D 0411, 1501,0217				; 3367		I-PF,	AC,	J/ANDCA
D 0412, 7601,0217				; 3368		RPW,	M,	J/ANDCA
D 0413, 7700,0217				; 3369		RPW,	B,	J/ANDCA
						; 3370		.UCODE
						; 3371	
						; 3372	=00****
U 0217, 0060,3500,2000,4000,0025,0033,0000	; 3373	ANDCA:	AR_AR*AC0,AD/ANDCB,EXIT
						; 3374	=
						; 3375		.DCODE
D 0414, 5500,0200				; 3376	414:	R-PF,	AC,	J/MOVE		;SETM = MOVE
D 0415, 1501,0200				; 3377		I-PF,	AC,	J/MOVE
D 0416, 7601,0200				; 3378		RPW,	M,	J/MOVE		;SETMM = NOP THAT WRITES MEMORY
D 0417, 7700,0200				; 3379		RPW,	B,	J/MOVE		;SETMB = MOVE THAT WRITES MEMORY
						; 3380	
D 0420, 5500,0302				; 3381	420:	R-PF,	AC,	J/ANDCM
D 0421, 1501,0302				; 3382		I-PF,	AC,	J/ANDCM
D 0422, 7601,0302				; 3383		RPW,	M,	J/ANDCM
D 0423, 7700,0302				; 3384		RPW,	B,	J/ANDCM
						; 3385		.UCODE
						; 3386	
						; 3387	=00****
U 0302, 0060,3000,2000,4000,0025,0033,0000	; 3388	ANDCM:	AR_AR*AC0,AD/ANDCA,EXIT
						; 3389	=
						; 3390		.DCODE
D 0424, 5001,0404				; 3391	424:	R-PF,		J/TDN
D 0425, 1000,0404				; 3392		I-PF,		J/TDN
D 0426, 3600,0200				; 3393		W,	M,	J/MOVE		;SETAM = MOVEM
D 0427, 3600,0200				; 3394		W,	M,	J/MOVE		;SETAB, TOO
						; 3395		.UCODE
						; 3396	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 70
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	BOOLEAN GROUP

						; 3397		.DCODE
D 0430, 5500,0304				; 3398	430:	R-PF,	AC,	J/XOR
D 0431, 1501,0304				; 3399		I-PF,	AC,	J/XOR
D 0432, 7601,0304				; 3400		RPW,	M,	J/XOR
D 0433, 7700,0304				; 3401		RPW,	B,	J/XOR
						; 3402		.UCODE
						; 3403	
						; 3404	=00****
U 0304, 0060,3100,2000,0000,0025,0033,0000	; 3405	XOR:	AR_AR*AC0,AD/XOR,EXIT
						; 3406	=
						; 3407		.DCODE
D 0434, 5501,0305				; 3408	434:	R-PF,	AC,	J/IOR
D 0435, 1500,0305				; 3409		I-PF,	AC,	J/IOR
D 0436, 7600,0305				; 3410		RPW,	M,	J/IOR
D 0437, 7701,0305				; 3411		RPW,	B,	J/IOR
						; 3412		.UCODE
						; 3413	
						; 3414	=00****
U 0305, 0060,3300,2000,4000,0025,0033,0000	; 3415	IOR:	AR_AR*AC0,AD/OR,EXIT
						; 3416	=
						; 3417		.DCODE
D 0440, 5501,0306				; 3418	440:	R-PF,	AC,	J/ANDCB
D 0441, 1500,0306				; 3419		I-PF,	AC,	J/ANDCB
D 0442, 7600,0306				; 3420		RPW,	M,	J/ANDCB
D 0443, 7701,0306				; 3421		RPW,	B,	J/ANDCB
						; 3422		.UCODE
						; 3423	
						; 3424	=00****
U 0306, 0060,2400,2000,4000,0025,0033,0000	; 3425	ANDCB:	AR_AR*AC0,AD/ANDC,EXIT
						; 3426	=
						; 3427		.DCODE
D 0444, 5500,0307				; 3428	444:	R-PF,	AC,	J/EQV
D 0445, 1501,0307				; 3429		I-PF,	AC,	J/EQV
D 0446, 7601,0307				; 3430		RPW,	M,	J/EQV
D 0447, 7700,0307				; 3431		RPW,	B,	J/EQV
						; 3432		.UCODE
						; 3433	
						; 3434	=00****
U 0307, 0060,2600,2000,0000,0025,0033,0000	; 3435	EQV:	AR_AR*AC0,AD/EQV,EXIT
						; 3436	=
						; 3437		.DCODE
D 0450, 1501,0310				; 3438	450:	I-PF,	AC,	J/SETCA
D 0451, 1501,0310				; 3439		I-PF,	AC,	J/SETCA
D 0452, 0600,0310				; 3440		IW,	M,	J/SETCA
D 0453, 0701,0310				; 3441		IW,	B,	J/SETCA
						; 3442		.UCODE
						; 3443	
						; 3444	=00****
U 0310, 0060,2500,2000,0000,0025,0033,0000	; 3445	SETCA:	AR_AR*AC0,AD/SETCB,EXIT
						; 3446	=
						; 3447	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 71
; DSK: UCODE; BASIC 23	17:13:16 20-AUG-2018	BOOLEAN GROUP

						; 3448		.DCODE
D 0454, 5501,0311				; 3449	454:	R-PF,	AC,	J/ORCA
D 0455, 1500,0311				; 3450		I-PF,	AC,	J/ORCA
D 0456, 7600,0311				; 3451		RPW,	M,	J/ORCA
D 0457, 7701,0311				; 3452		RPW,	B,	J/ORCA
						; 3453		.UCODE
						; 3454	
						; 3455	=00****
U 0311, 0060,2700,2000,4000,0025,0033,0000	; 3456	ORCA:	AR_AR*AC0,AD/ORCB,EXIT
						; 3457	=
						; 3458		.DCODE
D 0460, 5501,0312				; 3459	460:	R-PF,	AC,	J/SETCM
D 0461, 1500,0312				; 3460		I-PF,	AC,	J/SETCM
D 0462, 7600,0312				; 3461		RPW,	M,	J/SETCM
D 0463, 7701,0312				; 3462		RPW,	B,	J/SETCM
						; 3463		.UCODE
						; 3464	
						; 3465	=00****
U 0312, 0060,2001,2000,0000,0005,0033,0000	; 3466	SETCM:	ADA/AR,AD/SETCA,AR/AD,EXIT
						; 3467	=
						; 3468		.DCODE
D 0464, 5500,0313				; 3469	464:	R-PF,	AC,	J/ORCM
D 0465, 1501,0313				; 3470		I-PF,	AC,	J/ORCM
D 0466, 7601,0313				; 3471		RPW,	M,	J/ORCM
D 0467, 7700,0313				; 3472		RPW,	B,	J/ORCM
						; 3473		.UCODE
						; 3474	
						; 3475	=00****
U 0313, 0060,2200,2000,4000,0025,0033,0000	; 3476	ORCM:	AR_AR*AC0,AD/ORCA,EXIT
						; 3477	=
						; 3478		.DCODE
D 0470, 5501,0314				; 3479	470:	R-PF,	AC,	J/ORCB
D 0471, 1500,0314				; 3480		I-PF,	AC,	J/ORCB
D 0472, 7600,0314				; 3481		RPW,	M,	J/ORCB
D 0473, 7701,0314				; 3482		RPW,	B,	J/ORCB
						; 3483		.UCODE
						; 3484	
						; 3485	=00****
U 0314, 0060,2100,2000,4000,0025,0033,0000	; 3486	ORCB:	AR_AR*AC0,AD/ORC,EXIT
						; 3487	=
						; 3488		.DCODE
D 0474, 1501,0315				; 3489	474:	I-PF,	AC,	J/SETO
D 0475, 1501,0315				; 3490		I-PF,	AC,	J/SETO
D 0476, 0600,0315				; 3491		IW,	M,	J/SETO
D 0477, 0701,0315				; 3492		IW,	B,	J/SETO
						; 3493		.UCODE
						; 3494	
						; 3495	=00****
U 0315, 0060,2301,2000,0000,0005,0033,0000	; 3496	SETO:	AR_1S,EXIT
						; 3497	=
						; 3498	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 72
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	BOOLEAN GROUP

						; 3499	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 73
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	TEST GROUP

						; 3500	.TOC	"TEST GROUP"
						; 3501	
						; 3502		.DCODE
D 0600, 1000,0404				; 3503	600:	I-PF,		J/TDN		;TRN- IS NOP
D 0601, 1000,0404				; 3504		I-PF,		J/TDN		;SO IS TLN-
D 0602, 0000,0403				; 3505		I,	TNE,	J/TDXX
D 0603, 0001,0402				; 3506		I,	TNE,	J/TSXX
D 0604, 0000,0400				; 3507		I,	TNA,	J/TDX
D 0605, 0001,0401				; 3508		I,	TNA,	J/TSX
D 0606, 0401,0403				; 3509		I,	TNN,	J/TDXX
D 0607, 0400,0402				; 3510		I,	TNN,	J/TSXX
						; 3511	
D 0610, 1000,0404				; 3512	610:	I-PF,		J/TDN		;TDN- IS A NOP
D 0611, 1000,0404				; 3513		I-PF,		J/TDN		;TSN- ALSO
D 0612, 4001,0403				; 3514		R,	TNE,	J/TDXX
D 0613, 4000,0402				; 3515		R,	TNE,	J/TSXX
D 0614, 4001,0400				; 3516		R,	TNA,	J/TDX
D 0615, 4000,0401				; 3517		R,	TNA,	J/TSX
D 0616, 4400,0403				; 3518		R,	TNN,	J/TDXX
D 0617, 4401,0402				; 3519		R,	TNN,	J/TSXX
						; 3520	
D 0620, 0500,0400				; 3521	620:	I,	TZ-,	J/TDX
D 0621, 0501,0401				; 3522		I,	TZ-,	J/TSX
D 0622, 0101,0403				; 3523		I,	TZE,	J/TDXX
D 0623, 0100,0402				; 3524		I,	TZE,	J/TSXX
D 0624, 0101,0400				; 3525		I,	TZA,	J/TDX
D 0625, 0100,0401				; 3526		I,	TZA,	J/TSX
D 0626, 0500,0403				; 3527		I,	TZN,	J/TDXX
D 0627, 0501,0402				; 3528		I,	TZN,	J/TSXX
						; 3529	
D 0630, 4501,0400				; 3530	630:	R,	TZ-,	J/TDX
D 0631, 4500,0401				; 3531		R,	TZ-,	J/TSX
D 0632, 4100,0403				; 3532		R,	TZE,	J/TDXX
D 0633, 4101,0402				; 3533		R,	TZE,	J/TSXX
D 0634, 4100,0400				; 3534		R,	TZA,	J/TDX
D 0635, 4101,0401				; 3535		R,	TZA,	J/TSX
D 0636, 4501,0403				; 3536		R,	TZN,	J/TDXX
D 0637, 4500,0402				; 3537		R,	TZN,	J/TSXX
						; 3538	
D 0640, 0600,0400				; 3539	640:	I,	TC-,	J/TDX
D 0641, 0601,0401				; 3540		I,	TC-,	J/TSX
D 0642, 0201,0403				; 3541		I,	TCE,	J/TDXX
D 0643, 0200,0402				; 3542		I,	TCE,	J/TSXX
D 0644, 0201,0400				; 3543		I,	TCA,	J/TDX
D 0645, 0200,0401				; 3544		I,	TCA,	J/TSX
D 0646, 0600,0403				; 3545		I,	TCN,	J/TDXX
D 0647, 0601,0402				; 3546		I,	TCN,	J/TSXX
						; 3547	
D 0650, 4601,0400				; 3548	650:	R,	TC-,	J/TDX
D 0651, 4600,0401				; 3549		R,	TC-,	J/TSX
D 0652, 4200,0403				; 3550		R,	TCE,	J/TDXX
D 0653, 4201,0402				; 3551		R,	TCE,	J/TSXX
D 0654, 4200,0400				; 3552		R,	TCA,	J/TDX
D 0655, 4201,0401				; 3553		R,	TCA,	J/TSX
D 0656, 4601,0403				; 3554		R,	TCN,	J/TDXX
D 0657, 4600,0402				; 3555		R,	TCN,	J/TSXX
						; 3556	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 74
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	TEST GROUP

D 0660, 0701,0400				; 3557	660:	I,	TO-,	J/TDX
D 0661, 0700,0401				; 3558		I,	TO-,	J/TSX
D 0662, 0300,0403				; 3559		I,	TOE,	J/TDXX
D 0663, 0301,0402				; 3560		I,	TOE,	J/TSXX
D 0664, 0300,0400				; 3561		I,	TOA,	J/TDX
D 0665, 0301,0401				; 3562		I,	TOA,	J/TSX
D 0666, 0701,0403				; 3563		I,	TON,	J/TDXX
D 0667, 0700,0402				; 3564		I,	TON,	J/TSXX
						; 3565	
D 0670, 4700,0400				; 3566	670:	R,	TO-,	J/TDX
D 0671, 4701,0401				; 3567		R,	TO-,	J/TSX
D 0672, 4301,0403				; 3568		R,	TOE,	J/TDXX
D 0673, 4300,0402				; 3569		R,	TOE,	J/TSXX
D 0674, 4301,0400				; 3570		R,	TOA,	J/TDX
D 0675, 4300,0401				; 3571		R,	TOA,	J/TSX
D 0676, 4700,0403				; 3572		R,	TON,	J/TDXX
D 0677, 4701,0402				; 3573		R,	TON,	J/TSXX
						; 3574		.UCODE
						; 3575	
						; 3576	;THESE 64 INSTRUCTIONS ARE DECODED BY MASK MODE (IMMEDIATE OR MEMORY)
						; 3577	; IN THE A FIELD, DISPATCH TO HERE ON THE J FIELD, AND RE-DISPATCH
						; 3578	; FOR THE MODIFICATION ON THE B FIELD.
						; 3579	
						; 3580	; ENTER WITH 0,E OR (E) IN AR, B FIELD BITS 1 AND 2 AS FOLLOWS:
						; 3581	; 0 0	NO MODIFICATION
						; 3582	; 0 1	ZEROS
						; 3583	; 1 0	COMPLEMENT
						; 3584	; 1 1	ONES
						; 3585	;   THIS ORDER HAS NO SIGNIFICANCE EXCEPT THAT IT CORRESPONDS TO THE
						; 3586	;   ORDER OF INSTRUCTIONS AT TGROUP.
						; 3587	
						; 3588	;THE HIGH ORDER BIT OF THE B FIELD (B0) IS XOR'D WITH AD CRY0 TO
						; 3589	;   DETERMINE THE SENSE OF THE SKIP:
						; 3590	; 0	SKIP IF CRY0=1 (TXX- AND TXXN)
						; 3591	; 1	SKIP IF CRY0=0 (TXXA AND TXXE)
						; 3592	
						; 3593	=00*000
						; 3594	TDX:	TEST FETCH,NO CRY,		;TDXA AND TRXA
U 0400, 0404,2001,0000,0000,0226,0033,0203	; 3595			B DISP,J/TDN
						; 3596	
						; 3597	TSX:	AR_AR SWAP,TEST FETCH,NO CRY,	;TSX, TSXA, TLX, AND TLXA
U 0401, 0404,2041,4000,0000,3226,0033,0203	; 3598			B DISP,J/TDN
						; 3599	
U 0402, 0403,4001,4000,0000,3000,0010,0000	; 3600	TSXX:	AR_AR SWAP			;TSXE, TSXN, TLXE, AND TLXN
						; 3601	
U 0403, 0404,3600,0000,0000,0246,0033,0203	; 3602	TDXX:	TEST AR.AC0,TEST FETCH,B DISP	;TDXE, TDXN, TRXE, AND TRXN
						; 3603	
U 0404, 0012,4001,0000,0000,0000,0010,0000	; 3604	TDN:	J/FINI				;NO MODIFICATION
U 0405, 0065,3000,2000,4000,0000,0010,0000	; 3605	TDZ:	AR_AR*AC0,AD/ANDCA,TIME/2T,J/STAC	;ZEROS
U 0406, 0065,3100,2000,0000,0000,0010,0000	; 3606	TDC:	AR_AR*AC0,AD/XOR,TIME/2T,J/STAC		;COMP
U 0407, 0065,3300,2000,4000,0000,0010,0000	; 3607	TDO:	AR_AR*AC0,AD/OR,TIME/2T,J/STAC		;ONES
						; 3608	=
						; 3609	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 75
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	COMPARE -- CAI, CAM

						; 3610	.TOC	"COMPARE -- CAI, CAM"
						; 3611	
						; 3612		.DCODE
D 0300, 0300,0316				; 3613	300:	I,	SJC-,	J/CAIM	;CAI
D 0301, 0201,0316				; 3614		I,	SJCL,	J/CAIM
D 0302, 0101,0316				; 3615		I,	SJCE,	J/CAIM
D 0303, 0000,0316				; 3616		I,	SJCLE,	J/CAIM
D 0304, 0701,0316				; 3617		I,	SJCA,	J/CAIM
D 0305, 0600,0316				; 3618		I,	SJCGE,	J/CAIM
D 0306, 0500,0316				; 3619		I,	SJCN,	J/CAIM
D 0307, 0401,0316				; 3620		I,	SJCG,	J/CAIM
						; 3621	
D 0310, 4301,0316				; 3622	310:	R,	SJC-,	J/CAIM	;CAM
D 0311, 4200,0316				; 3623		R,	SJCL,	J/CAIM
D 0312, 4100,0316				; 3624		R,	SJCE,	J/CAIM
D 0313, 4001,0316				; 3625		R,	SJCLE,	J/CAIM
D 0314, 4700,0316				; 3626		R,	SJCA,	J/CAIM
D 0315, 4601,0316				; 3627		R,	SJCGE,	J/CAIM
D 0316, 4501,0316				; 3628		R,	SJCN,	J/CAIM
D 0317, 4400,0316				; 3629		R,	SJCG,	J/CAIM
						; 3630		.UCODE
						; 3631	
						; 3632	=00****
U 0316, 0071,3100,0000,4000,0246,0010,0201	; 3633	CAIM:	GEN AR*AC0,COMP FETCH,J/NOP
						; 3634	=
						; 3635	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 76
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	ARITHMETIC SKIPS -- AOS, SOS, SKIP

						; 3636	.TOC	"ARITHMETIC SKIPS -- AOS, SOS, SKIP"
						; 3637	;ENTER WITH (E) IN AR
						; 3638	
						; 3639		.DCODE
D 0330, 4300,0317				; 3640	330:	R,	SJC-,	J/SKIP	;NOT A NOP IF AC .NE. 0
D 0331, 4201,0317				; 3641		R,	SJCL,	J/SKIP
D 0332, 4101,0317				; 3642		R,	SJCE,	J/SKIP
D 0333, 4000,0317				; 3643		R,	SJCLE,	J/SKIP
D 0334, 4701,0317				; 3644		R,	SJCA,	J/SKIP
D 0335, 4600,0317				; 3645		R,	SJCGE,	J/SKIP
D 0336, 4500,0317				; 3646		R,	SJCN,	J/SKIP
D 0337, 4401,0317				; 3647		R,	SJCG,	J/SKIP
						; 3648		.UCODE
						; 3649	
						; 3650	=00****
						; 3651	SKIP:	FIN STORE,SKIP FETCH,
U 0317, 0070,3701,0003,0000,0246,4610,0202	; 3652			SKP AC#0,J/STSELF	;STORE IN SELF MODE
						; 3653	=
						; 3654	
						; 3655		.DCODE
D 0350, 7300,0410				; 3656	350:	RPW,	SJC-,	J/AOS
D 0351, 7201,0410				; 3657		RPW,	SJCL,	J/AOS
D 0352, 7101,0410				; 3658		RPW,	SJCE,	J/AOS
D 0353, 7000,0410				; 3659		RPW,	SJCLE,	J/AOS
D 0354, 7701,0410				; 3660		RPW,	SJCA,	J/AOS
D 0355, 7600,0410				; 3661		RPW,	SJCGE,	J/AOS
D 0356, 7500,0410				; 3662		RPW,	SJCN,	J/AOS
D 0357, 7401,0410				; 3663		RPW,	SJCG,	J/AOS
						; 3664		.UCODE
						; 3665	
						; 3666	=00****
U 0410, 0317,4001,2000,0000,0036,1310,0000	; 3667	AOS:	AR_AR+1,AD FLAGS,STORE,J/SKIP
						; 3668	=
						; 3669	
						; 3670		.DCODE
D 0370, 7301,0411				; 3671	370:	RPW,	SJC-,	J/SOS
D 0371, 7200,0411				; 3672		RPW,	SJCL,	J/SOS
D 0372, 7100,0411				; 3673		RPW,	SJCE,	J/SOS
D 0373, 7001,0411				; 3674		RPW,	SJCLE,	J/SOS
D 0374, 7700,0411				; 3675		RPW,	SJCA,	J/SOS
D 0375, 7601,0411				; 3676		RPW,	SJCGE,	J/SOS
D 0376, 7501,0411				; 3677		RPW,	SJCN,	J/SOS
D 0377, 7400,0411				; 3678		RPW,	SJCG,	J/SOS
						; 3679		.UCODE
						; 3680	
						; 3681	=00****
U 0411, 0317,1703,2000,0000,0036,1310,0000	; 3682	SOS:	AR_AR-1,AD FLAGS,STORE,J/SKIP
						; 3683	=
						; 3684	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 77
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	CONDITIONAL JUMPS -- JUMP, AOJ, SOJ, AOBJ

						; 3685	.TOC	"CONDITIONAL JUMPS -- JUMP, AOJ, SOJ, AOBJ"
						; 3686	; ENTER WITH E IN VMA
						; 3687	
						; 3688		.DCODE
D 0320, 0300,0412				; 3689	320:	I,	SJC-,	J/JUMP
D 0321, 0201,0412				; 3690		I,	SJCL,	J/JUMP
D 0322, 0101,0412				; 3691		I,	SJCE,	J/JUMP
D 0323, 0000,0412				; 3692		I,	SJCLE,	J/JUMP
D 0324, 0701,0412				; 3693		I,	SJCA,	J/JUMP
D 0325, 0600,0412				; 3694		I,	SJCGE,	J/JUMP
D 0326, 0500,0412				; 3695		I,	SJCN,	J/JUMP
D 0327, 0401,0412				; 3696		I,	SJCG,	J/JUMP
						; 3697		.UCODE
						; 3698	
						; 3699	=00****
						; 3700	.IFNOT/JPC
U 0412, 0071,3240,2000,0000,0246,0010,0502	; 3701	JUMP:	AR_AC0,JUMP FETCH,J/NOP
						; 3702	.IF/JPC
						; 3703	JUMP:	AR_AC0,JUMP FETCH,B DISP,J/JMPJPC
						; 3704	.ENDIF/JPC
						; 3705	=
						; 3706	
						; 3707		.DCODE
D 0340, 0301,0413				; 3708	340:	I,	SJC-,	J/AOJ
D 0341, 0200,0413				; 3709		I,	SJCL,	J/AOJ
D 0342, 0100,0413				; 3710		I,	SJCE,	J/AOJ
D 0343, 0001,0413				; 3711		I,	SJCLE,	J/AOJ
D 0344, 0700,0413				; 3712		I,	SJCA,	J/AOJ
D 0345, 0601,0413				; 3713		I,	SJCGE,	J/AOJ
D 0346, 0501,0413				; 3714		I,	SJCN,	J/AOJ
D 0347, 0400,0413				; 3715		I,	SJCG,	J/AOJ
						; 3716		.UCODE
						; 3717	
						; 3718	=00****
						; 3719	.IFNOT/JPC
U 0413, 0070,4660,2000,0000,0266,1310,0502	; 3720	AOJ:	AR_AC0+1,AD FLAGS,JUMP FETCH,J/STORAC
						; 3721	.IF/JPC
						; 3722	AOJ:	AR_AC0+1,AD FLAGS,JUMP FETCH,J/AOJJPC
						; 3723	.ENDIF/JPC
						; 3724	=
						; 3725	
						; 3726		.DCODE
D 0360, 0300,0414				; 3727	360:	I,	SJC-,	J/SOJ
D 0361, 0201,0414				; 3728		I,	SJCL,	J/SOJ
D 0362, 0101,0414				; 3729		I,	SJCE,	J/SOJ
D 0363, 0000,0414				; 3730		I,	SJCLE,	J/SOJ
D 0364, 0701,0414				; 3731		I,	SJCA,	J/SOJ
D 0365, 0600,0414				; 3732		I,	SJCGE,	J/SOJ
D 0366, 0500,0414				; 3733		I,	SJCN,	J/SOJ
D 0367, 0401,0414				; 3734		I,	SJCG,	J/SOJ
						; 3735		.UCODE
						; 3736	
						; 3737	;THE BASIC INSTRUCTION DISPATCH LOADS MQ WITH -1
						; 3738	;SO THAT WHEN WE GET HERE WE CAN ADD -1 TO THE AC IN
						; 3739	;A SINGLE MICRO-INSTRUCTION.
						; 3740	=00****
						; 3741	.IFNOT/JPC
U 0414, 0070,0620,2000,0000,0266,1310,0502	; 3742	SOJ:	AR_MQ+AC0,AD FLAGS,JUMP FETCH,J/STORAC
						; 3743	.IF/JPC
						; 3744	SOJ:	AR_MQ+AC0,AD FLAGS,JUMP FETCH,J/SOJJPC
						; 3745	.ENDIF/JPC
						; 3746	=
						; 3747		.DCODE
D 0252, 0601,0415				; 3748	252:	I,	SJCGE,	J/AOBJ
D 0253, 0200,0415				; 3749		I,	SJCL,	J/AOBJ
						; 3750		.UCODE
						; 3751	
						; 3752	=00****
						; 3753	.IFNOT/JPC
U 0415, 0070,4660,2000,0000,0266,0017,0502	; 3754	AOBJ:	AR_AC0+1,GEN CRY18,JUMP FETCH,J/STORAC
						; 3755	.IF/JPC
						; 3756	AOBJ:	AR_AC0+1,GEN CRY18,JUMP FETCH,J/AOBJPC
						; 3757	.ENDIF/JPC
						; 3758	=
						; 3759	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 78
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	AC DECODE JUMPS -- JRST, JFCL

						; 3760	.TOC	"AC DECODE JUMPS -- JRST, JFCL"
						; 3761	
						; 3762		.DCODE
D 0254, 0001,0600				; 3763	254:	I,	J/JRST		;DISPATCHES TO 1 OF 16 ON AC BITS
D 0255, 0401,0700				; 3764		I,TNN,	J/JFCL
						; 3765		.UCODE
						; 3766	
						; 3767	;A READ DETECTS JRST, AND DISPATCHES TO ONE OF 16 LOC'NS ON AC BITS
						; 3768	
						; 3769	600:				;DRAM REQUIRES JRST AT MULTIPLE OF 200
						; 3770	.IFNOT/JPC
U 0600, 0012,4001,0000,0000,0000,0010,0000	; 3771	JRST:	J/FINI				;(0) A READ PREFETCHES ON JRST 0,
						; 3772	.IF/JPC
						; 3773	JRST:	AR_PC,SKP USER,			;(0) A READ PREFETCHES - GO STORE JPC
						; 3774			SC_#,#/32.,J/JPCEX
						; 3775	.ENDIF/JPC
						; 3776	601:
						; 3777	.IFNOT/ITSPAGE
						; 3778		PORTAL,BR/AR,J/BRJMP		;(1) PORTAL
						; 3779	.IF/ITSPAGE
U 0601, 0243,0001,0040,0000,0000,0010,0000	; 3780		BR/AR,J/BRJMP			;(1) NO PUBLIC PAGES => NO PORTAL
						; 3781	.ENDIF/ITSPAGE
						; 3782	602:
						; 3783	JRST2:	EA MOD DISP,BR/AR,AR_ARX,	;(2) JRSTF
U 0602, 0072,0001,4040,0302,2000,0036,0011	; 3784			SC_#,#/9,J/JRSTF
U 0603, 1002,4001,0000,0000,0000,0010,0000	; 3785	603:	J/UUO				;(3)
U 0604, 1016,0001,0000,0000,0000,7324,0442	; 3786	604:	HALT,SKP IO LEGAL,J/IHALT	;(4) HALT
U 0605, 1002,4001,0000,0000,0000,0010,0000	; 3787	605:	J/UUO				;(5)
U 0606, 1002,4001,0000,0000,0000,0010,0000	; 3788	606:	J/UUO				;(6)
U 0607, 1002,4001,0000,0000,0000,0010,0000	; 3789	607:	J/UUO				;(7)
U 0610, 0243,0001,0040,0000,0000,0024,0502	; 3790	610:	DISMISS,BR/AR,J/BRJMP		;(10)
U 0611, 1002,4001,0000,0000,0000,0010,0000	; 3791	611:	J/UUO				;(11)
U 0612, 0602,0001,0000,0000,0000,0024,0502	; 3792	612:	DISMISS,J/JRST2			;(12) JEN
U 0613, 1002,4001,0000,0000,0000,0010,0000	; 3793	613:	J/UUO				;(13)
U 0614, 1002,4001,0000,0000,0000,0010,0000	; 3794	614:	J/UUO				;(14)
U 0615, 1002,4001,0000,0000,0000,0010,0000	; 3795	615:	J/UUO				;(15)
U 0616, 1002,4001,0000,0000,0000,0010,0000	; 3796	616:	J/UUO				;(16)
						; 3797	617:
						; 3798	.IFNOT/JRSTON
						; 3799		J/UUO				;(17)
						; 3800	.IF/JRSTON
						; 3801	JRST17:	BR/AR,BRX/ARX,AR_1,GEN CRY18,	;(17) JRSTON
U 0617, 0074,4061,2260,0302,0020,0017,0007	; 3802			ARX/AD,SC_#,#/7,J/JRSTON
						; 3803	.ENDIF/JRSTON
						; 3804	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 79
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	AC DECODE JUMPS -- JRST, JFCL

						; 3805	
						; 3806	;JRST AND RESTORE FLAGS HAIR
						; 3807	
						; 3808	=11***0
U 0072, 0030,3731,2000,0000,0000,0024,0420	; 3809	JRSTF:	AR_PC,RSTR FLAGS_AR,J/JRSTF1	;RESTORE FROM INDIRECT WORD
U 0073, 0072,3200,2002,0000,0020,0010,0000	; 3810		AR_XR,J/JRSTF			;INDEXED, RESTORE FROM REGISTER
						; 3811	
						; 3812	;JRST AND RESTORE FLAGS HAIR - ONE-PROCEED VERSION.
						; 3813	;WE HAVE TO PREVENT JRSTF FROM TURNING OFF THE TRAP FLAGS.
						; 3814	;THIS MAKES ONE-PROCEED THROUGH JRST 2, WORK.
						; 3815	;IT DOESN'T HURT ANYTHING BECAUSE THE TRAP FLAGS NEVER NORMALLY
						; 3816	;STAY ON DURING EXECUTION OF AN INSTRUCTION.
						; 3817	;MUST COME TO JRSTF WITH 9 IN SC DUE TO DISP/SPEC & # CONFLICT.
						; 3818	;
						; 3819	;EVEN GROSSER HAIR- IF WE TOOK A PAGE FAULT ON THE INSTRUCTION
						; 3820	;FETCH AT THE NICOND, COULD DO AN ABORT INSTR AND LOSE THE
						; 3821	;TRAP FLAGS.  MOSTLY THIS SCREWS ONE-PROCEED, BUT IT COULD
						; 3822	;SCREW OVERFLOW TRAPS IF INTERRUPTED OUT OF THEN THE PAGE
						; 3823	;SWAPPED OUT BEFORE PROGRAM RESUMED.
						; 3824	;TO FIX THIS WE DO 'SR_JRSTF' AND LET THE INSTRUCTION
						; 3825	;CLEAN-UP HANDLER TAKE CARE OF THE FLAGS.
						; 3826	
						; 3827	;YET GROSSER HAIR! IN ORDER TO STORE THE RIGHT JPC,
						; 3828	;JRSTF DOES AR_PC AND THEN THE USER MODE FLAG IN THERE
						; 3829	;IS CHECKED, SINCE THE ONE IN THE HARDWARE HAS BEEN
						; 3830	;CLOBBERED BY THIS TIME.  TO AVOID USING # TO DO THIS,
						; 3831	;JRSTF1 HAS TO PUT 1 INTO SC (USER = PC BIT 05 = LOW P BIT)
						; 3832	
						; 3833	.IFNOT/ONE PROCEED
						; 3834	JRSTF1:	SR_JRSTF,SC_1,J/BRJRF
						; 3835	.IF/ONE PROCEED
U 0030, 0243,0001,0000,4402,0040,1607,0017	; 3836	JRSTF1:	SR_JRSTF,SC_1,SH DISP,J/BRJRF	;DISPATCH ON OLD TRAP BITS
						; 3837	=1*0011
						; 3838	.ENDIF/ONE PROCEED
						; 3839	.IFNOT/JPC
						; 3840	BRJRF:
U 0243, 0071,3242,0000,0000,0306,0010,0400	; 3841	BRJMP:	VMA_BR,FETCH,J/NOP
						; 3842	.IF/JPC
						; 3843	BRJRF:	VMA_BR,FETCH,GEN P AND SC,SKP SCAD NE,J/JPCEX
						; 3844	.ENDIF/JPC
						; 3845	.IF/ONE PROCEED		;DISP TABLE AFTER BRJRF
U 0247, 0243,0001,0000,0000,0000,1110,0020	; 3846		TRAP1,J/BRJRF			;TURN TRAP 1 BACK ON
U 0253, 0243,0001,0000,0000,0000,1110,0040	; 3847		TRAP2,J/BRJRF			;TURN TRAP 2 BACK ON
U 0257, 0243,4001,0000,0000,0000,1110,0060	; 3848		TRAP3,J/BRJRF			;TURN TRAP 3 BACK ON
						; 3849	.ENDIF/ONE PROCEED
						; 3850	.IF/JPC
						; 3851	BRJMP:	VMA_BR,FETCH,J/JPCIFY
						; 3852	.ENDIF/JPC
						; 3853	
						; 3854	.IF/JRSTON
						; 3855	;OKAY TO DO THIS INSTR IN USER MODE, SINCE WHEN IN
						; 3856	; USER MODE THE PI SYSTEM SHOULD BE ON ANYWAY.
						; 3857	;THIS INSTRUCTION IS USEFUL IN CONJUNCTION WITH THE
						; 3858	; PFAIL.PIHACK BUSINESS.
						; 3859	=*1**00
U 0074, 1254,3202,4600,0000,0000,2221,0200	; 3860	JRSTON:	AR_SHIFT,ARX_BRX,REQ EBUS,CALL,J/WGRANT	;GOBBLE EBUS
U 0077, 0031,3701,0000,0000,0060,2010,0415	; 3861	=11	CONO PI				;TURN ON PI SYSTEM
						; 3862	.IF/ONE PROCEED
U 0031, 0032,4001,0000,0302,0000,0010,0011	; 3863		SC_#,#/9			;SET UP SC FOR JRSTF
						; 3864	.ENDIF/ONE PROCEED
						; 3865		REL EBUS,AR_ARX,		;RELEASE EBUS, THEN
U 0032, 0072,4001,4000,0000,2000,2236,0100	; 3866			EA MOD DISP,J/JRSTF	; GO DO A JRSTF
						; 3867	.ENDIF/JRSTON
						; 3868	
						; 3869	
						; 3870	700:					;JFCL MUST BE AT JRST+100
U 0700, 0040,3242,0600,0302,0000,0010,0015	; 3871	JFCL:	ARX_BRX,SC_#,#/13.		;GET BACK AC FIELD
						; 3872	=1***0*
						; 3873		AR_SHIFT,ARX_0S,		;MOVE AC TO AR32-35
U 0040, 1154,3401,4200,0302,0000,0021,0040	; 3874			SC_#,#/32.,CALL,J/SHIFT	;SHIFTER WILL MOVE TO 0-3
U 0042, 0033,3731,2040,0000,0000,0024,0602	; 3875		BR/AR,AR_PC,JFCL T		;GET PC FLAGS INTO AR
						; 3876	.IFNOT/JPC
U 0033, 0034,3602,0000,0000,0246,0010,0503	; 3877		TEST AR.BR,JFCL FETCH		;JUMP IF TEST SATISFIED
U 0034, 0041,3502,2000,0000,0000,0010,0000	; 3878		AR_AR*BR,AD/ANDCB		;CLEAR TESTED FLAGS IN AR
U 0041, 0012,0001,0000,0000,0000,0024,0622	; 3879		JFCL S,J/FINI			;SET PC FROM THEM
						; 3880	.IF/JPC
						; 3881		ARX_AR*BR,AD/ANDCB,SC_#,#/32.	;SET UP SC FOR JPC RING
						; 3882		TEST AR.BR,JFCL FETCH,AR_ARX,SKP CRY0
						; 3883	=*1***0
						; 3884		JFCL S,J/FINI			;NO JUMP, ALL DONE
						; 3885		JFCL S,AR_PC,SKP USER,J/JPCEX	;JUMP, GO RECORD JPC
						; 3886	.ENDIF/JPC
						; 3887	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 80
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	HALT LOOP

						; 3888	.TOC	"HALT LOOP"
						; 3889	;HERE WHILE PROCESSOR IS "HALTED"
						; 3890	
						; 3891	1016:
						; 3892	UUO107:					;OP 107 COMES HERE
U 1016, 1002,4001,0000,0000,0000,0010,0000	; 3893	IHALT:	J/UUO				;HERE IF HALT IN USER/SUPER MODE
						; 3894	1017:
						; 3895	DHALT:	AR_0S,SET HALTED,		;KERNEL OR CONSOLE HALT
U 1017, 0050,3401,2000,0000,0100,1515,0302	; 3896			VMA/PC,PC_VMA		; IF JRST 4, COPY EA TO PC
						; 3897	=1****0
						; 3898	HALT1:	SKP -START,TIME/3T,		;CHECK FOR CONTINUE BUTTON
U 0050, 0052,4001,0400,2421,1020,7110,0000	; 3899			FE_AR0-8,ARX_AR,J/HALT2	;PICK UP OPCODE IN CASE XCT
U 0051, 0144,0001,0000,0000,0000,7710,0000	; 3900		TAKE INTRPT			;HERE IF EXAMINE/DEPOSIT UP
						; 3901	=1****0
U 0052, 0056,4001,0000,3000,0020,1534,0000	; 3902	HALT2:	GEN FE-1,BYTE DISP,CONTINUE,J/UNHALT	;INSTR FROM SWITCHES?
U 0053, 0050,0001,0000,0000,0000,7010,0000	; 3903		SKP INTRPT,J/HALT1
						; 3904	=110
U 0056, 0232,4001,0000,0000,0000,1510,0310	; 3905	UNHALT:	SET CONS XCT,J/UXCT		;XCT ONE FROM "SWITCHES"
U 0057, 0000,5063,0000,0000,0040,5410,0000	; 3906		SKP AR EQ,J/START		;NOT AN INSTR.  START, OR CONT?
						; 3907	
						; 3908	
						; 3909	.TOC	"MAP, XCT"
						; 3910	
						; 3911		.DCODE
D 0256, 4000,1001				; 3912	256:	R,		J/XCT	;OPERAND FETCHED AS DATA
						; 3913	.IF/MAP
						; 3914		I,	AC,	J/MAP
						; 3915	.IFNOT/MAP
D 0257, 0001,1002				; 3916		J/UUO
						; 3917	.ENDIF/MAP
						; 3918		.UCODE
						; 3919	
						; 3920	.IF/MAP
						; 3921	=00***0
						; 3922	.IFNOT/MAP
						; 3923	1001:			;GET XCT NEAR UUO
						; 3924	.ENDIF/MAP
						; 3925	.IFNOT/XCTR
						; 3926	XCT:	SKP INTRPT,J/XCT1		;CHECK FOR XCT . LOOP
						; 3927	.IF/XCTR
U 1001, 0232,0001,0000,0000,0000,7010,0000	; 3928	XCT:	SKP INTRPT,J/UXCT		;CHECK FOR XCT LOOP
						; 3929	.ENDIF/XCTR
						; 3930	
						; 3931	.IF/MAP
						; 3932	MAP:	MAP,BR/AR			;MAP E, GO READ BACK EBRG
						; 3933	=
						; 3934	.IF/KLPAGE				;IN KL PAGING MODE,
						; 3935		SR_MAP				;MAP CAN PAGE FAIL
						; 3936	.ENDIF/KLPAGE
						; 3937	.IFNOT/MAP
						; 3938	.IFNOT/XCTR
						; 3939	=
						; 3940	.ENDIF/XCTR
						; 3941	.ENDIF/MAP
						; 3942	=11***0
						; 3943	RDEBRG:	AR_0S,SKP IO LEGAL,MB WAIT,	;FINISH READ REG FUNC
U 0164, 1302,3401,2000,0000,0002,7321,0000	; 3944			CALL,J/GETEEB		;AND GET EBUS
U 0165, 0054,0001,3000,0000,0060,2010,0567	; 3945		AR_EBUS REG			;READ DATA
U 0054, 0066,0001,0000,0000,0005,2233,0000	; 3946		REL ECL EBUS,B WRITE,J/ST6	;GIVE IT TO USER
						; 3947	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 81
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	ITS PAGE MAP INSTRUCTIONS -- LPM, SPM

						; 3948	.TOC	"ITS PAGE MAP INSTRUCTIONS -- LPM, SPM"
						; 3949	
						; 3950	;THE WORDS LOADED OR STORED BY LPM AND SPM ARE AS FOLLOWS:
						; 3951	;	(E)	JPC (OR JPC RING POINTER)
						; 3952	;	(E+1)	ADDRESS BREAK WORD
						; 3953	;	(E+2)	PFW AS OF MOST RECENT PAGE FAIL
						; 3954	;	(E+3)	DBR1
						; 3955	;	(E+4)	DBR2
						; 3956	
						; 3957	.IF/LPM.SPM
						; 3958	=00**00
U 0500, 0166,0001,0400,0000,1012,3610,0000	; 3959	LPM:	ARX_AR,VMA_VMA+1,LOAD AR,J/LPM1	;ARX_JPC,FETCH MAR
						; 3960	
						; 3961	=10
U 0502, 2002,4001,0000,0000,0000,6121,0000	; 3962	SPM:	CALL,SKP KERNEL,J/IOCHK	;SPM OKAY ONLY IN KERNEL MODE
						; 3963	.IFNOT/JPC SUPPORT
U 0503, 0055,4001,0000,0000,0000,3610,0000	; 3964		VMA_VMA+1
						; 3965	=
						; 3966	.IF/JPC SUPPORT
						; 3967		AR_JPC,STORE
						; 3968	=	MEM_AR,VMA_VMA+1
						; 3969	.ENDIF/JPC SUPPORT
U 0055, 0060,3240,2007,0000,0036,3610,0140	; 3970		AR_UPFW,STORE,VMA_VMA+1
U 0060, 0064,4001,0003,0000,0002,3610,0000	; 3971		MEM_AR,VMA_VMA+1
U 0064, 0075,3240,2007,0000,0036,0010,0141	; 3972		AR_DBR1,STORE
U 0075, 0076,4001,0003,0000,0002,3610,0000	; 3973		MEM_AR,VMA_VMA+1
U 0076, 0066,3200,2007,0000,0036,0010,0142	; 3974		AR_DBR2,STORE,J/STMEM
						; 3975	
						; 3976	=11***0
U 0166, 1302,3240,0003,0000,0022,6121,0000	; 3977	LPM1:	AR_MEM,CALL,SKP KERNEL,J/GETEEB	;LPM LEGAL ONLY IN KERNEL MODE
U 0167, 0117,3703,0000,0000,0060,2010,0417	; 3978		DATAO APR
U 0117, 0120,4001,4000,0000,2000,2210,0000	; 3979		REL ECL EBUS,AR_ARX
						; 3980	.IF/JPC SUPPORT
						; 3981		JPC_AR
						; 3982	.ENDIF/JPC SUPPORT
U 0120, 0121,0001,0000,0000,0012,3610,0000	; 3983		VMA_VMA+1,LOAD AR
U 0121, 0122,3200,0003,0000,0022,3610,0000	; 3984		AR_MEM,VMA_VMA+1
U 0122, 0123,3243,7700,0000,0000,0010,0000	; 3985		BAG-BITING NO-OP
U 0123, 0124,0001,0007,0000,0012,1010,0140	; 3986		UPFW_AR,LOAD AR
U 0124, 0125,3240,0003,0000,0022,3610,0000	; 3987		AR_MEM,VMA_VMA+1
U 0125, 0126,3243,7700,0000,0000,0010,0000	; 3988		BAG-BITING NO-OP
U 0126, 0127,4001,0007,0000,0012,1010,0141	; 3989		DBR1_AR,LOAD AR
U 0127, 0130,3200,0003,0000,0022,0010,0000	; 3990		AR_MEM
U 0130, 0131,3243,7700,0000,0000,0010,0000	; 3991		BAG-BITING NO-OP
U 0131, 1350,4001,0007,0000,0000,1010,0142	; 3992		DBR2_AR,J/CLRPT1		;REALLY LPMR - CLEAR PAGE TABLE
						; 3993	.ENDIF/LPM.SPM
						; 3994	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 82
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	STACK INSTRUCTIONS -- PUSHJ, PUSH, POP, POPJ

						; 3995	.TOC	"STACK INSTRUCTIONS -- PUSHJ, PUSH, POP, POPJ"
						; 3996	
						; 3997		.DCODE
D 0260, 0000,0417				; 3998	260:	I,	J/PUSHJ
D 0261, 4000,0416				; 3999		R, B/0,	J/PUSH
D 0262, 3000,0504				; 4000		W,	J/POP
D 0263, 0001,0505				; 4001		I,	J/POPJ
						; 4002		.UCODE
						; 4003	
						; 4004	;PUSHJ
						; 4005	; ENTER WITH E IN AR
						; 4006	;PUSH
						; 4007	; ENTER WITH (E) IN AR
						; 4008	
						; 4009	=00***0
						; 4010	PUSH:	ARX_AC0+1,GEN CRY18,SKP CRY0,	;BUMP BOTH HALVES OF AC,
U 0416, 0154,4660,0200,0000,0356,5417,0000	; 4011			VMA/AD,STORE,J/STMAC	;PUT AR ONTO LIST
						; 4012	
U 0417, 0132,4033,2040,0000,0020,0025,0000	; 4013	PUSHJ:	BR/AR,AR_PC+1			;SAVE JUMP ADDR, GET PC
						; 4014	=	ARX_AC0+1,GEN CRY18,SKP CRY0,	;COMPUTE STACK ADDRESS
U 0132, 0172,4640,0200,0000,0356,5417,0000	; 4015			VMA/AD,STORE,J/JSTAC	;AND PREPARE TO STORE PC
						; 4016	=*1**00
U 0170, 1754,3703,0000,0000,0313,0021,0000	; 4017	JRA1:	VMA_AR,LOAD ARX,CALL,J/XFERW	;GET SAVED AC
						; 4018	=10
						; 4019	.IFNOT/JPC
						; 4020	JSTAC:	FIN STORE,VMA_BR,FETCH,		;STORE PC, JUMP ADDR TO VMA
U 0172, 0070,3202,4003,0000,2306,0010,0400	; 4021			AR_ARX,J/STORAC		;PREPARE TO STORE AC VALUE
						; 4022	.IF/JPC
						; 4023	JSTAC:	FIN STORE,VMA_BR,FETCH,		;STORE AC, THEN RECORD JPC
						; 4024			AR_ARX,SKP USER,J/JPCSTO
						; 4025	.ENDIF/JPC
U 0173, 0172,0001,0003,0000,0002,1110,0040	; 4026		MEM_AR,TRAP2,J/JSTAC		;CAUSE PDL OVRFLO
						; 4027	
						; 4028	=1****0
						; 4029	STMAC:	FIN STORE,I FETCH,		;STORE RESULT, GET NEXT INSTR
U 0154, 0070,4001,4003,0000,2206,0033,0400	; 4030			AR_ARX,B DISP,J/STSELF	;STORE AC IF B=0
						; 4031		MEM_AR,TRAP2,			;PDL OVFLO, CAUSE TRAP
U 0155, 0067,0001,4003,0000,2002,1110,0040	; 4032			AR_ARX,J/IFSTAC		;UPDATE AC BEFORE TRAPPING
						; 4033	
						; 4034	
						; 4035	;POP, POPJ
						; 4036	
						; 4037	=00***0
						; 4038	;ENTER WITH C(AC) IN AR, E IN BR, OK TO WRITE IN E
U 0504, 0141,3701,0000,0000,0313,0010,0000	; 4039	POP:	VMA_AR,LOAD ARX,J/POP1		;BEGIN DATA FETCH FROM STACK
						; 4040	
						; 4041	;ENTER WITH E IN AR
U 0505, 0133,3240,2000,0000,0333,0010,0000	; 4042	POPJ:	AR_AC0,VMA/AD,LOAD ARX		;START FETCH FROM STACK
U 0133, 0134,1703,2000,0000,0040,5411,0000	; 4043	=	AR_AR-1,INH CRY18,SKP CRY0	;DECR STACK POINTER, CHECK UNDERFLOW
						; 4044	.IFNOT/JPC.RING
						; 4045	=*1***0
U 0134, 0136,3240,0003,0000,0022,1110,0040	; 4046		ARX_MEM,TRAP2,J/POPJ1		;UNDERFLOW OCCURRED
U 0135, 0136,3200,0003,0000,0022,0010,0000	; 4047		ARX_MEM				;GET STACK WORD
						; 4048	.IFNOT/JPC
U 0136, 0071,3713,0000,0000,0306,1010,0400	; 4049	POPJ1:	AC0_AR,VMA_ARX,FETCH,J/NOP	;SET NEW AC VALUE, JUMP
						; 4050	.IF/JPC
						; 4051	POPJ1:	AC0_AR,VMA_ARX,FETCH,J/JPCIFY
						; 4052	.ENDIF/JPC
						; 4053	.IF/JPC.RING
						; 4054	=*1***0
						; 4055		ARX_MEM,TRAP2			;TWO TICKS SLOWER ON OVERFLOW, BUT WHO CARES?
						; 4056		ARX_MEM,SKP USER,SC_#,#/32.	;JPC.RING NEEDS 32. IN SC
						; 4057		AC0_AR,VMA_ARX,FETCH,J/JPCEX
						; 4058		AC0_AR,VMA_ARX,FETCH,J/JPCUSR
						; 4059	.ENDIF/JPC.RING
						; 4060	
						; 4061	
U 0141, 0174,1701,2000,0000,0040,5411,0000	; 4062	POP1:	AR_AR-1,INH CRY18,SKP CRY0	;ADJUST POINTER, CHECK TRAP
						; 4063	=*1***0
U 0174, 0175,3200,0003,0000,0022,1110,0040	; 4064		ARX_MEM,TRAP2			;PDL OVFLO, CAUSE TRAP
U 0175, 0143,3240,0003,0000,0022,1610,0100	; 4065		ARX_MEM,SR_#,#/100		;SET DEST CONTEXT FLAG
						; 4066		AR_ARX,AC0_AR,			;FIRST STORE AC
U 0143, 0066,3202,4000,0000,2316,1010,0000	; 4067			VMA_BR,STORE,J/STMEM	;THEN MEMORY
						; 4068	
						; 4069		;PUT RESULT AWAY, THEN AC
						; 4070	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 83
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	SUBROUTINE CALL/RETURN -- JSR, JSP, JSA, JRA

						; 4071	.TOC	"SUBROUTINE CALL/RETURN -- JSR, JSP, JSA, JRA"
						; 4072	
						; 4073		.DCODE
D 0264, 0000,0507				; 4074	264:	I,		J/JSR
D 0265, 0001,0506				; 4075		I,		J/JSP
D 0266, 0000,0510				; 4076		I,		J/JSA
D 0267, 0001,0511				; 4077		I,		J/JRA
						; 4078		.UCODE
						; 4079	
						; 4080	=00***0
						; 4081	.IFNOT/JPC
U 0506, 0070,4031,2000,0000,0026,0025,0400	; 4082	JSP:	AR_PC+1,FETCH,J/STORAC
						; 4083	.IF/JPC
						; 4084	JSP:	AR_PC+1,FETCH,SKP USER,J/JPCSTO
						; 4085	.ENDIF/JPC
						; 4086	
U 0507, 0147,4031,2000,0000,0036,0025,0000	; 4087	JSR:	AR_PC+1,STORE
						; 4088	=
						; 4089	.IFNOT/JPC
U 0147, 0071,0001,0003,0000,0006,3610,0400	; 4090		FIN STORE,VMA_VMA+1,FETCH,J/NOP
						; 4091	.IF/JPC
						; 4092		FIN STORE,VMA_VMA+1,FETCH,J/JPCIFY
						; 4093	.ENDIF/JPC
						; 4094	
						; 4095	=00***0
U 0510, 0176,3240,2400,0000,3036,0010,0000	; 4096	JSA:	ARX_AR SWAP,AR_AC0,STORE,J/JSA1	;SAVE E IN ARX LEFT, GET AC
						; 4097	
U 0511, 0171,3240,2040,0000,0020,0010,0000	; 4098	JRA:	BR/AR,AR_AC0			;GET AC, SAVE JUMP ADDR
U 0171, 0170,0001,4000,0000,3001,0010,0020	; 4099	=	ARR_ARL,ARL_0.M,J/JRA1		;GET AC LEFT
						; 4100	
U 0176, 0177,4001,0003,0000,0006,3610,0400	; 4101	JSA1:	FIN STORE,VMA_VMA+1,FETCH	;JUMP TO E+1
						; 4102	.IFNOT/JPC
U 0177, 0065,4033,2000,0000,2020,0022,0004	; 4103		ARR_PC+1,ARL_ARXL,J/STAC	;PC+1,,E GOES TO AC
						; 4104	.IF/JPC
						; 4105		ARR_PC+1,ARL_ARXL,SKP USER,J/JPCSTO
						; 4106	.ENDIF/JPC
						; 4107	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 84
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	UUO'S

						; 4108	.TOC	"UUO'S"
						; 4109	;LUUO'S TRAP TO CURRENT CONTEXT
						; 4110	; EXTENDED INSTRUCTION SET IS "HIDDEN" BENEATH LUUO OPCODES
						; 4111	
						; 4112		.DCODE
D 0000, 0001,1002				; 4113	000:	I,		J/UUO
						; 4114	.IF/EIS
						; 4115		I,	SJCL,	J/L-CMS		;CMSL HIDDEN BENEATH LUUO
						; 4116		I,	SJCE,	J/L-CMS
						; 4117		I,	SJCLE,	J/L-CMS
						; 4118		I,	B/2,	J/L-EDIT	;EDIT HIDDEN UNDER 004
						; 4119		I,	SJCGE,	J/L-CMS
						; 4120		I,	SJCN,	J/L-CMS
						; 4121		I,	SJCG,	J/L-CMS
						; 4122	
						; 4123	.IF/DECIMAL
						; 4124	010:	I,	B/1,	J/L-DBIN	;CVTDBO
						; 4125		I,	B/4,	J/L-DBIN	;CVTDBT
						; 4126		I,	B/1,	J/L-BDEC	;CVTBDO
						; 4127		I,	B/0,	J/L-BDEC	;CVTBDT
						; 4128	.IFNOT/DECIMAL
						; 4129	010:	I,		J/LUUO
						; 4130		I,		J/LUUO
						; 4131		I,		J/LUUO
						; 4132		I,		J/LUUO
						; 4133	.ENDIF/DECIMAL
						; 4134	
						; 4135	014:	I,	B/1,	J/L-MVS		;MOVSO
						; 4136		I,	B/0,	J/L-MVS		;MOVST
						; 4137		I,	B/2,	J/L-MVS		;MOVSLJ
						; 4138		I,	B/3,	J/L-MVS		;MOVSRJ
						; 4139	.IFNOT/EIS
D 0001, 0000,1006				; 4140		I,		J/LUUO
D 0002, 0000,1006				; 4141		I,		J/LUUO
D 0003, 0000,1006				; 4142		I,		J/LUUO
						; 4143	
D 0004, 0000,1006				; 4144	004:	I,		J/LUUO
D 0005, 0000,1006				; 4145		I,		J/LUUO
D 0006, 0000,1006				; 4146		I,		J/LUUO
D 0007, 0000,1006				; 4147		I,		J/LUUO
						; 4148	
D 0010, 0000,1006				; 4149	010:	I,		J/LUUO
D 0011, 0000,1006				; 4150		I,		J/LUUO
D 0012, 0000,1006				; 4151		I,		J/LUUO
D 0013, 0000,1006				; 4152		I,		J/LUUO
						; 4153	
D 0014, 0000,1006				; 4154	014:	I,		J/LUUO
D 0015, 0000,1006				; 4155		I,		J/LUUO
D 0016, 0000,1006				; 4156		I,		J/LUUO
D 0017, 0000,1006				; 4157		I,		J/LUUO
						; 4158	.ENDIF/EIS
						; 4159	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 85
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	UUO'S

						; 4160	;USER UUO'S 20-37
						; 4161	
D 0020, 0000,1006				; 4162	020:	I,	J/LUUO
D 0021, 0000,1006				; 4163		I,	J/LUUO
D 0022, 0000,1006				; 4164		I,	J/LUUO
D 0023, 0000,1006				; 4165		I,	J/LUUO
						; 4166	
D 0024, 0000,1006				; 4167	024:	I,	J/LUUO
D 0025, 0000,1006				; 4168		I,	J/LUUO
D 0026, 0000,1006				; 4169		I,	J/LUUO
D 0027, 0000,1006				; 4170		I,	J/LUUO
						; 4171	
D 0030, 0000,1006				; 4172	030:	I,	J/LUUO
D 0031, 0000,1006				; 4173		I,	J/LUUO
D 0032, 0000,1006				; 4174		I,	J/LUUO
D 0033, 0000,1006				; 4175		I,	J/LUUO
						; 4176	
D 0034, 0000,1006				; 4177	034:	I,	J/LUUO
D 0035, 0000,1006				; 4178		I,	J/LUUO
D 0036, 0000,1006				; 4179		I,	J/LUUO
D 0037, 0000,1006				; 4180		I,	J/LUUO
						; 4181	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 86
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	UUO'S

						; 4182	;MONITOR UUO'S -- TRAP TO EXEC
						; 4183	
D 0040, 0001,1002				; 4184	040:	I,	J/MUUO		;CALL
D 0041, 0001,1002				; 4185		I,	J/MUUO		;INIT
D 0042, 0001,1002				; 4186		I,	J/MUUO
D 0043, 0001,1002				; 4187		I,	J/MUUO
D 0044, 0001,1002				; 4188		I,	J/MUUO
D 0045, 0001,1002				; 4189		I,	J/MUUO
D 0046, 0001,1002				; 4190		I,	J/MUUO
D 0047, 0001,1002				; 4191		I,	J/MUUO		;CALLI
D 0050, 0001,1002				; 4192		I,	J/MUUO		;OPEN
D 0051, 0001,1002				; 4193		I,	J/MUUO		;TTCALL
D 0052, 0001,1002				; 4194		I,	J/MUUO
D 0053, 0001,1002				; 4195		I,	J/MUUO
D 0054, 0001,1002				; 4196		I,	J/MUUO
D 0055, 0001,1002				; 4197		I,	J/MUUO		;RENAME
D 0056, 0001,1002				; 4198		I,	J/MUUO		;IN
D 0057, 0001,1002				; 4199		I,	J/MUUO		;OUT
						; 4200	.IFNOT/JPC TEST
D 0060, 0001,1002				; 4201		I,	J/MUUO		;SETSTS
D 0061, 0001,1002				; 4202		I,	J/MUUO		;STATO
D 0062, 0001,1002				; 4203		I,	J/MUUO		;GETSTS
D 0063, 0001,1002				; 4204		I,	J/MUUO		;STATZ
D 0064, 0001,1002				; 4205		I,	J/MUUO		;INBUF
D 0065, 0001,1002				; 4206		I,	J/MUUO		;OUTBUF
D 0066, 0001,1002				; 4207		I,	J/MUUO		;INPUT
D 0067, 0001,1002				; 4208		I,	J/MUUO		;OUTPUT
						; 4209	.IF/JPC TEST
						; 4210		I,	SJC-,	J/TJMP
						; 4211		I,	SJCL,	J/TJMP
						; 4212		I,	SJCE,	J/TJMP
						; 4213		I,	SJCLE,	J/TJMP
						; 4214		I,	SJCA,	J/TJMP
						; 4215		I,	SJCGE,	J/TJMP
						; 4216		I,	SJCN,	J/TJMP
						; 4217		I,	SJCG,	J/TJMP
						; 4218	.ENDIF/JPC TEST
						; 4219	
						; 4220	
						; 4221	.IFNOT/LISP
D 0070, 0001,1002				; 4222		I,	J/MUUO		;CLOSE
D 0071, 0001,1002				; 4223		I,	J/MUUO		;RELEAS
						; 4224	.IF/LISP
						; 4225		I,	J/LSPGCM	;LSPGCM (OPCODE 070)
						; 4226		I,	J/LSPGCS	;LSPGCS (OPCODE 071)
						; 4227	.ENDIF/LISP
D 0072, 0001,1002				; 4228		I,	J/MUUO		;MTAPE
D 0073, 0001,1002				; 4229		I,	J/MUUO		;UGETF
						; 4230	.IFNOT/XCTR
						; 4231		I,	J/MUUO		;USETI
						; 4232		I,	J/MUUO		;USETO
						; 4233	.IF/XCTR
D 0074, 4000,0512				; 4234		R,	J/PXCT		;PXCT FOR ITS (OPCODE 074)
D 0075, 4000,0512				; 4235		R,	J/PXCT		;PXCTI FOR ITS (OPCODE 075)
						; 4236	.ENDIF/XCTR
						; 4237	.IFNOT/LPM.SPM
						; 4238		I,	J/MUUO		;LOOKUP
						; 4239		I,	J/MUUO		;ENTER
						; 4240	.IF/LPM.SPM
D 0076, 4000,0500				; 4241		R,	J/LPM		;LOAD PAGE MAP (OPCODE 076)
D 0077, 3000,0502				; 4242		W,	J/SPM		;STORE PAGE MAP (OPCODE 077)
						; 4243	.ENDIF/LPM.SPM
						; 4244	
						; 4245	;EXPANSION OPCODES
						; 4246	
						; 4247	100:
						; 4248	.IFNOT/LISP
D 0100, 0001,1002				; 4249		I,	J/UUO		;UJEN
D 0101, 0001,1002				; 4250		I,	J/UUO
						; 4251	.IF/LISP
						; 4252		I,	J/LSPDBG	;LSPDBG (OPCODE 100, TEMP)
						; 4253		I,	J/LSP101
						; 4254	.ENDIF/LISP
D 0102, 0001,1002				; 4255		I,	J/UUO
D 0103, 0001,1002				; 4256		I,	J/UUO
						; 4257		.UCODE
						; 4258	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 87
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	UUO'S

						; 4259	;HERE FOR UNDEFINED OPS (UUO'S) AND ILLEGAL INSTRUCTIONS
						; 4260	;E IS IN AR, OPCODE AND AC IN BRX
						; 4261	
						; 4262	1002:					;FIXED ADDRESS TO COOPERATE
						; 4263						;WITH EXTEND AND OTHER OPS
						; 4264	UUO:					;UNDEFINED OP'S .GE. 100
						; 4265	MUUO:	ARX_BRX,SC_#,#/13.,
U 1002, 0264,3202,0600,0302,0000,7021,0015	; 4266			SKP INTRPT,CALL,J/ROTS
U 1003, 0221,4001,4000,0000,0100,3010,0424	; 4267	1003:	AR_SHIFT,VMA_#,#/424,J/MUUO1
						; 4268	
						; 4269	;HERE ON LUUO'S
						; 4270	; E IN AR, INSTR IN BRX
						; 4271	1005:
						; 4272	.IFNOT/EIS
						; 4273	FIX:	FE_EXP-#,#/244,SKP SCAD0,	;GET BINARY POINT POSITION
U 1005, 0734,5401,0200,5231,0020,5116,0244	; 4274			ARX_AR SIGN,J/FIX1	;SET ROUNDING CONSTANT, GO FIX
						; 4275	.IF/EIS
						; 4276	L-CMS:	J/LUUO				;LOC FOR HIDING STRING COMPARE
						; 4277	.ENDIF/EIS
						; 4278	1006:
						; 4279	.IF/EIS
						; 4280	L-EDIT:					;HIDE EDIT HERE
						; 4281	.ENDIF/EIS
						; 4282	LUUO:	ARX_BRX,SC_#,#/13.,
U 1006, 0264,3202,0600,0302,0000,7021,0015	; 4283			CALL,SKP INTRPT,J/ROTS	;COMBINE E WITH UUO
U 1007, 0220,4001,4000,0000,0116,3010,0040	; 4284	1007:	AR_SHIFT,VMA_40,STORE		;STORE OPCODE ETC AT 40
						; 4285		FIN STORE,VMA_41,
U 0220, 0010,0001,0003,0000,0113,3010,0041	; 4286			LOAD ARX,J/XCTW		;GO PERFORM 41
						; 4287	
						; 4288	.IF/EIS
						; 4289	.IF/DECIMAL
						; 4290	1010:
						; 4291	L-DBIN:	J/LUUO				;DBIN AT 2010
						; 4292	1011:
						; 4293	L-BDEC:	J/LUUO				;BDEC AT 2011
						; 4294	.ENDIF/DECIMAL
						; 4295	1012:
						; 4296	L-MVS:	J/LUUO				;MOVE STRING AT 2012
						; 4297	.ENDIF/EIS
						; 4298	
						; 4299	.IF/JPC TEST
						; 4300	=00****
						; 4301	TJMP:	AR_AC0,JUMP FETCH,B DISP,J/JMPJPC
						; 4302	.ENDIF/JPC TEST
						; 4303	
						; 4304	.IF/LISP
						; 4305	=00***0
						; 4306	LSPGCM:	BR/AR,MQ_AR,AR_GCSTBR,SKP AD NE,J/LGCM0	;START OF GC MARK INSTR
						; 4307	LSPGCS:	BR/AR,SC_EA,AR_GCSTBR,SKP AD NE,J/LGCS0	;START OF GC SWEEP INSTR
						; 4308	=
						; 4309	=00***0
						; 4310	LSPDBG:	AR_GCSTBR,J/LSPDB1
						; 4311	LSP101:	J/UUO
						; 4312	=
						; 4313	.ENDIF/LISP
						; 4314	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 88
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	UUO'S

						; 4315	;HERE ON MUUO'S
						; 4316	; E IN AR, OP AND AC IN BRX
						; 4317	
						; 4318	;MUUO:	ARX_BRX,SC_#,#/13.,CALL,J/ROTS
						; 4319	;	AR_SHIFT,VMA_#,#/424
U 0221, 0222,0001,0000,0000,0016,0026,0221	; 4320	MUUO1:	STORE,UPT REF			;FIRST, STORE INSTRUCTION
U 0222, 0260,4031,2003,0000,0036,3625,0000	; 4321		FIN STORE,AR_PC+1,VMA_VMA+1,STORE	;NEXT, PC
						; 4322	=11**00
						; 4323		MEM_AR,VMA_VMA+1,SC_#,#/70,
U 0260, 1303,0001,0003,0302,0002,3621,0070	; 4324			CALL,J/GTEEB1
U 0261, 1333,0001,3000,0000,0060,2021,0511	; 4325		DATAI PAG(L),CALL,J/PCTXT	;GET PROCESS CONTEXT VARIABLES
U 0263, 0223,3733,0000,0000,0060,2010,0426	; 4326	=11	LD PREV CTXT			;PCS FROM PC, CWSX FROM SXCT
						; 4327		AR_SHIFT,ARL_BRL.S,		;COMBINE UBR WITH AC BLKS, CWSX
						; 4328			STORE,			; STORE THAT AT 426
U 0223, 0224,3242,4000,0000,0016,2222,0002	; 4329			COND/EBUS CTL,EBUS CTL/2; & RELEASE ECL EBUS
U 0224, 0225,4001,0003,0000,0102,3210,0430	; 4330		MEM_AR,VMA_430+MODE		;NOW READY TO GET NEW PC
U 0225, 0226,0001,0000,0000,0012,0026,0221	; 4331		LOAD AR,UPT REF			;FETCH NEW PC
U 0226, 0000,3200,0003,0000,0022,1610,0000	; 4332	NEWPC:	AR_MEM,SR_0,J/START		;USE IT
						; 4333	
						; 4334	
						; 4335	;ROTATE SUBROUTINE
						; 4336	
						; 4337	=11***0
U 0264, 0003,4001,4400,5302,0000,0003,0044	; 4338	ROTS:	AR_SHIFT,ARX_SHIFT,SC_#-SC,#/36.,RETURN3
U 0265, 0144,0001,0000,0000,0000,7710,0000	; 4339		TAKE INTRPT		;FIXES LUUO IN USER 41 LOOP BUG
						; 4340	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 89
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	JSYS, ADJSP

						; 4341	.TOC	"JSYS, ADJSP"
						; 4342	
						; 4343		.DCODE
						; 4344	104:
						; 4345	.IFNOT/MVSQZ
D 0104, 0001,1002				; 4346		I,		J/UUO		;JSYS
						; 4347	.IF/MVSQZ
						; 4348		R,		J/MVSQZ
						; 4349	.ENDIF/MVSQZ
D 0105, 0000,1000				; 4350		I,	B/0,	J/ADJSP
						; 4351		.UCODE
						; 4352	
						; 4353	;HERE FOR ADJSP INSTRUCTION
						; 4354	; ENTER WITH E IN AR, PREFETCH IN PROGRESS
						; 4355	
						; 4356	.IFNOT/MVSQZ
						; 4357	1000:					;PUT ADJSP NEXT TO UUO
						; 4358	.IF/MVSQZ
						; 4359	=00***0
						; 4360	MVSQZ:	FE_#,#/5,ARX_0S,MQ_MQ*.25,	;FE COUNTS LOOP, CLEAR MQ00,
						; 4361			J/MVSQZ0		;ARX ACCUMULATES SQUOZE
						; 4362	.ENDIF/MVSQZ
U 1000, 0227,4001,0000,0000,3000,0610,0004	; 4363	ADJSP:	ARL_ARR,ARR_ARR			;PUT E IN BOTH HALVES
						; 4364	=	AR_AR*AC0,AD/A+B,INH CRY18,	;ADJUST POINTER,
U 0227, 0230,0600,2200,0000,0020,4511,0000	; 4365			ARX/AD,SKP AR0		;SKIP IF NEGATIVE
						; 4366	=0	GEN AR*AC0,AD/ANDCA,		;TEST FOR - TO + CHANGE
U 0230, 0154,3000,0000,4000,0020,5510,0000	; 4367			SKP AD0,J/STMAC
						; 4368		GEN AR*AC0,AD/ANDCB,		;TEST FOR + TO - CHANGE
U 0231, 0154,3500,0000,4000,0020,5510,0000	; 4369			SKP AD0,J/STMAC
						; 4370	
						; 4371	
						; 4372	.IF/MVSQZ
						; 4373	=1****0
						; 4374	MVSQZ0:	ARX_ARX*8,GEN P-#,#/41,
						; 4375			SKP SCAD0,J/MVSQZ1
						; 4376		AR_ARX,I FETCH,J/STORAC
						; 4377	=1****0
						; 4378	MVSQZ1:	P_P-#,#/26,ARX_ARX*5,J/MVSQZ5
						; 4379		GEN P-#,#/20,ARX_ARX*5,
						; 4380			SKP SCAD0
						; 4381	=1****0
						; 4382		P_P-#,#/17,J/MVSQZ5
						; 4383		GEN P-#,#/16,SKP SCAD NE
						; 4384	=1****0
						; 4385		P_#,#/45,J/MVSQZ5
						; 4386		GEN P-#,#/1,SKP SCAD0
						; 4387	=1****0
						; 4388		P_P+#,#/42
						; 4389	MVSQZ5:	BR/AR,BRX/ARX,ARX_AR,AR_0S,SC_#,#/6
						; 4390		ARX_SHIFT,AR_BR
						; 4391		ARX_ARX+BRX,AR_SHIFT,
						; 4392			FE_FE-1,SKP SCAD0,J/MVSQZ0
						; 4393	.ENDIF/MVSQZ
						; 4394	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 90
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	XCT, PXCT, SXCT

						; 4395	.TOC	"XCT, PXCT, SXCT"
						; 4396	;HERE FOR EXTENDED ADDRESSING INSTRUCTIONS
						; 4397	
						; 4398	.IFNOT/XCTR
						; 4399	=1****0
						; 4400	XCT1:	SKP USER,J/PXCT			;HERE ON XCT, NO INTERRUPT
						; 4401		TAKE INTRPT			;GET OUT OF LONG XCT CHAIN
						; 4402	=1****0
						; 4403	.IFNOT/XADDR
						; 4404	PXCT:	BR/AR,ARX_AR,SET PXCT,J/PXCTEA	;SETUP CONTROL FLOPS
						; 4405	.IF/XADDR
						; 4406	PXCT:	SET PXCT
						; 4407	.ENDIF/XADDR
						; 4408	UXCT:	ARX_AR (AD),LOAD IR,J/XCTGO,	;COPY INSTR TO ARX, IR
						; 4409			TIME/3T			;MAYBE THIS WILL FIX SUSPECTED LOSSAGE?
						; 4410	.IF/XCTR
						; 4411	=00***0
U 0512, 2002,4001,0000,0000,0000,6121,0000	; 4412	PXCT:	CALL,SKP KERNEL,J/IOCHK		;XCTR OKAY ONLY IN KERNEL MODE
U 0513, 0532,4001,0000,0000,0000,7010,0000	; 4413		SKP INTRPT,J/XCTR		;XCTR AND XCTRI
						; 4414	
						; 4415	=*1***0
U 0532, 0237,0001,0440,0000,1000,1510,0020	; 4416	XCTR:	BR/AR,ARX_AR,SET PXCT,J/PXCTEA
U 0533, 0144,0001,0000,0000,0000,7710,0000	; 4417		TAKE INTRPT
						; 4418	=*1***0
U 0232, 0152,3703,0200,0000,0000,1410,0000	; 4419	UXCT:	ARX_AR (AD),LOAD IR,J/XCTGO
U 0233, 0144,0001,0000,0000,0000,7710,0000	; 4420		TAKE INTRPT
						; 4421	.ENDIF/XCTR
						; 4422	
						; 4423		.DCODE
						; 4424	.IFNOT/SXCT
						; 4425	106:	I,	J/UUO
						; 4426		I,	J/UUO
						; 4427	.IF/SXCT	;NOTE: THE SXCT INSTRUCTION IS A TEMPORARY MECHANISM
D 0106, 4001,1014				; 4428	106:	R,	J/SXCT		;INTENDED FOR DIAGNOSTICS ONLY
D 0107, 0001,1016				; 4429		I,	J/UUO107
						; 4430	.ENDIF/SXCT
						; 4431		.UCODE
						; 4432	
						; 4433	.IF/SXCT
						; 4434	1014:					;PUT NEXT TO UUO107
U 1014, 2002,4001,0000,0000,0000,6121,0000	; 4435	SXCT:	SKP KERNEL,CALL,J/IOCHK		;LEGAL IN KERNEL MODE ONLY
						; 4436	1015:	BR/AR,ARX_AR,AR_AC0,		;SHUFFLE INSTR TO GET BASE REG
U 1015, 0234,3200,2440,0000,1020,1510,0040	; 4437			SET SXCT		;SETUP HARDWARE FLAGS
U 0234, 0236,4001,0000,0000,0000,4610,0000	; 4438		SKP AC#0			;CHOOSE LOOP FOR EA CALC
						; 4439	=0	BR/AR,AR_BR,LOAD IR,		;AC0 IS BASE INDEX
						; 4440			BRX/ARX,ARL_0.M,
U 0236, 0340,3242,2060,0000,0001,1436,0020	; 4441			EA MOD DISP,J/SXCTB
						; 4442	.ENDIF/SXCT
						; 4443	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 91
; DSK: UCODE; SKPJMP 32	17:13:16 20-AUG-2018	XCT, PXCT, SXCT

						; 4444	;EXTENDED ADDRESSING CONTINUED
						; 4445	
						; 4446	.IFNOT/XADDR
						; 4447	PXCTEA:	AR_BR,LOAD IR,ARL_0.M,		;GET EXT ADDR FROM XR OR INDRCT
U 0237, 0274,3242,2020,0000,0001,1410,0020	; 4448			BRX/ARX,J/XIND2
						; 4449	=00
U 0270, 0000,3701,0000,0000,0204,0002,0000	; 4450	PXLOOP:	GEN AR,A READ			;GO DO INSTR
U 0271, 0000,0600,2002,4000,0224,0002,0000	; 4451		AR_AR+XR,A READ
U 0272, 0240,3703,0000,0000,0110,7010,0000	; 4452		GEN AR,A INDRCT,SKP INTRPT,J/XIND1
U 0273, 0240,0600,0002,4000,0130,7010,0000	; 4453		GEN AR+XR,A INDRCT,SKP INTRPT
						; 4454	
						; 4455	=1****0
U 0240, 0274,3200,0003,0000,0042,0037,0000	; 4456	XIND1:	AR_MEM,ARX_MEM,EA TYPE DISP,J/XIND2
U 0241, 0144,4001,0000,0000,0002,7710,0000	; 4457		MB WAIT,TAKE INTRPT
						; 4458	=1***00
U 0274, 0270,0001,0000,0000,0000,0036,0000	; 4459	XIND2:	EA MOD DISP,J/PXLOOP		;CURRENT OR PREV WITHOUT CWSX
U 0275, 0000,3711,2000,0000,0204,0002,0000	; 4460		AR_ARX (AD),A READ		;PREV AND CWSX
						; 4461	.IF/SXCT
U 0276, 0000,3711,2000,0000,0204,0002,0000	; 4462		AR_ARX (AD),A READ		;SXCT 0,
U 0277, 0340,4001,0000,0000,0000,0036,0000	; 4463		EA MOD DISP,J/SXCTB		;SXCT B,
						; 4464	
						; 4465	=1***00
U 0340, 0000,0602,2004,0000,0224,0002,0000	; 4466	SXCTB:	AR_AR+BR,A READ			;GO
U 0341, 0340,0600,2002,4000,0020,0610,0020	; 4467		AR_AR+XR,ARL_0.C,J/SXCTB	;NO MORE INDIRECTS
						; 4468		GEN AR,A INDRCT,		;FOLLOW INDRCT POINTER
U 0342, 0240,3703,0000,0000,0110,7010,0000	; 4469			SKP INTRPT,J/XIND1
						; 4470		GEN AR+XR,A INDRCT,
U 0343, 0240,0600,0002,4000,0130,7010,0000	; 4471			SKP INTRPT,J/XIND1
						; 4472	.ENDIF/SXCT
						; 4473	.ENDIF/XADDR
						; 4474	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 92
; DSK: UCODE; SHIFT 6	17:13:16 20-AUG-2018	XCT, PXCT, SXCT

						; 4475	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 93
; DSK: UCODE; SHIFT 6	17:13:16 20-AUG-2018	ROTATES AND LOGICAL SHIFTS -- ROT, LSH, JFFO

						; 4476	.TOC	"ROTATES AND LOGICAL SHIFTS -- ROT, LSH, JFFO"
						; 4477	
						; 4478		.DCODE
D 0240, 0000,0516				; 4479	240:	I,	B/0,	J/ASH
D 0241, 0001,0517				; 4480		I,	B/0,	J/ROT
D 0242, 0200,0514				; 4481		I,	B/2,	J/LSH
D 0243, 0000,0515				; 4482		I,		J/JFFO
D 0244, 0100,0702				; 4483		I,	B/1,	J/ASHC
D 0245, 0000,0703				; 4484		I,		J/ROTC
D 0246, 0001,0704				; 4485		I,		J/LSHC
						; 4486	.IFNOT/CIRC
						; 4487		I,		J/UUO
						; 4488	.IF/CIRC
D 0247, 0000,0705				; 4489		I,		J/CIRC
						; 4490	.ENDIF/CIRC
						; 4491		.UCODE
						; 4492	
						; 4493	;ENTER WITH 0,E IN AR
						; 4494	; NOTE THAT VALUES OF SC GREATER THAN 36
						; 4495	; CAUSE THE SHIFTER TO SELECT ARX.
						; 4496	
						; 4497	=00***0
						; 4498	LSH:	AR_AC0,ARL/AD,ARX_0.M,SC_EA,
U 0514, 0320,3200,2000,0002,0021,4413,0042	; 4499			SKP AR18,J/SHR1
						; 4500	
U 0515, 0244,3240,2000,0302,0020,5610,0006	; 4501	JFFO:	AR_AC0,SKP AD NE,SC_#,#/6
						; 4502	=
U 0244, 0071,4001,0001,0000,0206,1010,0400	; 4503	=0	AC1_AR,I FETCH,J/NOP		;AC WAS ZERO, NO JUMP
						; 4504		ARX+MQ_0.M,FE_P,SKP SCAD NE,	;TEST FIRST 6 BITS
U 0245, 0250,4001,4000,0101,0021,5210,0144	; 4505			AR_SHIFT,ARL/SH		;DISCARD THEM
						; 4506	=1****0
						; 4507	JFFO1:	AR_SHIFT,FE_P,SKP SCAD NE,	;TEST NEXT 6 BITS
U 0250, 0250,1721,4600,0101,0020,5210,0000	; 4508			ARX_ARX-1,J/JFFO1	;LOOP, COUNTING, TILL NE
						; 4509		P_FE,ARR_0.S,			;RESTORE 6 NON-ZERO BITS
U 0251, 0266,5103,0500,0000,3020,0022,0210	; 4510			ARX_ARX*-6		;GET POS GROUP COUNT*6
						; 4511	=*1***0
						; 4512	JFFO2:	SKP AR0,AR_2(AR+1),		;LOOP TO FIND A 1
U 0266, 0266,4003,5600,0000,0040,4510,0000	; 4513			ARX_ARX+1,J/JFFO2	;COUNTING AS WE GO
						; 4514	.IFNOT/JPC
U 0267, 1036,1701,6000,0000,0026,0010,0400	; 4515		AR_ARX-1,FETCH,J/STRAC1
						; 4516	.IF/JPC
						; 4517		AR_ARX-1,FETCH,SKP USER
						; 4518	=0	AC1_AR,AR_PC,SC_#,#/32.,J/JPCEX
						; 4519		AC1_AR,AR_PC,SC_#,#/32.,J/JPCUSR
						; 4520	.ENDIF/JPC
						; 4521	
						; 4522	=00***0
						; 4523	ASH:	SC_EA,SKP AR18,			;GET SHIFT AMOUNT
U 0516, 0334,3441,2000,0002,0000,4413,0000	; 4524			AR_0S,J/ASHL		;SET LOW PART = 0
U 0517, 0320,3200,2200,0002,0040,4413,0000	; 4525	ROT:	AR_AC0,ARX_AC0,SC_EA,SKP AR18
						; 4526	=
						; 4527	;SINGLE-WORD LSH/ROT
						; 4528	; FOR ROT, B=0, AR AND ARX BOTH CONTAIN AC
						; 4529	; FOR LSH, B=2, AR HAS AC, ARX IS ZERO
						; 4530	
						; 4531	=00
						; 4532	SHR1:	AR_SHIFT,SC_#+SC,#/-36.,	;DO POS (LEFT) SHIFT, CHK RANGE
U 0320, 0322,0001,4000,2302,0020,5110,0734	; 4533			SKP SCAD0,J/SHR2
						; 4534		ARX_AR (AD),AR_ARX (ADX),
						; 4535			SC_#+SC,#/36.,
U 0321, 0320,3703,6200,2302,0020,5133,0044	; 4536			B DISP,SKP SCAD0,J/SHR1	;MAKE NEG SHIFT TO EQUIV POS
						; 4537	SHR2:	AR_SHIFT,SC_#+SC,#/-36.,
U 0322, 0322,0001,4000,2302,0020,5110,0734	; 4538			SKP SCAD0,J/SHR2	;BRING SC INTO RANGE
U 0323, 0071,0001,0000,0000,0206,1010,0400	; 4539		AC0_AR,I FETCH,J/NOP		;DONE
						; 4540	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 94
; DSK: UCODE; SHIFT 6	17:13:16 20-AUG-2018	ROTATE AND LOGICAL SHIFT COMBINED -- ROTC, LSHC

						; 4541	.TOC	"ROTATE AND LOGICAL SHIFT COMBINED -- ROTC, LSHC"
						; 4542	
						; 4543	=00***0
						; 4544	ASHC:	SC_EA,SKP AR18,			;SETUP SHIFT COUNT
U 0702, 0334,3240,5001,0002,0020,4413,0000	; 4545			AR_AC1*2,J/ASHL		;GET LOW WORD
U 0703, 0235,3240,0201,0000,0020,0010,0000	; 4546	ROTC:	ARX_AC1
U 0235, 0254,3200,2000,0002,0020,4413,0000	; 4547	=	AR_AC0,SC_EA,SKP AR18		;SETUP BOTH AC'S
						; 4548	=1****0
						; 4549	ROT3:	MQ_SHIFT,ARX_AR (AD),
U 0254, 0242,3703,6210,0000,0000,0010,0000	; 4550			AR_ARX (ADX),J/ROT4
						; 4551		ARX_AR (AD),AR_ARX (ADX),
U 0255, 0254,3703,6200,2302,0020,5110,0044	; 4552			SC_#+SC,#/36.,SKP SCAD0,J/ROT3
						; 4553	
						; 4554	ROT4:	AR_MQ,ARX_SHIFT,
U 0242, 0324,3723,2400,2302,0020,5110,0734	; 4555			SC_#+SC,#/-36.,SKP SCAD0
						; 4556	=0	MQ_SHIFT,ARX_AR (AD),
U 0324, 0242,3703,6210,0000,0000,0010,0000	; 4557			AR_ARX (ADX),J/ROT4
U 0325, 1036,4001,4000,0000,2206,1010,0400	; 4558	STDAC:	AC0_AR,AR_ARX,I FETCH,J/STRAC1
						; 4559	
						; 4560	
						; 4561	.IFNOT/CIRC
						; 4562	1004:					;NEXT TO UUO
						; 4563	.IF/CIRC
						; 4564	=00**00
						; 4565	.ENDIF/CIRC
U 0704, 0246,3200,0201,0000,0021,0010,0100	; 4566	LSHC:	ARX_AC1,MQ_0.M,J/LSHC1
						; 4567	.IF/CIRC
						; 4568	=01
U 0705, 0332,3240,2011,0303,1020,0521,0043	; 4569	CIRC:	MQ_AR,AR_AC1,FE_#,SC_#,#/35.,CLR ARX,CALL,J/WDREV
U 0707, 0344,3200,2000,0002,0020,4413,0000	; 4570	=11	SC_EA,AR_AC0,SKP AR18,J/CIRC3
						; 4571	.ENDIF/CIRC
						; 4572	=
U 0246, 0326,3200,2000,0303,0020,4413,0044	; 4573	LSHC1:	AR_AC0,SC_EA,FE_#,#/36.,SKP AR18
						; 4574	=*1***0
						; 4575	LSH2:	MQ_SHIFT,AR_ARX (ADX),
U 0326, 0252,3701,6310,0301,0000,0010,0734	; 4576			ARX/MQ,FE_#,#/-36.,J/LSH3
						; 4577		ARX_AR (AD),AR_0.M,MQ_ARX,
U 0327, 0326,3703,0210,2002,2021,5110,0030	; 4578			SC_FE+SC,SKP SCAD0,J/LSH2
						; 4579	
						; 4580	LSH3:	AR_MQ,ARL/AD,ARX_SHIFT,MQ_0.M,
U 0252, 0330,3721,2400,2002,0021,5110,0102	; 4581			SC_FE+SC,SKP SCAD0
U 0330, 0252,3721,6310,0000,0000,0010,0000	; 4582	=0	MQ_SHIFT,AR_ARX (ADX),ARX/MQ,J/LSH3
U 0331, 1036,4001,4000,0000,2206,1010,0400	; 4583		AC0_AR,AR_ARX,I FETCH,J/STRAC1
						; 4584	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 95
; DSK: UCODE; SHIFT 6	17:13:16 20-AUG-2018	CIRC INSTRUCTION

						; 4585	.TOC	"CIRC INSTRUCTION"
						; 4586	
						; 4587	.IF/CIRC
						; 4588	=1****0
U 0344, 0256,3703,6210,0000,0000,0010,0000	; 4589	CIRC3:	MQ_SHIFT,ARX_AR (AD),AR_ARX (ADX),J/CIRC4
U 0345, 0344,3703,6200,2302,0020,5110,0044	; 4590		ARX_AR (AD),AR_ARX (ADX),SC_#+SC,#/36.,SKP SCAD0,J/CIRC3
						; 4591	
U 0256, 0350,3723,2400,2302,0020,5110,0734	; 4592	CIRC4:	AR_MQ,ARX_SHIFT,SC_#+SC,#/-36.,SKP SCAD0
						; 4593	=1***00
U 0350, 0256,3703,6210,0000,0000,0010,0000	; 4594		MQ_SHIFT,ARX_AR (AD),AR_ARX (ADX),J/CIRC4
U 0351, 0332,3441,4200,0303,2000,1021,0043	; 4595		AC0_AR,AR_ARX,FE_#,SC_#,#/35.,ARX_0S,CALL,J/WDREV
U 0353, 0014,4001,4000,0402,2206,0010,0400	; 4596	=11	AR_ARX,CLR SC,I FETCH,J/STD1
						; 4597	
						; 4598	
						; 4599	;SUBROUTINE TO REVERSE A WORD IN AR, RETURNING IT IN ARX.
						; 4600	;ON ENTRY, ARX MUST BE CLEAR, AND SC AND FE MUST BOTH CONTAIN 35.
						; 4601	;ON EXIT, MQ IS COPIED INTO AR.
						; 4602	
						; 4603	.IFNOT/CIRC.BIG.OPT
						; 4604	=*1***0
U 0332, 0347,4001,0020,0000,0040,0007,0000	; 4605	WDREV:	BRX/ARX,SH DISP,J/WDREV1
U 0333, 0002,3721,2000,0000,0000,0003,0000	; 4606		AR_MQ,RETURN2
						; 4607	=1*0111
U 0347, 0332,3241,0600,3003,0020,5110,0000	; 4608	WDREV1:	FE_FE-1,SC/SCAD,SKP SCAD0,ARX_BRX*2,J/WDREV
U 0357, 0332,4641,0600,3003,0020,5110,0000	; 4609		FE_FE-1,SC/SCAD,SKP SCAD0,ARX_BRX*2+1,J/WDREV
						; 4610	.IF/CIRC.BIG.OPT
						; 4611	=1****0
						; 4612	WDREV:	SH DISP,BR/AR,AR_ARX (ADX),SC_#,#/32.,J/WDREV1
						; 4613		AR_MQ,RETURN2
						; 4614	
						; 4615	=1*0000
						; 4616	WDREV1:	AR_BR,ARX_SHIFT,FE_FE-#,#/4,SC/SCAD,SKP SCAD0,J/WDREV
						; 4617		AR_SHIFT,SC_#,#/10,J/WDREV2
						; 4618		AR_SHIFT,SC_#,#/4,J/WDREV2
						; 4619		AR_SHIFT,SC_#,#/14,J/WDREV2
						; 4620		AR_SHIFT,SC_#,#/2,J/WDREV2
						; 4621		AR_SHIFT,SC_#,#/12,J/WDREV2
						; 4622		AR_SHIFT,SC_#,#/6,J/WDREV2
						; 4623		AR_SHIFT,SC_#,#/16,J/WDREV2
						; 4624		AR_SHIFT,SC_#,#/1,J/WDREV2
						; 4625		AR_SHIFT,SC_#,#/11,J/WDREV2
						; 4626		AR_SHIFT,SC_#,#/5,J/WDREV2
						; 4627		AR_SHIFT,SC_#,#/15,J/WDREV2
						; 4628		AR_SHIFT,SC_#,#/3,J/WDREV2
						; 4629		AR_SHIFT,SC_#,#/13,J/WDREV2
						; 4630		AR_SHIFT,SC_#,#/7,J/WDREV2
						; 4631		AR_SHIFT,SC_#,#/17,J/WDREV2
						; 4632	
						; 4633	WDREV2:	AR0-5_AR0-5 OR SC
						; 4634		AR_BR,ARX_AR,FE_FE-#,#/4,SC/SCAD,SKP SCAD0,J/WDREV
						; 4635	.ENDIF/CIRC.BIG.OPT
						; 4636	.ENDIF/CIRC
						; 4637	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 96
; DSK: UCODE; SHIFT 6	17:13:16 20-AUG-2018	ARITHMETIC SHIFTS -- ASH, ASHC

						; 4638	.TOC	"ARITHMETIC SHIFTS -- ASH, ASHC"
						; 4639	
						; 4640	;COMMON CODE FOR ARITHMETIC SHIFTS
						; 4641	
						; 4642	=*1***0
						; 4643	ASHL:	ARX_AR,AR_AC0,			;INPUT NOW IN AR LONG
U 0334, 0336,3200,2400,2400,1040,5210,0000	; 4644			SKP SC NE,J/ASHL1	;CHECK FOR NULL SHIFT
						; 4645		ARX_AR,AR_AC0,			;HERE IF RIGHT SHIFT
U 0335, 0354,3240,2400,2302,1040,5110,0044	; 4646			SC_#+SC,#/36.,SKP SCAD0	;CHECK FOR LONG ONE
						; 4647	=1****0
U 0354, 0262,5401,2440,0000,0020,0016,0000	; 4648	ASHR1:	BR/AR,ARX_SHIFT,AR_SIGN,J/ASHR2	;LOW OUTPUT TO ARX
						; 4649		ARX_AR,AR_SIGN,			;HERE IF SHIFT COUNT .GT. 36
						; 4650			SC_#+SC,#/36.,		;BRING COUNT UP BY 36
U 0355, 0354,5401,2400,2302,1020,5116,0044	; 4651			SKP SCAD0,J/ASHR1	;LOOP TILL COUNT REASONABLE
						; 4652	
						; 4653	ASHR2:	BRX/ARX,ARX_BR,			;HIGH INPUT TO ARX
U 0262, 0372,3242,0220,0000,0000,0033,0000	; 4654			B DISP,J/ASHX
						; 4655	
						; 4656	;HERE FOR LEFT ARITHMETIC SHIFT
						; 4657	
						; 4658	=*1***0
U 0336, 0071,4001,0000,0000,0206,0010,0400	; 4659	ASHL1:	I FETCH,J/NOP			;SHIFT 0 IS A NOP
U 0337, 0346,5441,2060,0000,0020,0016,0000	; 4660		BR_AR LONG,AR_SIGN		;SAVE INPUT, GEN SIGN WORD
U 0346, 0360,3201,2640,0000,0000,0010,0000	; 4661		BR/AR,AR_BR*2 LONG		;SAVE SIGN, GET MAGNITUDE BITS
						; 4662	=0*
						; 4663	ASHL2:	BRX/ARX,ARX_AR,AR_BR,		;HI IN TO ARX, LOW TO BRX
U 0360, 1154,3202,2420,0000,1000,0021,0000	; 4664			CALL,J/SHIFT		;CALL SHIFTER TO GET BITS LOST
U 0362, 0364,0003,0000,0000,0040,5616,0000	; 4665		SKP AR SIG			;ANY SIGNIFICANT BITS?
						; 4666	=1****0
						; 4667	ASHL3:	AR_ARX,ARX_BRX,			;RESTORE HI TO AR, LOW TO ARX
U 0364, 0366,3242,4600,2300,2020,5110,0734	; 4668			GEN #+SC,#/-36.,SKP SCAD0,J/ASHL4
U 0365, 0364,0001,0000,0000,0000,1110,0420	; 4669		SET AROV,J/ASHL3		;BITS SHIFTED OUT NE SIGN
						; 4670	=*1***0
						; 4671	ASHL4:	AR_ARX,ARX_0S,			;HERE IF E .GT. 36
U 0366, 0360,3441,4200,2302,2000,0010,0734	; 4672			SC_#+SC,#/-36.,J/ASHL2	;SHIFT 36 PLACES, TRY AGAIN
						; 4673		MQ_SHIFT,AR_BRX,CLR ARX,	;HIGH OUTPUT TO MQ,
U 0367, 0370,3202,6010,2302,0000,0533,0777	; 4674			SC_#+SC,#/-1,B DISP	;COMPENSATE FOR EXTRA SHIFT
						; 4675	=1****0
						; 4676	ASHL5:	AR_BR,BRX/ARX,ARX/MQ,		;SIGN TO AR, HIGH OUT TO ARX
						; 4677			SC_#,#/35.,		;READY TO COMBINE THEM
U 0370, 0372,3242,2320,0302,0000,0033,0043	; 4678			B DISP,J/ASHX		;STORE AS APPROPRIATE
U 0371, 0370,4001,0400,0000,0000,0010,0000	; 4679		ARX_SHIFT,J/ASHL5		;LOW OUTPUT TO ARX
						; 4680	
						; 4681	;HERE TO GET FINAL RESULTS.
						; 4682	
						; 4683	=*1***0
U 0372, 0070,4001,4000,0000,0206,0010,0400	; 4684	ASHX:	AR_SHIFT,I FETCH,J/STORAC	;HERE AFTER ASH
						; 4685		AR_SHIFT,ARX_BRX,		;HERE AFTER ASHC
U 0373, 0061,3202,4600,0302,0000,0010,0043	; 4686			SC_#,#/35.,J/ST2AC
						; 4687	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 97
; DSK: UCODE; ARITH 6	17:13:16 20-AUG-2018	ARITHMETIC SHIFTS -- ASH, ASHC

						; 4688	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 98
; DSK: UCODE; ARITH 6	17:13:16 20-AUG-2018	ADD, SUB

						; 4689	.TOC	"ADD, SUB"
						; 4690	
						; 4691		.DCODE
D 0270, 5500,0501				; 4692	270:	R-PF,	AC,	J/ADD
D 0271, 1501,0501				; 4693		I-PF,	AC,	J/ADD
D 0272, 7601,0501				; 4694		RPW,	M,	J/ADD
D 0273, 7700,0501				; 4695		RPW,	B,	J/ADD
						; 4696		.UCODE
						; 4697	
						; 4698	=00****
U 0501, 0060,0600,2000,0000,0025,1333,0000	; 4699	ADD:	AR_AR*AC0,AD/A+B,AD FLAGS,EXIT
						; 4700	=
						; 4701	
						; 4702	
						; 4703		.DCODE
D 0274, 5501,0701				; 4704	274:	R-PF,	AC,	J/SUB
D 0275, 1500,0701				; 4705		I-PF,	AC,	J/SUB
D 0276, 7600,0701				; 4706		RPW,	M,	J/SUB
D 0277, 7701,0701				; 4707		RPW,	B,	J/SUB
						; 4708		.UCODE
						; 4709	
						; 4710	=00****
U 0701, 0352,3240,2040,0000,0020,0010,0000	; 4711	SUB:	AR_AC0,BR/AR
U 0352, 0060,5102,2000,0000,0025,1333,0000	; 4712	=	AR_AR-BR,AD FLAGS,EXIT
						; 4713	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 99
; DSK: UCODE; ARITH 6	17:13:16 20-AUG-2018	MUL, IMUL

						; 4714	.TOC	"MUL, IMUL"
						; 4715	
						; 4716		.DCODE
D 0220, 4501,0712				; 4717	220:	R,	AC,	J/IMUL
D 0221, 0500,0712				; 4718		I,	AC,	J/IMULI
D 0222, 6600,0712				; 4719		RW,	M,	J/IMUL
D 0223, 6701,0712				; 4720		RW,	B,	J/IMUL
						; 4721		.UCODE
						; 4722	
						; 4723	.IFNOT/IMULI.OPT
						; 4724	=00*01*
						; 4725	IMULI:
						; 4726	.IF/IMULI.OPT
						; 4727	=00*000
						; 4728	IMULI:	SKP AR18,GEN AC0,SIGNS DISP,	;OPTIMIZE SPECIAL CASE
						; 4729			TIME/3T,SC_#,#/17.
						; 4730	=010	MQ_AR,AR_AC0,			;HERE FOR IMULI OF + BY +
						; 4731			CLR ARX,FE_#,#/-9.,	; 9 STEPS WILL DO
						; 4732			CALL,J/MULSUB
						; 4733	.ENDIF/IMULI.OPT
						; 4734	IMUL:	MQ_AR,AR_AC0,			;M'IER TO MQ, M'CAND TO AR
						; 4735			CLR ARX,FE_#,#/-18.,
U 0712, 0356,3200,2010,0301,1020,0521,0756	; 4736			CALL,J/MULSUB		;CALL MULTIPLY SUBROUTINE
						; 4737	.IF/IMULI.OPT
						; 4738	=110	AR_SHIFT,SKP AR NE,INH CRY18,	;HERE FROM IMULI
						; 4739			I FETCH,J/MUL1		; AFTER SHORT MULTIPLY
						; 4740	.ENDIF/IMULI.OPT
U 0716, 0374,0001,0000,0302,0040,5616,0043	; 4741		SC_#,#/35.,SKP AR SIG		;CHECK OVERFLOW AND STORE
						; 4742	=
						; 4743	=1****0
U 0374, 0066,4001,4000,0000,0005,0033,0000	; 4744	IMUL2:	AR_SHIFT,B WRITE,J/ST6		;STORE LOW WORD OF PRODUCT
U 0375, 0374,5401,2000,0000,0020,1116,0420	; 4745		SET AROV,AR_SIGN,J/IMUL2	;NOTE OVERFLOW...
						; 4746	
						; 4747	
						; 4748		.DCODE
D 0224, 4101,1100				; 4749	224:	R,	DBL AC,	J/MUL
D 0225, 0100,1100				; 4750		I,	DBL AC,	J/MUL
D 0226, 6601,1100				; 4751		RW,	M,	J/MUL
D 0227, 6200,1100				; 4752		RW,	DBL B,	J/MUL
						; 4753		.UCODE
						; 4754	
						; 4755	=00*000
						; 4756	MUL:	MQ_AR,CLR ARX,			;MULTIPLIER TO MQ
						; 4757			AR_AC0,FE_#,#/-18.,	;SETUP MULTIPLICAND AND STEP CNT
U 1100, 0356,3200,2010,0301,1020,0521,0756	; 4758			CALL,J/MULSUB		;AND GO TO SUBROUTINE
U 1104, 1106,3602,0000,0000,0020,5510,0000	; 4759	=100	GEN AR*BR,AD/AND,SKP AD0	;M'IER NEG, CHECK M'CAND & PROD TOO
						; 4760	=110
U 1106, 0060,0001,0000,0302,0005,0033,0043	; 4761	MUL1:	SC_#,#/35.,EXIT			;STORE DOUBLE RESULT
U 1107, 1106,4001,0000,0000,0000,1110,0420	; 4762		SET AROV,J/MUL1			;MUST HAVE SQUARED 400000,,0
						; 4763	=
						; 4764	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 100
; DSK: UCODE; ARITH 6	17:13:16 20-AUG-2018	MULTIPLY SUBROUTINE

						; 4765	.TOC	"MULTIPLY SUBROUTINE"
						; 4766	; ENTER WITH MULTIPLIER IN MQ,
						; 4767	; MULTIPLICAND IN AR!ARX, MINUS STEP COUNT IN FE
						; 4768	; RETURNS PRODUCT IN AR!ARX!MQ.
						; 4769	; RETURN 4, 6 TELLS SIGN OF MULTIPLIER
						; 4770	; 4 AND 6 ARE USED SO CALLER CAN IGNORE
						; 4771	; DIFFERENCE BY ALIGNMENT OF CALL LOC'N
						; 4772	;[TIME=4+2(-FE)+(# OF ARITH STEPS)] ... IF FE=-18, 40-58.
						; 4773	
						; 4774	MUL	"FE_FE+1,DISP/MUL,MQ/MQ*.25"
						; 4775	
						; 4776	MULSUB:	BR_AR LONG,AR_0S,ARX_0S,	;M'CAND TO BR LONG, CLEAR PROD
U 0356, 0420,3401,2270,4001,0000,0030,0000	; 4777			MUL,J/MULP		;START THE MULTIPLICATION
						; 4778	=000					;GRAB AN 8-WORD BLOCK
						; 4779	MULP:
U 0423, 0006,3701,5500,2401,0000,0703,0001	; 4780	=011	(AR+ARX+MQ)*2,FE_SC,RETURN6	;DISCARD REDUNDANT SIGN BIT
						; 4781	
U 0424, 0420,3701,7710,4001,0000,0030,0000	; 4782	=100	AR_AR*.25 LONG,MUL,J/MULP	;M'IER BITS 00 AFTER POS STEP
						; 4783		AR_(AR+BR)*.25,ARX/ADX*.25,	;01 AFTER +
U 0425, 0420,0602,7710,4001,0020,0030,0000	; 4784			MUL,J/MULP
						; 4785		AR_(AR-2BR)*.25,ARX/ADX*.25,	;10 AFTER +
U 0426, 0430,5101,7710,4001,0020,0030,0000	; 4786			MUL,J/MULM
						; 4787		AR_(AR-BR)*.25,ARX/ADX*.25,
U 0427, 0430,5102,7710,4001,0020,0030,0000	; 4788			MUL,J/MULM		;11 AFTER +
						; 4789	
						; 4790	=000					;ANOTHER 8-WORD BLOCK FOR
						; 4791	MULM:					; AFTER SUBTRACTION STEPS
U 0433, 0004,3703,5500,2401,0000,0703,0001	; 4792	=011	(AR+ARX+MQ)*2,FE_SC,RETURN4	;M'IER WAS NEGATIVE
						; 4793	
						; 4794	=100	AR_(AR+BR)*.25,ARX/ADX*.25,	;M'IER BITS 00 AFTER NEG STEP
U 0434, 0420,0602,7710,4001,0020,0030,0000	; 4795			MUL,J/MULP
						; 4796		AR_(AR+2BR)*.25,ARX/ADX*.25,	;01 AFTER -
U 0435, 0420,0601,7710,4001,0020,0030,0000	; 4797			MUL,J/MULP
						; 4798		AR_(AR-BR)*.25,ARX/ADX*.25,	;10 AFTER -
U 0436, 0430,5102,7710,4001,0020,0030,0000	; 4799			MUL,J/MULM
U 0437, 0430,3703,7710,4001,0000,0030,0000	; 4800		AR_AR*.25 LONG,MUL,J/MULM	;11 AFTER -
						; 4801	
						; 4802	;HERE TO CONTINUE A LONG MULTIPLICATION
						; 4803	; WITH PARTIAL PRODUCT IN AR LONG
						; 4804	
U 0361, 0420,3401,0010,4001,0000,0030,0000	; 4805	MULREE:	AD/0S,MUL,J/MULP		;DIVE IN WITHOUT CLOBBERING AR
						; 4806	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 101
; DSK: UCODE; ARITH 6	17:13:16 20-AUG-2018	DIV, IDIV

						; 4807	.TOC	"DIV, IDIV"
						; 4808	
						; 4809		.DCODE
D 0230, 4101,1112				; 4810	230:	R,	DBL AC,	J/IDIV
D 0231, 0100,1112				; 4811		I,	DBL AC,	J/IDIV
D 0232, 6601,1112				; 4812		RW,	M,	J/IDIV
D 0233, 6200,1112				; 4813		RW,	DBL B,	J/IDIV
						; 4814	
D 0234, 4100,1110				; 4815	234:	R,	DBL AC,	J/DIV
D 0235, 0101,1110				; 4816		I,	DBL AC,	J/DIV
D 0236, 6600,1110				; 4817		RW,	M,	J/DIV
D 0237, 6201,1110				; 4818		RW,	DBL B,	J/DIV
						; 4819		.UCODE
						; 4820	
						; 4821	=00*000
						; 4822	DIV:	BR/AR,ARX+MQ_0.M,		;DIVISOR TO BR
						; 4823			AR_AC1*2,ARL/AD*2,	;LOW DIVIDEND TO AR
U 1110, 0363,3200,5041,0000,0021,0010,0545	; 4824			CALL.M,J/DIV1		;GET HIGH DIVIDEND
						; 4825	=10
						; 4826	IDIV:	BR/AR,ARX+MQ_0.M,SC_1,		;DIVISOR TO BR
						; 4827			AR_AC0,ARL/AD,CALL.M,	;DIVIDEND TO AR
U 1112, 0376,3200,2040,4402,0021,4510,0542	; 4828			SKP AR0,J/DIV2		;TEST DIVISOR SIGN
						; 4829	=011
U 1113, 0071,0001,0000,0000,0000,1110,0424	; 4830	NODIVD:	SET NO DIVIDE,J/NOP		;HERE IF DIVIDE IMPOSSIBLE
						; 4831	
						; 4832	=110	ARX_AR,AR_-BRX,			;REMAIN TO ARX, GET CORRECT QUOTIENT
U 1116, 0060,5142,6400,0302,1025,0033,0044	; 4833			SC_#,#/36.,EXIT
						; 4834		ARX_AR,AR_BRX,			;HERE FOR POS QUOTIENT
U 1117, 0060,3202,6400,0302,1005,0033,0044	; 4835			SC_#,#/36.,EXIT
						; 4836	=
						; 4837	;HERE ON DIVIDE TO SET UP DIVIDEND
						; 4838	
						; 4839	DIV1:	BRX/ARX,ARX_AR,AR_AC0,		;CLR BRX, DIVIDEND IN AR LONG
						; 4840			FE_#,#/33.,TIME/3T,	;SETUP ITERATION COUNT
U 0363, 0444,3200,2420,0301,1020,0032,0041	; 4841			SIGNS DISP,J/DIVS1	;ENTER SUBR
						; 4842	
						; 4843	;HERE ON IDIV TO SET UP DIVIDEND.  SKIP IF DIVISOR NEG
						; 4844	; ALSO CALLED BY ADJBP
						; 4845	=1****0
						; 4846	DIV2:	BRX/ARX,ARX_SHIFT,AR_SIGN,	;CLR BRX, DIVIDEND TO AR LONG
						; 4847			FE_#,#/33.,		;SETUP LOOP COUNT
U 0376, 0444,5441,2420,0301,0020,4516,0041	; 4848			SKP AR0,J/DIVS1		;ENTER SUBR ACCORDING TO SIGNS
						; 4849		BRX/ARX,ARX_SHIFT,AR_SIGN,	;CLR BRX, DIVIDEND TO AR LONG
						; 4850			FE_#,#/33.,		;SETUP LOOP COUNT
U 0377, 0446,5401,2420,0301,0020,4516,0041	; 4851			SKP AR0,J/DIVS2		;ENTER SUBR ACCORDING TO SIGNS
						; 4852	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 102
; DSK: UCODE; ARITH 6	17:13:16 20-AUG-2018	INTEGER DIVIDE SUBROUTINE

						; 4853	.TOC	"INTEGER DIVIDE SUBROUTINE"
						; 4854	; ENTER WITH SIGNS DISPATCH OF DIVISOR AND DIVIDEND,
						; 4855	; DIVISOR IN BR, BRX CLR; DIVIDEND IN AR!ARX
						; 4856	; STEP COUNT IN FE (# OF QUOTIENT BITS -2)
						; 4857	; IF NO DIVIDE, RETURN 3 WITH IFETCH STARTED
						; 4858	; OTHERWISE, RETURN WITH SIGNED REMAINDER IN AR,
						; 4859	; POSITIVE QUOTIENT IN BRX AND MQ.
						; 4860	; RETURN 6 IF QUOTIENT SHOULD BE NEGATIVE,
						; 4861	; RETURN 7 IF QUOTIENT SHOULD BE POSITIVE.
						; 4862	;[TIME=14+3(FE)+3(D'END NEG)+3(RESTORE REQ'D)+1(REMAINDER NEG)]
						; 4863	; ... IF FE=33, 113-120
						; 4864	
						; 4865	DIVIDE	"FE_FE-1,DISP/DIV,MQ/MQ*2"
						; 4866	
						; 4867	=1**100
						; 4868	DIVS1:	DIVIDE,AR_2(AR-BR),
U 0444, 0462,5102,5500,3001,0020,0031,0000	; 4869			ARX/ADX*2,J/DIVS3	;BOTH D'END AND D'SOR POS
U 0445, 0444,5163,7700,0000,0020,0027,0000	; 4870		AR_-AR LONG,J/DIVS1		;MAKE POS DIVIDEND, THEN CHK
						; 4871	DIVS2:	DIVIDE,AR_2(AR+BR),
U 0446, 0452,0602,5504,3001,0020,0031,0000	; 4872			ARX/ADX*2,J/DIVS4	;D'END POS, D'SOR NEG
U 0447, 0446,5143,7700,0000,0020,0027,0000	; 4873		AR_-AR LONG,J/DIVS2
						; 4874	
						; 4875	=1*010
						; 4876	DIVS3:	DIVIDE,AR_2(AR+BR),ARX/ADX*2,
U 0462, 0470,0602,5504,3001,0021,0031,0405	; 4877			ARL/AD*2,CALL.M,J/DIVLP	;START DIVIDING
U 0463, 0003,0001,0000,0000,0206,0003,0400	; 4878		I FETCH,RETURN3			;RETURN TO CALLER WITH NO DIVIDE
						; 4879	
U 0466, 0006,5162,2020,0000,0020,0003,0000	; 4880		AR_-BR,BRX/ARX,RETURN6		;D'END NEG, SO NEGATE QUO & REM
U 0467, 0007,0001,0020,0000,0000,0003,0000	; 4881		BRX/ARX,RETURN7			;EVERYTHING POSITIVE
						; 4882	
						; 4883	
						; 4884	=1**010
						; 4885	DIVS4:	DIVIDE,AR_2(AR-BR),ARX/ADX*2,
U 0452, 0470,5102,5500,3001,0021,0031,0405	; 4886			ARL/AD*2,CALL.M,J/DIVLP	;BEGIN DIVISION FOR REAL BITS
U 0453, 0003,0001,0000,0000,0206,0003,0400	; 4887		I FETCH,RETURN3			;ABORT FOR IMPOSSIBLE DIVISION
						; 4888	
U 0456, 0006,4001,0020,0000,0000,0003,0000	; 4889		BRX/ARX,RETURN6			;NEGATE QUO
U 0457, 0007,5142,2020,0000,0020,0003,0000	; 4890		AR_-BR,BRX/ARX,RETURN7		;NEGATE REM
						; 4891	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 103
; DSK: UCODE; ARITH 6	17:13:16 20-AUG-2018	BASIC DIVIDE LOOP

						; 4892	.TOC	"BASIC DIVIDE LOOP"
						; 4893	; THE LOOP ITSELF IS AN INNER SUBROUTINE, TO MAKE IT SUITABLE
						; 4894	; FOR USE IN DOUBLE-LENGTH DIVISION.
						; 4895	; THE DOUBLE LENGTH REMAINDER IS RETURNED IN BR!BRX (RESTORED)
						; 4896	; THE SINGLE LENGTH QUOTIENT (LOW PART IF DBL-LEN DIVISION) IN ARX
						; 4897	; RETURN 6 IF QUOTIENT (REALLY AC0.XOR.BR) NEGATIVE, OR 7 IF POSITIVE
						; 4898	;[TIME=12+3(FE)+3(RESTORE REQ'D)] ... IF FE=33, 111-114.
						; 4899	
						; 4900	=1*000
U 0470, 0470,0602,5504,3001,0020,0031,0000	; 4901	DIVLP:	DIVIDE,AR_2(AR+BR),ARX/ADX*2,J/DIVLP
U 0471, 0470,5102,5500,3001,0020,0031,0000	; 4902		DIVIDE,AR_2(AR-BR),ARX/ADX*2,J/DIVLP
U 0472, 0470,5102,5500,3001,0020,0031,0000	; 4903	DIV-:	DIVIDE,AR_2(AR-BR),ARX/ADX*2,J/DIVLP
U 0473, 0470,0602,5504,3001,0020,0031,0000	; 4904	DIV+:	DIVIDE,AR_2(AR+BR),ARX/ADX*2,J/DIVLP
U 0474, 0544,0602,2600,3001,0020,0031,0000	; 4905		DIVIDE,AR_AR+BR,ARX/ADX,J/DIVX
U 0475, 0544,5102,2604,3001,0020,0031,0000	; 4906		DIVIDE,AR_AR-BR,ARX/ADX,J/DIVX
U 0476, 0544,5102,2604,3001,0020,0031,0000	; 4907		DIVIDE,AR_AR-BR,ARX/ADX,J/DIVX		;NO SHIFT ON FINAL STEP
U 0477, 0544,0602,2600,3001,0020,0031,0000	; 4908		DIVIDE,AR_AR+BR,ARX/ADX,J/DIVX
						; 4909	
						; 4910	;HERE AFTER FINAL DIVIDE STEP
						; 4911	; MQ HAS POSITIVE FORM QUOTIENT
						; 4912	; AR!ARX HAS REMAINDER, EXCEPT THAT IT MUST BE RESTORED IF IT IS
						; 4913	; NEGATIVE (IT'S NEGATIVE IF THERE WAS NO CARRY ON FINAL STEP)
						; 4914	; THE ORIGINAL DIVIDEND IS STILL IN AC0, SO WE CHECK ITS SIGN
						; 4915	; TO DETERMINE WHETHER TO NEGATE THE (RESTORED) REMAINDER.
						; 4916	
						; 4917	=1**100
U 0544, 0545,0602,2604,0000,0020,0027,0000	; 4918	DIVX:	AR_AR+BR LONG			;RESTORE REMAIN WITH POS D'SOR
						; 4919		BR_AR LONG,ARX/MQ,FE_SC,	;LONG REMAIN TO BR, QUO TO ARX
U 0545, 0006,2500,0360,2401,0020,5503,0000	; 4920			SKP AC0+,RETURN6	;RETURN TESTING D'END SIGN
U 0546, 0547,5102,2604,0000,0020,0027,0000	; 4921		AR_AR-BR LONG			;RESTORE REMAIN WITH NEG D'SOR
						; 4922		BR_AR LONG,ARX/MQ,FE_SC,
U 0547, 0006,3200,0360,2401,0020,5503,0000	; 4923			SKP AC0-,RETURN6
						; 4924	
						; 4925	
						; 4926	;SUBROUTINE FOR FIRST PART OF LONG DIVISIONS
						; 4927	; ENTER AT DDVSUB WITH SKP BR0
						; 4928	; RETURN3 IF SHOULD RESUME WITH ADD STEP
						; 4929	; RETURN5 IF SHOULD RESUME WITH SUBTRACT
						; 4930	
						; 4931	=000
U 0520, 0520,0602,5500,3001,0020,0031,0000	; 4932	DDVLP:	AR_2(AR+BR),ARX/ADX*2,DIVIDE,J/DDVLP
U 0521, 0520,5102,5504,3001,0020,0031,0000	; 4933		AR_2(AR-BR),ARX/ADX*2,DIVIDE,J/DDVLP
U 0522, 0520,5102,5504,3001,0020,0031,0000	; 4934	DDVSUB:	AR_2(AR-BR),ARX/ADX*2,DIVIDE,J/DDVLP
U 0523, 0520,0602,5500,3001,0020,0031,0000	; 4935		AR_2(AR+BR),ARX/ADX*2,DIVIDE,J/DDVLP
U 0524, 0003,3723,2010,0301,1000,0003,0040	; 4936		AR_MQ,MQ_AR,FE_#,#/32.,RETURN3
U 0525, 0005,3723,2010,0301,1000,0003,0040	; 4937		AR_MQ,MQ_AR,FE_#,#/32.,RETURN5
U 0526, 0005,3723,2010,0301,1000,0003,0040	; 4938		AR_MQ,MQ_AR,FE_#,#/32.,RETURN5
U 0527, 0003,3723,2010,0301,1000,0003,0040	; 4939		AR_MQ,MQ_AR,FE_#,#/32.,RETURN3
						; 4940	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 104
; DSK: UCODE; ARITH 6	17:13:16 20-AUG-2018	DOUBLE INTEGER ARITHMETIC -- DADD, DSUB, DMUL, DDIV

						; 4941	.TOC	"DOUBLE INTEGER ARITHMETIC -- DADD, DSUB, DMUL, DDIV"
						; 4942	
						; 4943		.DCODE
						; 4944	.IFNOT/DBL.INT
						; 4945	114:	I,	J/UUO
						; 4946		I,	J/UUO
						; 4947		I,	J/UUO
						; 4948		I,	J/UUO
						; 4949	.IF/DBL.INT
D 0114, 4001,1011				; 4950	114:	R,	B/0,	J/DASMD		;DADD
D 0115, 4200,1011				; 4951		R,	B/2,	J/DASMD		;DSUB
D 0116, 4400,1011				; 4952		R,	B/4,	J/DASMD		;DMUL
D 0117, 4000,1010				; 4953		R,		J/DDIV
						; 4954		.UCODE
						; 4955	
						; 4956	;HERE FOR DOUBLE WORD ADD, SUBTRACT, MULTIPLY, OR DIVIDE
						; 4957	;ENTER WITH (E) IN AR, E IN VMA
						; 4958	
						; 4959	=00**00
U 1010, 0442,3240,0205,0000,0020,0710,0003	; 4960	DDIV:	ARX_AC3,CLR MQ,J/DDIV0		;GET LOWEST PART OF D'END
						; 4961	
						; 4962	DASMD:	BR/AR,AR_AC1*2,ARL/AD*2,	;HIGH MEM WORD TO BR
						; 4963			VMA_VMA+1,LOAD ARX,	;ASK FOR LOW WORD
U 1011, 1754,3240,5041,0000,0033,3622,0505	; 4964			MQ_0.S,CALL.S,J/XFERW	;AND WAIT FOR IT
U 1013, 0420,3701,0500,0000,0000,0010,0000	; 4965	=11	ARX_ARX*2			;SHIFT LOW MEM WORD LEFT
						; 4966	=	BRX/ARX,ARX_AR,AR_AC0,		;ALL DATA IN PLACE
U 0420, 0550,3240,2420,0302,1020,0033,0043	; 4967			SC_#,#/35.,B DISP	;DO THE OPERATION
						; 4968	
						; 4969	;HERE WITH (E) IN BR, (E+1)*2 IN BRX
						; 4970	; (AC) IN AR, (AC+1)*2 IN ARX
						; 4971	
U 0550, 0061,0602,2604,0000,0022,1327,0000	; 4972	=00*	AR_AR+BR LONG,AD FLAGS,EXIT DBL	;DADD
						; 4973	
U 0552, 0061,5102,2600,0000,0022,1327,0000	; 4974		AR_AR-BR LONG,AD FLAGS,EXIT DBL	;DSUB
						; 4975	
						; 4976		MQ_SHIFT,AR_0S,ARX_0S,		;DMUL, USE AC1 AS INITIAL M'IER
U 0554, 0560,3441,2210,0301,0000,0010,0756	; 4977			FE_#,#/-18.,J/DMULT	;SETUP STEP COUNT
						; 4978	=
						; 4979	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 105
; DSK: UCODE; ARITH 6	17:13:16 20-AUG-2018	DOUBLE INTEGER ARITHMETIC -- DADD, DSUB, DMUL, DDIV

						; 4980	;HERE FOR DOUBLE WORD MULTIPLY
						; 4981	
						; 4982	=1*00*
U 0560, 0420,3401,0010,4001,0001,0030,0400	; 4983	DMULT:	AD/0S,MUL,CALL.M,J/MULP		;BEGIN MULTIPLY
U 0564, 0566,0602,2600,0000,0020,0027,0000	; 4984	=10*	AR_AR+BR LONG			;CANCEL EFFECTS OF LOW BIT 0
U 0566, 0421,3723,2010,0000,1000,0010,0000	; 4985		MQ_AR,AR_MQ			;EXCH HI AND LOW PRODUCT WORDS
						; 4986	
						; 4987	;HERE AFTER 1ST CALL ON MPY SUBR.  SAVE LOW WORD OF PROD, GET HIGH M'IER
						; 4988	
U 0421, 0422,4001,0005,0000,0000,1010,0000	; 4989		AC3_AR				;LOW WORD OF PRODUCT
U 0422, 0570,3200,2000,0000,0020,0010,0000	; 4990		AR_AC0				;GET HIGH M'IER WORD
						; 4991	=1**000	MQ_AR,AR_MQ,CALL,		;DIVE IN AGAIN
U 0570, 0361,3721,2010,0301,1000,0021,0756	; 4992			FE_#,#/-18.,J/MULREE	;CONTINUE THE MULTIPLY
U 0574, 0576,3602,0004,0000,0020,5510,0000	; 4993	=100	GEN AR*BR,AD/AND,SKP AD0	;SKP IF M'IER, M'CAND, & PROD NEG
						; 4994	=110
						; 4995	DMUL1:	AC0_AR,AR_SIGN,
U 0576, 0430,5401,2000,0302,0020,1016,0043	; 4996			SC_#,#/35.,J/DMUL2	;STORE HIGH WORD OF PRODUCT
U 0577, 0576,0001,0000,0000,0000,1110,0420	; 4997		SET AROV,J/DMUL1
						; 4998	
						; 4999	;MULTIPLY NOW COMPLETE, STORE RESULTS WITH PROPER SIGN IN BIT 0
						; 5000	
U 0430, 0431,4001,4040,0000,0000,0010,0000	; 5001	DMUL2:	BR/AR,AR_SHIFT			;GET 2ND WITH SIGN, SAVE SIGN
U 0431, 0432,4001,4301,0000,2000,1010,0000	; 5002		AC1_AR,AR_ARX,ARX/MQ		;READY TO BUILD 3RD WORD
U 0432, 0440,3242,2400,0000,0000,0012,0000	; 5003		ARX_SHIFT,AR_BR,MQ_MQ*2		;SIGNIFICANT BITS TO ARX, SIGN TO AR
						; 5004		AR_SHIFT,ARX_AC3,		;3RD WORD IN AR, GET LOW
U 0440, 0441,3240,4215,0000,0020,0012,0000	; 5005			MQ_MQ*.25		;EXTRA PROD BIT TO MQ 35
U 0441, 0534,3723,2004,0000,0000,1010,0000	; 5006		AC2_AR,AR_MQ			;,I FETCH WHEN TIMING FIXED
						; 5007	=0*	ARX_SHIFT,AR_BR,I FETCH,	;LOW WORD AND SIGN READY
U 0534, 1154,3202,2400,0000,0206,0021,0400	; 5008			CALL,J/SHIFT		; GET LOW WORD TO AR
U 0536, 0140,0001,0005,0000,0002,1006,0000	; 5009	STRAC3:	AC3_AR,FINISH			;GANZ GETAN
						; 5010	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 106
; DSK: UCODE; ARITH 6	17:13:16 20-AUG-2018	DOUBLE INTEGER ARITHMETIC -- DADD, DSUB, DMUL, DDIV

						; 5011	;HERE FOR DOUBLE INTEGER DIVISION
						; 5012	;AR HAS (E), ARX HAS (AC3), AND MQ IS CLEAR
						; 5013	
U 0442, 0443,3243,4507,4402,2000,1010,0166	; 5014	DDIV0:	T0_AR,AR_ARX,ARX_ARX*8,SC_1	;SAVE (E) IN T0
						; 5015		BRX/ARX,ARX_SHIFT,		;AC3 3-35 TO BRX, 1-2 TO ARX
U 0443, 0450,3240,2424,0302,0020,0010,0002	; 5016			AR_AC2,SC_#,#/2		;GET AC2 READY
						; 5017		AR_SHIFT,BR/AR,			;AC2 BITS 2-35 WITH AC3 1-2
U 0450, 0451,3200,4241,0000,0020,3610,0000	; 5018			ARX_AC1,VMA_VMA+1	;READY TO GET (E+1)
						; 5019		BR/AR,AR_ARX,ARX_BR*2,		;LOW DOUBLE WORD NOW IN BR LONG
U 0451, 0454,3201,4240,4403,2000,0010,0000	; 5020			SC_1,FE_1
U 0454, 0460,3240,2400,0000,0020,5510,0000	; 5021		ARX_SHIFT,AR_AC0,SKP AD0	;HIGH DOUBLEWORD IN AR LONG
						; 5022	=0
						; 5023	DDIV1:	BR_AR LONG,AR_BRX,ARX_BR,	;HI POS D'END TO BR
U 0460, 0535,3242,6260,0000,0012,0010,0000	; 5024			LOAD AR,J/DDIV2		;GET LOW D'SOR READY
						; 5025		BR_AR LONG,AR_-BR LONG,		;NEGATE LOW D'END
U 0461, 0464,5162,2660,3401,0040,5427,0000	; 5026			FE_-1,SKP CRY0		;TEST FOR CARRY PROPAGATION
U 0464, 0460,2502,2660,0000,0000,0010,0000	; 5027	=0	BR_AR LONG,AR_BR COMP LONG,J/DDIV1
U 0465, 0460,5162,2660,0000,0020,0027,0000	; 5028		BR_AR LONG,AR_-BR LONG,J/DDIV1	;FINISH NEGATION OF D'END
						; 5029	=0*
						; 5030	DDIV2:	T1_AR,MQ_ARX,ARX_0S,		;LOWEST D'END TO T1, NEXT TO MQ
U 0535, 1754,3401,0217,0000,2000,1021,0171	; 5031			CALL,J/XFERW		; WAIT FOR (E+1)
U 0537, 0530,3240,2407,0000,0040,5110,0166	; 5032		ARX_SHIFT,AR_T0,SKP FE0		;DIVISOR NOW IN AR LONG
						; 5033	=0	AR_BR LONG,BR_AR LONG,		;PUT OPERANDS IN PLACE FOR DIV
U 0530, 0553,3202,2660,0000,0020,0032,0000	; 5034			SIGNS DISP,J/DDIV3	;TEST D'SOR SIGN
						; 5035		AR_BR LONG,BR_AR LONG,SET SR2,	;NOTE D'END NEGATIVE
U 0531, 0553,3202,2660,0000,0020,1632,0062	; 5036			SIGNS DISP,J/DDIV3
						; 5037	
						; 5038	;HERE WITH THE DIVISOR IN BR LONG,
						; 5039	; THE HIGH PART OF THE MAGNITUDE OF THE DIVIDEND IN AR LONG,
						; 5040	; AND THE LOW PART OF THE MAGNITUDE OF THE DIVIDEND IN MQ AND T1
						; 5041	; SKIP IF DIVISOR NEGATIVE, & CHECK FOR NO-DIVIDE.
						; 5042	=011
						; 5043	DDIV3:	AR_2(AR-BR),ARX/ADX*2,MQ_MQ*2,	;SEE IF FIRST DIVIDE STEP
U 0553, 0620,5102,5500,0000,0040,5412,0000	; 5044			SKP CRY0,J/DDIV4	; GENERATES A 1
U 0557, 0620,0602,5504,0000,0040,5412,0000	; 5045		AR_2(AR+BR),ARX/ADX*2,MQ_MQ*2,SKP CRY0
						; 5046	=000
U 0620, 0520,0001,0000,0301,0000,4221,0041	; 5047	DDIV4:	FE_#,#/33.,SKP BR0,CALL,J/DDVLP	;GO DO FIRST HALF OF DIVIDE
U 0621, 1113,0001,0000,0000,0206,0010,0400	; 5048		I FETCH,J/NODIVD		;TOO MANY QUOTIENT BITS
U 0623, 0455,0001,0001,0402,0000,1010,0000	; 5049	=011	AC1_AR,CLR SC,J/DDIV6		;SAVE HI QUOTIENT IN AC1
U 0625, 0455,0001,0001,3402,0000,1010,0000	; 5050	=101	AC1_AR,SC_1S			;SET FLAG FOR RESUMPTION
						; 5051	=
U 0455, 0634,3200,2007,0000,0020,0010,0171	; 5052	DDIV6:	AR_T1				;GET LOWEST DIVIDEND BITS
						; 5053	=100	MQ_AR,AR_MQ,CALL,		;FINISH DIVISION, GENERATING
U 0634, 0470,3723,2010,0000,1000,4721,0000	; 5054			SKP SC0,J/DIVLP		; 35 MORE QUOTIENT BITS
U 0636, 0655,3240,2001,0000,0020,1605,0061	; 5055	=110	AR_AC1,SR DISP,SET SR3,J/DDVX1	;QUOTIENT NEGATIVE.  NOTE
U 0637, 0655,3240,2001,0000,0020,0005,0000	; 5056		AR_AC1,SR DISP			;HERE'S HIGH PART OF QUOTIENT
						; 5057	=1101
U 0655, 0540,3202,2660,0000,0000,0010,0000	; 5058	DDVX1:	BR_AR LONG,AR_BR LONG,J/DDVX2	;POS REMAINDER.  GO STORE
U 0657, 0540,5162,2660,0000,0020,0027,0000	; 5059		BR_AR LONG,AR_-BR LONG,J/DDVX2	;NEGATE REMAINDER
U 0540, 0541,5401,2004,0302,0020,1016,0043	; 5060	DDVX2:	AC2_AR,AR_SIGN,SC_#,#/35.
U 0541, 0676,0001,4000,0000,0000,0005,0000	; 5061		AR_SHIFT,SR DISP		;GET LOW WORD OF REM.  TEST QUO SIGN
						; 5062	=1110	AC3_AR,AR_BR,ARX/ADX*2,		;GET QUOTIENT, SQUEEZE OUT HOLE
U 0676, 0061,3202,2505,0000,0002,1010,0000	; 5063			EXIT DBL
						; 5064		AC3_AR,AR_-BR,ARX/ADX*2,AD LONG,;GET NEGATIVE QUOTIENT
U 0677, 0061,5162,2505,0000,0022,1027,0000	; 5065			EXIT DBL
						; 5066	.ENDIF/DBL.INT
						; 5067	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 107
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	SINGLE FLOATING ADD & SUB -- FAD, FADR, FSB, FSBR

						; 5068	.TOC	"SINGLE FLOATING ADD & SUB -- FAD, FADR, FSB, FSBR"
						; 5069	
						; 5070		.DCODE
						; 5071	.IFNOT/UFA.DFN
						; 5072	130:	I,	J/UUO		;UFA
						; 5073		I,	J/UUO		;DFN
						; 5074	.ENDIF/UFA.DFN
						; 5075	
D 0140, 4101,0710				; 5076	140:	R,	FL-AC,	B0/0,	J/FAD
D 0141, 4001,0711				; 5077		R,		B0/0,	J/FADL
D 0142, 6200,0710				; 5078		RW,	FL-MEM,	B0/0,	J/FAD
D 0143, 6301,0710				; 5079		RW,	FL-BOTH,B0/0,	J/FAD
						; 5080	
D 0144, 4101,1203				; 5081		R,	FL-AC,		J/FADR
D 0145, 0101,1202				; 5082		I,	FL-AC,	B0/0,	J/FADRI
D 0146, 6200,1203				; 5083		RW,	FL-MEM,		J/FADR
D 0147, 6301,1203				; 5084		RW,	FL-BOTH,	J/FADR
						; 5085	
D 0150, 4500,0710				; 5086	150:	R,	FL-AC,	B0/1,	J/FSB
D 0151, 4400,0711				; 5087		R,		B0/1,	J/FSBL
D 0152, 6601,0710				; 5088		RW,	FL-MEM,	B0/1,	J/FSB
D 0153, 6700,0710				; 5089		RW,	FL-BOTH,B0/1,	J/FSB
						; 5090	
D 0154, 4100,1207				; 5091		R,	FL-AC,		J/FSBR
D 0155, 0500,1202				; 5092		I,	FL-AC,	B0/1,	J/FSBRI
D 0156, 6201,1207				; 5093		RW,	FL-MEM,		J/FSBR
D 0157, 6300,1207				; 5094		RW,	FL-BOTH,	J/FSBR
						; 5095		.UCODE
						; 5096	
						; 5097	.IFNOT/FPLONG
						; 5098	=00**00
						; 5099	FAD:
						; 5100	FSB:	SR_#,#/1,B DISP,J/FADR		;FLAG NO ROUND, GO FAD/FSB
						; 5101	FMP:	SR_#,#/1,J/FMPR
						; 5102	FDV:	SR_#,#/1,J/FDVR
						; 5103	FADL:
						; 5104	FSBL:
						; 5105	FMPL:
						; 5106	FDVL:	AR_BR,J/UUO			;LONG MODE BECOMES UUO
						; 5107	=
						; 5108	.IF/FPLONG
						; 5109	=00***0
						; 5110	FAD:
U 0710, 1203,0001,0000,0000,0000,1633,0001	; 5111	FSB:	SR_#,#/1,B DISP,J/FADR		;FLAG TRUNCATE MODE, GO FAD
						; 5112	FADL:
U 0711, 1203,0001,0000,0000,0000,1633,0002	; 5113	FSBL:	SR_#,#/2,B DISP,J/FADR		;FLAG LONG MODE
						; 5114	.ENDIF/FPLONG
						; 5115	=
						; 5116	=00*010
						; 5117	FADRI:
U 1202, 1203,4001,4000,0000,3000,0033,0000	; 5118	FSBRI:	AR_AR SWAP,B DISP
						; 5119	FADR:	FE_EXP,EXP_SIGN,SC/SCAD,
U 1203, 0543,3401,0200,0203,1000,0022,0200	; 5120			ARX_0S,J/FAS
						; 5121	=111
U 1207, 0542,3441,0200,0203,1000,0022,0200	; 5122	FSBR:	FE_EXP,SC/SCAD,EXP_SIGN,ARX_0S
U 0542, 0543,5163,7000,0000,0020,0010,0000	; 5123	=	AR_-AR,J/FAS			;NEGATE SUBTRAHEND
						; 5124	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 108
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	SINGLE FLOATING ADD & SUB -- FAD, FADR, FSB, FSBR

						; 5125	;FIND OPERAND WITH LARGER EXP, LEAVING IT IN BR,
						; 5126	; AND ITS EXP-1 IN FE.  THE SMALLER OPERAND IS LEFT IN AR,
						; 5127	; SHIFTED RIGHT BY THE DIFFERENCE BETWEEN THE EXPONENTS -1
						; 5128	
U 0543, 0551,3200,2060,0000,0020,0010,0000	; 5129	FAS:	BR/AR,BRX/ARX,AR_AC0		;SAVE MEM OP IN BR, GET AC
U 0551, 0562,4001,0000,5202,1020,5122,0200	; 5130		SC_EXP-SC,EXP_SIGN,SKP SCAD0	;FIND LARGER OPERAND
U 0562, 0555,3201,2040,2001,0000,0010,0000	; 5131	=0	FE_FE+SC,BR/AR,AR_BR*2,J/FAS1	;AC EXP .GE. MEM
						; 5132		MQ_AR,SC_#+SC,#/37.,		;MEM OP LARGER, SHIFT AC OP
U 0563, 0572,0001,0010,2302,1020,5110,0045	; 5133			SKP SCAD0,J/FAS2	;COMPUTE SHIFT AMOUNT
						; 5134	
U 0555, 0572,0001,0010,5302,1020,5110,0044	; 5135	FAS1:	MQ_AR,SC_#-SC,#/36.,SKP SCAD0	;CHECK SHIFT AMOUNT
						; 5136	=0
U 0572, 0556,5441,2310,0000,0020,0016,0000	; 5137	FAS2:	MQ_SHIFT,ARX/MQ,AR_SIGN,J/FAS3	;LOW TO MQ, READY TO GET HI
						; 5138		AR_SIGN,ARX_AR,			;HERE IF EXP DIFF .GT. 36
U 0573, 0626,5401,2400,2302,1020,5116,0044	; 5139			SC_#+SC,#/36.,SKP SCAD0	; .GT. 72?
U 0626, 0561,4001,0400,4001,0001,0010,0100	; 5140	=0	ARX_SHIFT,MQ_0.M,FE_FE+1,J/FAS5
U 0627, 0561,0001,0400,4001,1001,0010,0100	; 5141		ARX_AR,MQ_0.M,FE_FE+1,J/FAS5	;SHIFTED CLEAR OUT
						; 5142	
						; 5143	FAS3:	AR_SHIFT,ARL/SH,ARX/MQ,
U 0556, 0561,0001,4300,4001,0001,0010,0104	; 5144			MQ_0.M,FE_FE+1		;READY TO ADD
						; 5145	
						; 5146	FAS5:	AR_(AR+2BR)*.25,ARX/ADX*.25,	;HERE FOR ADD OR SUB
U 0561, 0760,0601,7704,0000,0060,0035,0000	; 5147			NORM,J/SNORM
						; 5148	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 109
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	SINGLE FLOATING MULTIPLY -- FMP, FMPR

						; 5149	.TOC	"SINGLE FLOATING MULTIPLY -- FMP, FMPR"
						; 5150	
						; 5151		.DCODE
D 0160, 4100,0714				; 5152	160:	R,	FL-AC,	J/FMP
D 0161, 4000,0715				; 5153		R,		J/FMPL
D 0162, 6201,0714				; 5154		RW,	FL-MEM,	J/FMP
D 0163, 6300,0714				; 5155		RW,	FL-BOTH,J/FMP
						; 5156	
D 0164, 4101,1103				; 5157		R,	FL-AC,	J/FMPR
D 0165, 0101,1102				; 5158		I,	FL-AC,	J/FMPRI
D 0166, 6200,1103				; 5159		RW,	FL-MEM,	J/FMPR
D 0167, 6301,1103				; 5160		RW,	FL-BOTH,J/FMPR
						; 5161		.UCODE
						; 5162	.IF/FPLONG
						; 5163	=00***0
U 0714, 1103,4001,0000,0000,0000,1610,0001	; 5164	FMP:	SR_#,#/1,J/FMPR			;FLAG TRUNCATE MODE
U 0715, 1103,4001,0000,0000,0000,1610,0002	; 5165	FMPL:	SR_#,#/2,J/FMPR			;LONG MODE
						; 5166	=
						; 5167	.ENDIF/FPLONG
						; 5168	=00***0
U 1102, 1103,0001,4000,0000,3000,0010,0000	; 5169	FMPRI:	AR_AR SWAP
U 1103, 0565,3401,0200,0202,1000,0022,0200	; 5170	FMPR:	SC_EXP,EXP_SIGN,ARX_0S		;PREPARE M'IER FRACTION
						; 5171	
U 0565, 0642,3200,2010,0301,1020,0010,0762	; 5172	=	MQ_AR,AR_AC0,FE_#,#/-14.	;M'IER TO MQ, GET M'CAND
						; 5173	=01*	SC_EXP+SC,EXP_SIGN,		;SEPARATE M'CAND FRACTION FROM EXP
U 0642, 0356,0001,0000,2202,1000,0022,0600	; 5174			CALL.S,J/MULSUB		;AND BEGIN MULTIPLY
U 0646, 0760,3203,0000,2301,0040,0035,0600	; 5175	=11*	FE_#+SC,#/-200,NORM AR,J/SNORM
						; 5176	=
						; 5177	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 110
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	SINGLE FLOATING DIVIDE -- FDV, FDVR

						; 5178	.TOC	"SINGLE FLOATING DIVIDE -- FDV, FDVR"
						; 5179	
						; 5180		.DCODE
D 0170, 4100,1115				; 5181	170:	R,	FL-AC,	J/FDV
D 0171, 4101,1114				; 5182		R,	FL-AC,	J/FDVL
D 0172, 6201,1115				; 5183		RW,	FL-MEM,	J/FDV
D 0173, 6300,1115				; 5184		RW,	FL-BOTH,J/FDV
						; 5185	
D 0174, 4100,1201				; 5186		R,	FL-AC,	J/FDVR
D 0175, 0100,1200				; 5187		I,	FL-AC,	J/FDVRI
D 0176, 6201,1201				; 5188		RW,	FL-MEM,	J/FDVR
D 0177, 6300,1201				; 5189		RW,	FL-BOTH,J/FDVR
						; 5190		.UCODE
						; 5191	.IF/FPLONG
						; 5192	=00***0
U 1114, 0720,0001,0000,3201,1000,0022,0340	; 5193	FDVL:	FE_EXP-1,EXP_SIGN,ARX+MQ_0.S,J/FDVL1
U 1115, 1201,0001,0000,0000,0000,1610,0001	; 5194	FDV:	SR_#,#/1,J/FDVR			;FLAG TRUNCATE MODE
						; 5195	=
						; 5196	.ENDIF/FPLONG
						; 5197	=00***0
U 1200, 1201,4001,4000,0000,3000,0010,0000	; 5198	FDVRI:	AR_AR SWAP
U 1201, 0660,4001,0000,4202,1000,0022,0340	; 5199	FDVR:	SC_EXP+1,EXP_SIGN,ARX+MQ_0.S	;SETUP DIVISOR
						; 5200	=
						; 5201	=000	BR/AR,BRX/ARX,			;DIVISOR TO BR, CLR BRX
						; 5202			AR_AC0,FE_#,#/27.,	;GET DIVIDEND, STEP COUNT
U 0660, 0664,3200,2060,0301,0020,5521,0033	; 5203			SKP AD0,CALL,J/FDVCHK
						; 5204	
U 0662, 0472,4001,0000,0000,0000,4221,0000	; 5205	=10	SKP BR0,CALL,J/DIV-		;OK, BEGIN DIVISION
U 0663, 0066,4001,0000,0000,0000,1110,0624	; 5206		SET FL NO DIV,J/IFNOP		;NO DIVIDE, SORRY
						; 5207	
						; 5208	;RETURN HERE WITH QUOTIENT IN ARX.  WE TOOK 29 DIVIDE STEPS, TO
						; 5209	; GUARANTEE HAVING A ROUNDING BIT EVEN IF THE FIRST STEP GENERATES
						; 5210	; A QUOTIENT BIT OF ZERO.  THEREFORE, THE MSB OF QUOTIENT IS EITHER
						; 5211	; IN BIT 7 OR 8, AND NORM WILL FIND IT IN ONE STEP.
						; 5212	
						; 5213	=110	AR_ARX,FE_FE+#,#/2,		;NEGATIVE QUOTIENT
U 0666, 0630,7162,4000,2031,2040,5410,0002	; 5214			SKP BR EQ,J/FDVNEG	;CHECK FOR MORE QUO TO COME
						; 5215		AR_ARX*.25,ARX_ARX*.25,NORM,	;JUNK IS 36 BITS AWAY FROM MSB
U 0667, 0760,3713,7700,2031,0040,0035,0002	; 5216			FE_FE+#,#/2,J/SNORM	;POS QUOTIENT, NORMALIZE
						; 5217	=
						; 5218	;HERE IF QUOTIENT SHOULD BE NEGATIVE, WITH POSITIVE FORM IN
						; 5219	; AR AND ARX.  SKIP IF REMAINDER (IN BR) IS ZERO.  IN THIS CASE,
						; 5220	; WE CLEAR ARX, BECAUSE AR CONTAINS THE ENTIRE QUOTIENT.
						; 5221	; IF, HOWEVER, THE REMAINDER IS NOT ZERO, WE INFER
						; 5222	; THAT AN INFINITE PRECISION DIVISION WOULD GENERATE MORE ONES
						; 5223	; IN THE QUOTIENT.  IF THAT IS THE CASE, WE LEAVE ARX WITH THE
						; 5224	; QUOTIENT, SO THE NEGATION PROCESS WILL WORK CORRECTLY TO RETURN
						; 5225	; THE HIGH ORDER PART OF THE INFINITE-PRECISION NEGATIVE QUOTIENT.
						; 5226	=0
U 0630, 0760,3703,7700,0000,0040,1635,0064	; 5227	FDVNEG:	SET SR1,AR_AR*.25 LONG,NORM,J/SNORM
U 0631, 0630,3441,0200,0000,0000,0010,0000	; 5228		ARX_0S,J/FDVNEG			;REMAINDER WENT TO ZERO
						; 5229	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 111
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	SINGLE FLOATING DIVIDE -- FDV, FDVR

						; 5230	;HERE FOR FDVL
						; 5231	
						; 5232	.IF/FPLONG
						; 5233	
						; 5234	;FDVL:	FE_EXP-1,EXP_SIGN,CLR ARX+MQ
						; 5235	=000
						; 5236	FDVL1:	AR_AC1,BR_AR LONG,		;SAVE DIVISOR IN BR LONG
U 0720, 0721,3240,2061,0302,0020,0021,0011	; 5237			SC_#,#/9.,CALL		;READY TO SHIFT LOW DIVIDEND
						; 5238		ARX_SHIFT,AR_AC0,		;DIVIDEND IN PLACE
						; 5239			SC_FE,FE_#,#/24.,	;EXP TO SC, STEP COUNT TO FE
U 0721, 0664,3200,2400,0301,0020,5513,0030	; 5240			SKP AD0,J/FDVCHK	;GO CHECK FOR NO DIVIDE
U 0722, 0632,4001,0000,0000,0000,4221,0000	; 5241	=010	CALL,SKP BR0,J/FDVL2		;GO BEGIN DIVIDE
U 0723, 0066,4001,0000,0000,0000,1110,0624	; 5242		SET FL NO DIV,J/IFNOP		;CAN'T DIVIDE, ABORT
						; 5243	
						; 5244	=110	AR_AC0,SR_#,#/5,		;NEG QUO, FLAG TRUNCATE MODE
U 0726, 0640,3200,2000,0000,0020,1605,0005	; 5245			SR DISP,J/FDVL4		; WAS IT 26 OR 27 STEPS?
						; 5246		AR_AC0,SR_#,#/1,		;POS QUO
U 0727, 0640,3240,2000,0000,0020,1605,0001	; 5247			SR DISP,J/FDVL4
						; 5248	=
						; 5249	
						; 5250	
						; 5251	;COME HERE TO START THE DIVISION.  ON THE FIRST STEP, WE CHECK
						; 5252	; TO SEE WHETHER A 1 HAS BEEN GENERATED IN THE QUOTIENT.  IF SO,
						; 5253	; 26 ADDITIONAL STEPS WILL GENERATE THE FULL 27 SIGNIFICANT BITS
						; 5254	; OF THE QUOTIENT.  IF NOT, 27 STEPS ARE REQUIRED.
						; 5255	
						; 5256	=0
U 0632, 0650,5102,5500,3001,0020,0031,0000	; 5257	FDVL2:	DIVIDE,AR_2(AR-BR),ARX/ADX*2,J/FDVL3	;FIRST DIVIDE STEP
U 0633, 0650,0602,5504,3001,0020,0031,0000	; 5258		DIVIDE,AR_2(AR+BR),ARX/ADX*2		; DOES IT GENERATE A 1?
						; 5259	=00
						; 5260	FDVL3:	DISP/DIV,MQ/MQ*2,		;NO, TAKE AN EXTRA DIVIDE STEP
U 0650, 0470,0602,5500,0000,0020,0031,0000	; 5261			AR_2(AR+BR),ARX/ADX*2,J/DIVLP	; WITHOUT COUNTING FE
U 0651, 0472,0001,0000,2302,0000,1610,0001	; 5262		SR_1,SC_#+SC,#/1,J/DIV-		;YES, 27 STEPS WILL NORMALIZE QUO
U 0652, 0470,5102,5504,0000,0020,0031,0000	; 5263		DISP/DIV,MQ/MQ*2,AR_2(AR-BR),ARX/ADX*2,J/DIVLP
U 0653, 0473,4001,0000,2302,0000,1610,0001	; 5264		SR_1,SC_#+SC,#/1,J/DIV+
						; 5265	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 112
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	SINGLE FLOATING DIVIDE -- FDV, FDVR

						; 5266	;WE COME HERE AFTER DOING THE DIVISION, EITHER 26 OR 27 STEPS
						; 5267	; AS REQUIRED TO GENERATE A NORMALIZED QUOTIENT FROM NORMALIZED
						; 5268	; OPERANDS.  NOW FIGURE OUT WHAT EXPONENT THE REMAINDER SHOULD HAVE.
						; 5269	
						; 5270	=0
						; 5271	FDVL4:	SC_EXP-#,#/27.,			;DIVIDEND EXP-27
U 0640, 0644,3202,2000,5232,0000,4510,0033	; 5272			AR_BR,SKP AR0,J/FDVL6	;GET REMAINDER, TEST D'END SIGN
						; 5273		SC_EXP-#,#/26.,			;D'END EXP-26
U 0641, 0644,3242,2000,5232,0000,4510,0032	; 5274			AR_BR,SKP AR0
						; 5275	
						; 5276	;HERE WITH REMAINDER IN AR, ITS EXP IN SC
						; 5277	; SKIP IF D'END (AND THEREFORE REM) NEGATIVE.
						; 5278	
						; 5279	=0
						; 5280	FDVL6:	EXP_SC,BYTE DISP,		;TEST FOR UNDERFLOW
U 0644, 0746,5043,0000,2400,2041,5434,0200	; 5281			SKP AR EQ,J/FDVL7	; OR REM =0
						; 5282		AR_-BR,SKP CRY0,		;NEGATE REM, CHECK =0
U 0645, 0736,5162,2000,2400,0040,5434,0000	; 5283			GEN SC,BYTE DISP	; AND LOOK FOR EXP UFLO
U 0736, 0746,0001,0000,1400,2001,0010,0200	; 5284	=110	EXP_-SC-1,J/FDVL7		;ONE'S COMPLEMENT EXP
U 0737, 0746,3441,2000,0000,0000,0010,0000	; 5285		AR_0S				;REM =0 OR EXP UFLO
						; 5286	=110
						; 5287	FDVL7:	AC1_AR,ARX+MQ_0.M,		;SAVE REMAINDER
U 0746, 0762,3721,2001,0000,0001,1010,0142	; 5288			AR_MQ,ARL/AD,J/SNR2	;GO NORMALIZE QUOTIENT
U 0747, 0746,3441,2000,0000,0000,0010,0000	; 5289		AR_0S,J/FDVL7
						; 5290	.ENDIF/FPLONG
						; 5291	
						; 5292	
						; 5293	;SUBR TO CHECK FOR FLOATING NO DIVIDE
						; 5294	; ENTER WITH SKP ON DIVIDEND SIGN, IN AR LONG, WITH
						; 5295	; DIVISOR EXP IN SC, DIVISOR IN BR
						; 5296	
						; 5297	=0
U 0664, 0670,4001,0000,5202,1000,4222,0200	; 5298	FDVCHK:	SC_EXP-SC,EXP_SIGN,SKP BR0,J/FDVCK1
U 0665, 0664,5163,7700,0000,0020,0027,0000	; 5299		AR_-AR LONG,J/FDVCHK		;GET POSITIVE DIVIDEND
						; 5300	=0
						; 5301	FDVCK1:	GEN AR-2BR,SKP CRY0,		;TEST FOR NO DIVIDE
U 0670, 0002,5101,0004,2302,0040,5403,0177	; 5302			SC_#+SC,#/177,RETURN2	;AND CORRECT EXP
						; 5303		GEN AR+2BR,SKP CRY0,		;SAME TEST, NEG DIVISOR
U 0671, 0002,0601,0000,2302,0040,5403,0177	; 5304			SC_#+SC,#/177,RETURN2	;AND SAME EXP CORRECTION
						; 5305	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 113
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	UFA, DFN, FSC, IBP

						; 5306	.TOC	"UFA, DFN, FSC, IBP"
						; 5307	;ENTER WITH (E) IN AR
						; 5308	.IF/UFA.DFN
						; 5309		.DCODE
D 0130, 4000,1205				; 5310	130:	R,		J/UFA
D 0131, 7001,1204				; 5311		RPW,		J/DFN
						; 5312		.UCODE
						; 5313	=00***0
						; 5314	DFN:	FE_AR0-8,AR0-8_#,#/0,		;SAVE LOW EXP, CLR SO CAN 
U 1204, 0567,3441,0200,2421,0000,0110,0000	; 5315			ARX_0S,J/DFN1		; DETECT FRACTION = 0
U 1205, 0750,3401,0200,0203,1000,0022,0200	; 5316	UFA:	FE_EXP,SC/SCAD,EXP_SIGN,ARX_0S
						; 5317	=
U 0750, 1004,3200,2060,0000,0020,0021,0000	; 5318	=000	BR_AR LONG,AR_AC0,CALL,J/EXPD
						; 5319	=100	ARX_AR,AR_SIGN,ARL/AD,		;READY TO UNNORMALIZE SMALLER OP
U 0754, 1154,5401,2400,0000,1021,0016,0402	; 5320			CALL.M,J/SHIFT
U 0755, 0756,5401,2200,0000,0020,0016,0000	; 5321		AR_SIGN,ARX/AD			;LOST SMALLER OP, USE ITS SIGN
						; 5322		AR_AR+BR,SKP AD NE,		;IS RESULT SIGNIFICANT?
U 0756, 0672,0602,2004,0000,0246,5613,0400	; 5323			SC_FE,I FETCH
						; 5324	=
U 0672, 0012,4001,0001,0000,0000,1010,0000	; 5325	=0	AC1_AR,J/FINI			;NO, CLEAR RESULT AC
U 0673, 0674,4001,0040,0200,0020,5210,0000	; 5326		SKP EXP NE,BR/AR		;IS RIGHT SHIFT REQ'D?
U 0674, 0730,0001,0000,0000,0002,4510,0000	; 5327	=0	SKP AR0,FETCH WAIT,J/UFA4	;NO, IS RESULT NEG?
U 0675, 0724,3241,7000,5030,0022,5210,0377	; 5328		AR_BR*.5,GEN FE-#,#/377,SKP SCAD NE,FETCH WAIT
U 0724, 0725,0001,0000,3401,0000,1110,0620	; 5329	=0	FE_-1,SET FLOV
U 0725, 0730,0001,0000,4003,0000,4510,0000	; 5330		FE_FE+1,SC/SCAD,SKP AR0
						; 5331	=0
U 0730, 0015,4001,0000,2400,2000,0022,0200	; 5332	UFA4:	AR0-8_SC,J/STAC1		;POS, PUT IN EXP STRAIGHT
U 0731, 0015,4001,0000,1400,2000,0022,0200	; 5333		AR0-8_-SC-1,J/STAC1		;NEG, USE COMPLEMENT OF EXP
						; 5334	
						; 5335	
U 0567, 0732,5163,7000,0000,0040,5410,0000	; 5336	DFN1:	AR_-AR,SKP CRY0			; LOW FRACTION =0?
						; 5337	=0	AR0-8_FE,STORE,			;STORE LOW WORD BACK TO MEM
U 0732, 0154,2540,0200,0000,2036,0022,0200	; 5338			ARX_AC0 COMP,J/STMAC	; GET COMPLEMENTED HIGH WORD
						; 5339		AR0-8_FE,STORE,			;LOW WORD WAS ZERO, INSTALL EXP
U 0733, 0154,5140,0200,0000,2036,0022,0200	; 5340			ARX_-AC0,J/STMAC	; GET NEGATED HIGH WORD
						; 5341	.ENDIF/UFA.DFN
						; 5342	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 114
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	UFA, DFN, FSC, IBP

						; 5343	
						; 5344		.DCODE
D 0132, 0100,1211				; 5345	132:	I,	FL-AC,	J/FSC
D 0133, 4001,1210				; 5346		R,		J/IBP		;ADJBP IF AC .NE. 0
						; 5347		.UCODE
						; 5348	=00***0
						; 5349	.IF/ADJBP
U 1210, 1140,4001,0000,0000,0000,4610,0000	; 5350	IBP:	SKP AC#0,J/IBP1		;IS IT IBP, OR ADJBP?
						; 5351	.IFNOT/ADJBP
						; 5352	IBP:	J/IBP2
						; 5353	.ENDIF/ADJBP
						; 5354	
						; 5355	
						; 5356	;FSC
						; 5357	;ENTER WITH E IN AR
						; 5358	=00****
						; 5359	FSC:	SC_EA,ARX+MQ_0.M,
U 1211, 0571,3200,2000,0002,0021,0013,0142	; 5360			AR_AC0,ARL/AD
U 0571, 0762,4001,0000,2201,1000,0022,0200	; 5361	=	FE_EXP+SC,EXP_SIGN,J/SNR2	;NORMALIZE SCALED RESULT
						; 5362	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 115
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	FIX, FIXR, FLTR, EXTEND

						; 5363	.TOC	"FIX, FIXR, FLTR, EXTEND"
						; 5364	
						; 5365		.DCODE
D 0122, 4001,1005				; 5366	122:	R,		J/FIX		;UNROUNDED
						; 5367	.IF/EIS
						; 5368		R,		J/EXTEND	;EXTENDED INSTRUCTION SET
						; 5369	.IFNOT/EIS
D 0123, 0001,1002				; 5370		I,		J/UUO
						; 5371	.ENDIF/EIS
						; 5372	
D 0126, 4001,1213				; 5373	126:	R,		J/FIXR		;ROUNDED
D 0127, 4101,1212				; 5374		R,	FL-AC,	J/FLTR
						; 5375		.UCODE
						; 5376	
						; 5377	;FLTR
						; 5378	;ENTER WITH (E) IN AR
						; 5379	=00***0
						; 5380	FLTR:	FE_#,#/277,ARX_AR,SKP AR0,	;BINARY POINT TO RIGHT OF ARX
U 1212, 0760,5401,2400,0301,1020,4516,0277	; 5381			AR_SIGN,J/SNORM		; SIGN EXTENDED.  GO NORMALIZE
						; 5382	
						; 5383	;FIX AND FIXR
						; 5384	;ENTER WITH (E) IN AR
						; 5385	;	FIX AND FIXR DIFFER ONLY IN THE ROUNDING CRITERION:
						; 5386	;FIXR ADDS 1 TO THE INTEGER PART IF THE FRACTION PART IS ONE-HALF
						; 5387	;OR GREATER.  FIX DROPS THE FRACTION PART OF POSITIVE NUMBERS, BUT ADDS
						; 5388	;1 TO THE INTEGER PART OF NEGATIVE NUMBERS IF THE FRACTION PART IS NOT
						; 5389	;ALL ZERO.
						; 5390	;	THIS IS IMPLEMENTED BY CHOOSING A FRACTION (THE ROUNDING
						; 5391	;CONSTANT) TO ADD TO THE INPUT, SUCH THAT A CARRY WILL OCCUR INTO THE
						; 5392	;INTEGER PART UNDER THE APPROPRIATE CONDITIONS.  FOR FIXR, THE ROUNDING
						; 5393	;CONSTANT IS EXACTLY ONE-HALF.  FOR FIX, IT IS ZERO ON POSITIVE INPUT,
						; 5394	;OR THE LARGEST POSSIBLE FRACTION (ALL 1S) ON NEGATIVE INPUT.
						; 5395	
						; 5396	=00****
						; 5397	FIXR:	FE_EXP-#,#/244,SKP SCAD0,	;GET BINARY POINT POSITION
U 1213, 0734,4061,0700,5231,0020,5110,0244	; 5398			ARX_1B1,J/FIX1		;GET ROUNDING CONSTANT
						; 5399	=
						; 5400	.IFNOT/EIS
						; 5401	;1005:		;REALLY IN SKPJMP FILE TO PREVENT 1005 BEING USED TWICE
						; 5402	;FIX:	FE_EXP-#,#/244,SKP SCAD0,	;GET BINARY POINT POSITION
						; 5403	;		ARX_AR SIGN,J/FIX1	;SET ROUNDING CONSTANT, GO FIX
						; 5404	.IF/EIS
						; 5405	=00***0
						; 5406	FIX:	FE_EXP-#,#/244,SKP SCAD0,	;GET BINARY POINT POSITION
						; 5407			ARX_AR SIGN,J/FIX1	;SET ROUNDING CONSTANT, GO FIX
						; 5408	EXTEND:	FE_#+AR0-8,#/-20,SKP SCAD0,	;VALID EXTENDED OPERATION?
						; 5409			ARX_AR,AR_BRX,J/EXT1	; OPR TO ARX, AC TO AR
						; 5410	=
						; 5411	.ENDIF/EIS
						; 5412	=0
U 0734, 0066,4001,0000,0000,0000,1110,0420	; 5413	FIX1:	SET AROV,J/IFNOP		;CAN'T DO IT, GIVE UP
U 0735, 0575,3721,0540,0000,0000,0410,0000	; 5414		BR/AR,CLR AR,ARX_ARX*2		;ROUNDING CONSTANT READY IN ARX
						; 5415		BR_AR LONG,AR_BR,CLR ARX,	;MANTISSA TO AR LONG
U 0575, 0622,3202,2060,0302,0000,0510,0011	; 5416			SC_#,#/9.		;READY TO SHIFT OFF EXPONENT
						; 5417		ARX_SHIFT,AR_SIGN,		;MANTISSA LEFT ALIGNED IN ARX
U 0622, 0740,5401,2400,2032,0020,5116,0044	; 5418			SC_FE+#,#/36.,SKP SCAD0	;ANY INTEGER BITS?
						; 5419	=0	MQ_SHIFT,			;YES, PUT THEM IN MQ
						; 5420			AR_ARX (ADX),CLR ARX,	;SHIFT MANTISSA LEFT 36 PLACES
U 0740, 0624,3721,6010,0000,0206,0510,0400	; 5421			I FETCH,J/FIX2		;AND PREFETCH NEXT
U 0741, 0070,3401,2000,0000,0206,0010,0400	; 5422		AR_0S,I FETCH,J/STORAC		;ALL SIGNIFICANCE LOST
						; 5423	
U 0624, 0635,3723,2400,0000,0000,0010,0000	; 5424	FIX2:	ARX_SHIFT,AR_MQ			;INTEGER IN AR, FRACTION IN ARX
U 0635, 0065,0602,2000,0000,0020,0027,0000	; 5425		AR_AR+BR,AD LONG,J/STAC		;ROUND AND STORE
						; 5426	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 116
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	SINGLE PRECISION FLOATING NORMALIZATION

						; 5427	.TOC	"SINGLE PRECISION FLOATING NORMALIZATION"
						; 5428	
						; 5429	;HERE TO NORMALIZE SINGLE PRECISION RESULTS
						; 5430	;SR2-3 TELL HOW TO STORE RESULTS:
						; 5431	;XX00 ... ROUND, SINGLE PRECISION
						; 5432	;XX01 ... TRUNCATE, SINGLE PRECISION
						; 5433	;XX10 ... LONG MODE (IMPLIES TRUNCATION)
						; 5434	;IN ADDITION, THIS CODE SETS SR 1 IF ANSWER IS NEGATIVE, SO X1YZ
						; 5435	; CORRESPONDS TO X0YZ EXCEPT THAT THE RESULT MUST BE NEGATED.
						; 5436	
						; 5437	;DISPATCH TO SNORM WITH "DISP/NORM,AR/AD*.25"
						; 5438	; THUS THE 8 POSSIBILITIES ARE:
						; 5439	;SNORM		AD=0	AR=0	EITHER ANSWER IS ZERO, OR MSB IS IN ARX
						; 5440	;SNORM+1	AD0	AR NEG	RESULT IS NEG.  MAKE POS, TRY AGAIN
						; 5441	;SNORM+2	AD1-6	AR3-8	MSB TOO FAR LEFT, SHIFT RIGHT & RETRY
						; 5442	;SNORM+3	AD7	AR9	RESULT IS CORRECTLY NORMALIZED
						; 5443	;SNORM+4	AD8	AR10	SHIFT LEFT ONCE FOR NORMALIZATION
						; 5444	;SNORM+5	AD9	AR11	SHIFT LEFT 2 PLACES
						; 5445	;SNORM+6	AD10	AR12	SHIFT LEFT THRICE
						; 5446	;SNORM+7	AD11-35	AR13-35	SHIFT LEFT A LOT, TRY AGAIN
						; 5447	
						; 5448	=000
						; 5449	SNORM:	AR_ARX,ARL/SH,SKP ARX NE,	;AR IS ZERO, GET ARX
U 0760, 0744,3713,4000,0000,2041,5410,0044	; 5450			ARX_0.M,J/SNZERO
U 0761, 0760,5143,7700,0000,0060,1635,0064	; 5451		NORM -AR,SET SR1,J/SNORM	;REMEMBER NEGATIVE, GO POSITIVE
						; 5452	SNR2:	AR_AR*.25 LONG,FE_FE+#,#/2,	;SHIFT RIGHT,
U 0762, 0760,3701,7700,2031,0040,0035,0002	; 5453			NORM,J/SNORM		;TRY AGAIN
U 0763, 1024,4001,0000,0000,0000,0005,0000	; 5454		SR DISP,J/SROUND		;AD7 -> AR9, IS ROUND REQ'D?
						; 5455		AR_AR*2 LONG,FE_FE-1,		;AD8 -> AR10, ONCE LEFT AND DONE
U 0764, 1024,3703,5500,3001,0000,0005,0000	; 5456			SR DISP,J/SROUND
						; 5457		AR_AR*4 LONG,FE_FE-#,#/2,	;AD9 -> AR11
U 0765, 1024,3203,2600,5031,0000,0005,0002	; 5458			SR DISP,J/SROUND
						; 5459		AR_AR*8 LONG,FE_FE-#,#/3,	;AD10 -> AR12
U 0766, 1024,3203,5500,5031,0000,0005,0003	; 5460			SR DISP,J/SROUND
						; 5461		ADA EN/0S,ADB/AR*4,AD/ANDCA,	;GENERATE AR*4
						; 5462			AR/AD*2,ARX/ADX*2,	; AR_AR*8 LONG
						; 5463			SC_#,#/12.,		;READY TO SHIFT FARTHER
U 0767, 0742,3043,5500,0302,0020,5417,0014	; 5464			GEN CRY18,SKP CRY0	; TEST AR0-19 FOR ZERO
						; 5465	
						; 5466	=0	AR_AR*8 LONG,BR_AR LONG,	;IT WAS IN AR13-19
U 0742, 0774,3243,5560,5031,0040,0035,0006	; 5467			FE_FE-#,#/6,NORM,J/SN1	; NOW IN AR10-16, AD8-14
						; 5468		MQ_SHIFT,AR_ARX (ADX),		;13-19=0, SHIFT TO TRY 20-35
U 0743, 0643,3721,6010,0302,0000,0510,0012	; 5469			CLR ARX,SC_#,#/10.
						; 5470		ARX_SHIFT,AR_MQ*.25,		;REPOSITION FRACTION IN AR LONG
						; 5471			FE_FE-#,#/13.,		;COMPENSATE EXPONENT
U 0643, 0760,3721,7400,5031,0040,0035,0015	; 5472			NORM,J/SNORM
						; 5473	=100
						; 5474	SN1:	AR_BR*2 LONG,FE_FE+#,#/2,	;MSB IN AD8, SO IN BR10
U 0774, 1024,3201,2600,2031,0000,0005,0002	; 5475			SR DISP,J/SROUND
						; 5476		AR_BR*4 LONG,FE_FE+1,		;MSB IN AD9, THUS IN BR11
U 0775, 1024,3201,5500,4001,0000,0005,0000	; 5477			SR DISP,J/SROUND
U 0776, 1024,4001,0000,0000,0000,0005,0000	; 5478		SR DISP,J/SROUND		;AD10 -> AR9, A LUCKY GUESS
						; 5479		AR_AR*8 LONG,BR_AR LONG,	;TRY SHIFTING 3 MORE
U 0777, 0774,3243,5560,5031,0040,0035,0003	; 5480			FE_FE-#,#/3,NORM,J/SN1
						; 5481	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 117
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	SINGLE PRECISION FLOATING NORMALIZATION

						; 5482	;HERE WHEN AD ENTIRELY ZERO ON NORMALIZE ATTEMPT.  SKIP IF ARX
						; 5483	; IS NOT ZERO, HAVING COPIED IT TO AR (IE, LEFT SHIFT 36 PLACES).
						; 5484	; OTHERWISE, THE ENTIRE RESULT IS ZERO, SO WE STORE THAT.
						; 5485	=0
						; 5486	SNZERO:	CLR FE,AR+ARX+MQ_0.M,		;RESULT = 0
U 0744, 1041,0001,0000,0401,0001,0005,0170	; 5487			SR DISP,J/SRND5
						; 5488		AR_AR*.25 LONG,FE_FE-#,#/34.,	;HAVE MOVED LEFT 36, GO RIGHT 2
U 0745, 0760,3701,7700,5031,0040,0035,0042	; 5489			NORM,J/SNORM		;AND TRY THAT
						; 5490	
						; 5491	
						; 5492	;WE GET HERE WITH A NORMALIZED POSITIVE FRACTION IN AR'ARX,
						; 5493	; THE CORRECTED EXPONENT IN FE, AND SR INDICATES THE PROPER SIGN
						; 5494	; FOR THE RESULT AND WHETHER THE ANSWER SHOULD BE ROUNDED,
						; 5495	; TRUNCATED, OR LONG.
						; 5496	
						; 5497	.IF/FPLONG
						; 5498	=100
						; 5499	.IFNOT/FPLONG
						; 5500	=1*0
						; 5501	.ENDIF/FPLONG
U 1024, 0757,3441,2060,0000,0000,0010,0000	; 5502	SROUND:	BR_AR LONG,AR_0S,J/SRND2	;PREPARE TO ROUND BY ADDING THE
						; 5503						; PART OF THE FRACTION WE WILL
						; 5504						; DISCARD (CARRY IF ARX0)
						; 5505		BR_AR LONG,CLR AR,ARX_1S,	;TRUNCATE MODE
U 1025, 0753,2301,0260,0000,0000,0405,0000	; 5506			SR DISP,J/STRNC		; HANDLING DEPENDS ON SIGN
						; 5507	.IF/FPLONG
						; 5508		BR_AR LONG,CLR AR,ARX_1S,	;LONG MODE
U 1026, 0647,2341,0260,0302,0000,0410,0011	; 5509			SC_#,#/9.
U 0647, 0713,4001,0400,0000,0000,0005,0000	; 5510	=	ARX_SHIFT,SR DISP		;MASK = 0,,000777 TO ARX
						; 5511	=01*
U 0713, 1035,3202,2660,0000,0000,0010,0000	; 5512		BR_AR LONG,AR_BR LONG,J/SRND4	;POS, TRUNCATE BY ANDING
						; 5513		AR_AR+BR,ARX/ADX,BR_AR LONG,	;NEG, MUST DIDDLE
U 0717, 1034,0602,2664,0000,0060,0035,0000	; 5514			NORM,J/SRND3		; NORM FORCES LONG ARITH
						; 5515	.ENDIF/FPLONG
						; 5516	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 118
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	SINGLE PRECISION FLOATING NORMALIZATION

						; 5517	;HERE TO PERFORM ROUNDING OR TRUNCATION OF SINGLE-PRECISION RESULTS,
						; 5518	; AND CHECK FOR CARRY INTO EXPONENT FIELD REQUIRING RENORMALIZATION
						; 5519	
						; 5520	=0*1
U 0753, 1035,3202,2000,0000,0000,0510,0000	; 5521	STRNC:	AR_BR,CLR ARX,J/SRND4		;POS TRUNCATE, GO STUFF IN EXP
U 0757, 1034,0602,2004,0000,0060,0535,0000	; 5522	SRND2:	AR_AR+BR,NORM,CLR ARX		;NORM FORCES LONG ARITH
						; 5523						; SO THIS ADDS ARX TO BR'BRX
						; 5524	=1*0
U 1034, 1035,0301,7000,4001,0020,0010,0000	; 5525	SRND3:	AR_AR*.5,FE_FE+1		;RENORMALIZE
						; 5526	SRND4:	EXP_FE TST,SR DISP,		;STUFF EXP, CHECK NEG OR LONG
U 1035, 1041,3502,0604,0000,2000,0705,0410	; 5527			ARX_ARX*BRX,AD/ANDCB	;CLEAR TRUNCATED FRACTION
						; 5528	
						; 5529	;HERE TO STORE RESULT AS A FUNCTION OF SINGLE OR LONG PRECISION
						; 5530	; AND POSITIVE OR NEGATIVE...
						; 5531	.IF/FPLONG
						; 5532	=001
						; 5533	.IFNOT/FPLONG
						; 5534	=0*1
						; 5535	.ENDIF/FPLONG
U 1041, 0066,4001,0000,0000,0005,1633,0000	; 5536	SRND5:	SR_0,B WRITE,J/ST6		;POS & NOT LONG
						; 5537	.IF/FPLONG
U 1043, 0654,3401,2000,0302,0000,1010,0033	; 5538	SLNG3:	AC0_AR,AR_0S,SC_#,#/27.,J/SLNG4	;STORE HIGH PART OF LONG ANS
						; 5539	.ENDIF/FPLONG
U 1045, 0066,5143,7000,0000,0025,1633,0000	; 5540		AR_-AR,SR_0,B WRITE,J/ST6	;NEG & NOT LONG
						; 5541	.IF/FPLONG
U 1047, 1043,5143,7700,0000,0020,0027,0000	; 5542		AR_-AR LONG,J/SLNG3		;LONG NEG, MAKE IT SO
						; 5543	
U 0654, 0656,0001,4000,0000,0206,0010,0400	; 5544	SLNG4:	AR_SHIFT,I FETCH
						; 5545		AR0-8_FE-SC,BYTE DISP,		;TEST FOR EXP UNDERFLOW
U 0656, 1036,5063,0000,5000,2041,5434,0200	; 5546			SKP AR EQ		; OR LOW WORD ZERO
						; 5547	
						; 5548	=110
						; 5549	.ENDIF/FPLONG
U 1036, 0015,4001,0000,0000,0000,1610,0000	; 5550	STRAC1:	SR_0,J/STAC1			;PUT AWAY LOW WORD OF LONG RESULT
						; 5551	.IF/FPLONG
U 1037, 0015,3441,2000,0000,0000,1610,0000	; 5552		AR_0S,SR_0,J/STAC1		;CLEAR LOW WORD IN AC1
						; 5553	.ENDIF/FPLONG
						; 5554	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 119
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	DOUBLE FLOATING ARITHMETIC -- DFAD, DFSB, DFMP, DFDV

						; 5555	.TOC	"DOUBLE FLOATING ARITHMETIC -- DFAD, DFSB, DFMP, DFDV"
						; 5556	
						; 5557		.DCODE
D 0110, 4000,1214				; 5558	110:	R,	B/0,	J/DFLOAT	;DFAD
D 0111, 4201,1214				; 5559		R,	B/2,	J/DFLOAT	;DFSB
D 0112, 4401,1214				; 5560		R,	B/4,	J/DFLOAT	;DFMP
D 0113, 4600,1214				; 5561		R,	B/6,	J/DFLOAT	;DFDV
						; 5562		.UCODE
						; 5563	
						; 5564	=00**0*
						; 5565	DFLOAT:	FE_EXP,EXP_SIGN,SC/SCAD,MQ_0.S,
						; 5566			VMA_VMA+1,LOAD ARX,
U 1214, 1754,4001,0000,0203,1013,3622,0700	; 5567			CALL.S,J/XFERW		;GET LOW WORD
U 1216, 1040,3721,0500,0000,0000,0033,0000	; 5568		ARX_ARX*2,B DISP		;LOW BIT 0 IGNORED
						; 5569	=
						; 5570	=00*
U 1040, 1050,3200,5061,0000,0020,0010,0000	; 5571	DFAS:	BR_AR LONG,AR_AC1*2,J/DFAS1	;MEM OP READY, GET AC OP
						; 5572	
U 1042, 1040,5143,7700,0000,0020,0027,0000	; 5573		AR_-AR LONG,J/DFAS		;DFSB, NEGATE AND ADD
						; 5574	
						; 5575		AR_AC1,BR_AR LONG,		;HERE FOR DOUBLE FLOATING MUL
U 1044, 1060,3240,2061,0301,0020,0010,0756	; 5576			FE_#,#/-18.,J/DFMP
						; 5577	
						; 5578		GEN AR*AC0,AD/XOR,SKP AD0,	;DFDV.  WILL QUO BE NEG?
						; 5579			BR_AR LONG,		;SAVE D'SOR IN BR, BRX
U 1046, 1070,3100,0060,3022,0020,5510,0000	; 5580			SC_FE-1,J/DFDV
						; 5581	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 120
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	DOUBLE FLOATING ARITHMETIC -- DFAD, DFSB, DFMP, DFDV

						; 5582	;HERE FOR DFAD AND DFSB
						; 5583	; MEM OPERAND IS IN BR (NEGATED IF DFSB)
						; 5584	; FE AND SC HAVE ITS EXPONENT
						; 5585	
						; 5586	=0*0
U 1050, 1004,3200,2400,0000,1020,0021,0000	; 5587	DFAS1:	ARX_AR,AR_AC0,CALL,J/EXPD	;AC OPERAND IN PLACE
						; 5588	=1*0
						; 5589	DFAS2:	ARX_AR,AR_SIGN,			;GET SHIFTED HIGH WORD
						; 5590			GEN #+SC,#/-36.,	;IS ANY SHIFT REQUIRED?
U 1054, 0772,5441,2400,2300,1020,5116,0734	; 5591			SKP SCAD0,J/DFAS3
						; 5592		ARX_AR,AR_SIGN,			;DIFF IS > 36
U 1055, 0770,5441,2400,2302,1020,5116,0044	; 5593			SC_#+SC,#/36.,SKP SCAD0	;CHECK FOR >72
						; 5594	=0	AC0_AR,MQ_SHIFT,AR_ARX (ADX),
U 0770, 0751,3701,6310,0000,0000,1010,0000	; 5595			ARX/MQ,J/DFAS4		;36 < DIFF < 72
						; 5596		AR_BR,ARL/AD,ARX_BRX,		;DIFF >72
U 0771, 1056,3242,2600,0000,0001,0010,0102	; 5597			MQ_0.M,J/DNTRY		;NORMALIZE LARGER OP
						; 5598	=0
						; 5599	DFAS3:	AR_ARX,ARL/SH,ARX/MQ,		;NO SHIFT REQUIRED
U 0772, 0752,0001,4300,0000,2001,0010,0104	; 5600			MQ_0.M,J/DFAS5
U 0773, 0661,4001,4000,0000,0000,0010,0000	; 5601		AR_SHIFT			;BEGIN SHIFTING SMALLER OP
U 0661, 0706,4001,4300,0000,2000,1010,0000	; 5602		AC0_AR,AR_ARX,ARX/MQ		;HI PART TO AC
						; 5603		MQ_SHIFT,AR_ARX (ADX),		;MID PART TO MQ
U 0706, 0751,3721,6010,0000,0000,0510,0000	; 5604			CLR ARX			;SHIFT ZEROS IN FROM RIGHT
U 0751, 0752,3200,2310,0000,0020,0010,0000	; 5605	DFAS4:	MQ_SHIFT,ARX/MQ,AR_AC0		;ALL PIECES NOW IN PLACE
						; 5606	DFAS5:	AR_AR+BR,ARX/ADX,SC_#,#/4,	;HERE WHEN OPERANDS ALIGNED
U 0752, 1120,0602,2600,0302,0060,0035,0004	; 5607			NORM,J/DNORM		;ADD, AND NORMALIZE RESULT
						; 5608	
						; 5609	
						; 5610	;SUBROUTINE TO CHOOSE OPERAND WITH SMALLER EXPONENT, AND
						; 5611	; PREPARE FOR SHIFTING IT.
						; 5612	; ENTER WITH ONE OPERAND FRACTION IN BR, ITS EXPONENT IN FE & SC,
						; 5613	; THE OTHER OP IN AR WITH ITS EXPONENT IN AR0-8
						; 5614	; RETURN THE LARGER EXPONENT IN FE, AND 36-(MAGNITUDE OF DIFFERENCE)
						; 5615	; IN SC.  RETURN 4 IF SC POSITIVE, 5 IF NEGATIVE.
						; 5616	
U 1004, 1020,0001,0000,5202,1020,5122,0200	; 5617	EXPD:	SC_EXP-SC,EXP_SIGN,SKP SCAD0	;COMPARE MAGNITUDES
						; 5618	=0	AR_BR,ARX_BRX,BR/AR,BRX/ARX,	;AC OP IS LARGER MAGNITUDE
U 1020, 1012,3202,2660,2001,0000,0010,0000	; 5619			FE_FE+SC,J/EXPD1	;ITS EXP TO FE
						; 5620		MQ_ARX,SC_#+SC,#/36.,		;CHECK FOR EXP DIFF > 36
U 1021, 0004,4001,0010,2302,2020,5103,0044	; 5621			SKP SCAD0,RETURN4
						; 5622	EXPD1:	MQ_ARX,SC_#-SC,#/36.,		;AC EXP .GE. MEM
U 1012, 0004,0001,0010,5302,2020,5103,0044	; 5623			SKP SCAD0,RETURN4	;SHIFT MEM OP
						; 5624	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 121
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	DOUBLE FLOATING ARITHMETIC -- DFAD, DFSB, DFMP, DFDV

						; 5625	;DFMP
						; 5626	; GET HERE WITH MEM OPERAND (M'CAND) IN BR!BRX
						; 5627	; AR HAS (AC1), LOW HALF OF M'IER
						; 5628	
						; 5629	=00*
						; 5630	DFMP:	MQ_AR,AR_0S,ARX_0S,		;SETUP LOW M'IER
						; 5631			SC_#+SC,#/-200,		;CORRECT EXPONENT
U 1060, 0361,3401,2210,2302,1000,0021,0600	; 5632			CALL,J/MULREE		;MULTIPLY BY THE LOW PART
U 1064, 1066,0602,2604,0000,0020,0027,0000	; 5633	=10*	AR_AR+BR LONG			;OOPS, LOW SIGN WAS SET
U 1066, 1022,3240,2010,0301,1020,0010,0762	; 5634		MQ_AR,AR_AC0,FE_#,#/-14.	;READY TO CONTINUE WITH HIGH PART
						; 5635	
						; 5636	;HERE TO USE HIGH MULTIPLIER
						; 5637	
						; 5638		SC_EXP+SC,EXP_SIGN.M,		;EXTRACT EXP FROM HIGH WORD
U 1022, 1052,0001,0000,2202,1001,4510,0200	; 5639			SKP AR0			;CHECK FOR NEG M'IER
						; 5640	=010
U 1052, 0361,3721,2010,0000,1000,0021,0000	; 5641	DFMP2:	MQ_AR,AR_MQ,CALL,J/MULREE	;GO BACK IN FOR HIGH PART
U 1053, 1052,0001,0000,4400,2001,0010,0200	; 5642		EXP_1,J/DFMP2			;OOPS, NEG, MOVE SIGN TO BIT 8
						; 5643	=110
U 1056, 1120,3703,0000,0302,0040,0035,0004	; 5644	DNTRY:	SC_#,#/4,GEN AR,NORM,J/DNORM	;NORMALIZE THE ANSWER
						; 5645	=
						; 5646	
						; 5647	
						; 5648	;DFDV
						; 5649	; GET HERE WITH DIVISOR IN BR!BRX, ITS EXP-1 IN SC
						; 5650	; SKIP IF D'SOR AND D'END SIGNS DIFFER
						; 5651	
						; 5652	=000
U 1070, 1030,3240,5001,0000,0020,0021,0000	; 5653	DFDV:	AR_AC1*2,CALL,J/DFDV1		;GET LOW D'END, GO START DIVIDE
U 1071, 1030,3240,5001,0000,0020,1621,0001	; 5654		SR_1,AR_AC1*2,CALL,J/DFDV1	;NOTE NEG QUO
						; 5655	
						; 5656	=011	AC1_AR,AR_MQ,ARL/AD,FE_FE+1,	;HERE FROM DDVSUB. NEW STEP CNT
U 1073, 0473,3721,2001,4001,0001,1010,0502	; 5657			MQ_0.M,CALL.M,J/DIV+	; SAVE HIGH QUO, RESUME
						; 5658	=101	AC1_AR,AR_MQ,ARL/AD,FE_FE+1,
U 1075, 0472,3723,2001,4001,0001,1010,0502	; 5659			MQ_0.M,CALL.M,J/DIV-
						; 5660	
						; 5661	=111	AR_AC1,ARX/MQ,SC_#,#/4,		;POSITIVE QUOTIENT TO AR LONG
U 1077, 1120,3200,2301,0302,0040,0035,0004	; 5662			NORM,J/DNORM		;NORMALIZE AND ROUND
						; 5663	
						; 5664	=00
						; 5665	DFDV1:	ARX_AR,AR_AC0,SKP AD0,		;TEST DIVIDEND SIGN
						; 5666			FE_#,#/26.,		;SETUP COUNT FOR HIGH QUO
U 1030, 0664,3240,2400,0301,1020,5521,0032	; 5667			CALL,J/FDVCHK		;GO CHECK DIVIDABILITY
U 1032, 0522,4001,0000,0000,0000,4210,0000	; 5668	=10	SKP BR0,J/DDVSUB		;BEGIN DIVISION (RETURN ABOVE)
U 1033, 0066,4001,0000,0000,0000,1110,0624	; 5669		SET FL NO DIV,J/IFNOP		;ABORT THE DIVISION
						; 5670	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 122
; DSK: UCODE; FP 5	17:13:16 20-AUG-2018	DOUBLE PRECISION NORMALIZATION

						; 5671	.TOC	"DOUBLE PRECISION NORMALIZATION"
						; 5672	
						; 5673	=000
U 1120, 1130,3721,0000,0302,0040,5427,0043	; 5674	DNORM:	SKP ARX+MQ NE,SC_#,#/35.,J/DNZERO	;AR=0
						; 5675		BR/AR,BRX/ARX,AR_MQ COMP,	;RESULT NEG, MAKE POS
U 1121, 1051,2021,2060,0000,0000,1610,0001	; 5676			SR_1,J/DNNEG		;FLAG NEGATIVE
						; 5677		AR_AR*.25 LONG,MQ_MQ*.25,
U 1122, 1057,3703,7710,2031,0000,0012,0004	; 5678			FE_FE+#,#/4,J/DNHI	;MSB IN AR 1-6
						; 5679		AR_AR*.25 LONG,
U 1123, 1125,3701,7700,2031,0000,0010,0002	; 5680			FE_FE+#,#/2,J/DROUND	;MSB IN AR7
U 1124, 1125,0301,7700,4001,0020,0027,0000	; 5681		AR_AR*.5 LONG,FE_FE+1		;MSB IN AR8
						; 5682	DROUND:	AR_AR+1,ARX/ADX,NORM,		;MSB IS AR9, RIGHT ON
U 1125, 1136,4001,2600,0302,0060,0035,0043	; 5683			SC_#,#/35.,J/DRND1
U 1126, 1125,3701,5500,3001,0000,0710,0001	; 5684		(AR+ARX+MQ)*2,FE_FE-1,J/DROUND	;MSB IN AR10
U 1127, 1023,4001,4000,5001,0000,0010,0000	; 5685		AR_SHIFT,FE_FE-SC		;SOMEWHERE IN AR 11-35
						; 5686	
U 1023, 1027,4001,4340,0000,2000,0010,0000	; 5687	DNSHFT:	BR/AR,AR_ARX,ARX/MQ		;SHIFT THE WHOLE THING
U 1027, 1031,3721,6010,0000,0000,0510,0000	; 5688		MQ_SHIFT,AR_ARX (ADX),CLR ARX
						; 5689		MQ_SHIFT,ARX/MQ,AR_BR,SC_#,#/10.,
U 1031, 1120,3202,2310,0302,0040,0035,0012	; 5690			NORM,J/DNORM		;GIVE IT ANOTHER GO
						; 5691	
U 1051, 1062,4003,2000,0000,0040,5410,0000	; 5692	DNNEG:	AR_AR+1,SKP CRY0		;COMPLETE NEGATION OF MQ
						; 5693	=0	MQ_AR,AR_BR COMP,ARX_BRX COMP,
U 1062, 1120,2502,2610,0000,1040,0035,0000	; 5694			NORM,J/DNORM		;NORMALIZE THE POS FORM
U 1063, 1120,5142,2610,0000,1060,0035,0000	; 5695		MQ_AR,AR_-BR,ARX/ADX,NORM,J/DNORM
						; 5696	
U 1057, 1056,3701,7710,0000,0000,0710,0001	; 5697	DNHI:	(AR+ARX+MQ)*.25,J/DNTRY		;GO TRY AGAIN
						; 5698	
						; 5699	=0
U 1130, 0016,3401,2200,0000,0000,1610,0000	; 5700	DNZERO:	SR_0,AR_0S,ARX_0S,J/DBLST	;RESULT = 0, STORE THAT
U 1131, 1023,4001,4000,5001,0000,0010,0000	; 5701		AR_SHIFT,FE_FE-SC,J/DNSHFT	;NOT ZERO, SHIFT AND TRY AGAIN
						; 5702	
						; 5703	=110
U 1136, 1137,0301,7700,4001,0020,0027,0000	; 5704	DRND1:	AR_AR*.5 LONG,FE_FE+1		;ROUNDING BLEW THE NORM, GO RIGHT
						; 5705		EXP_FE TST,SR DISP,CLR MQ,	;STUFF EXP IN, CHECK RESULT SIGN
U 1137, 1132,4041,0220,0000,2020,0705,0413	; 5706			BRX/ARX,ARX_1		;READY IF NEGATION NECESSARY
						; 5707	
						; 5708	=0	AC0_AR,AR_SHIFT,ARX_BRX,	;STORE HIGH WORD, READY LOW
U 1132, 0014,3202,4600,0000,0206,1010,0400	; 5709			I FETCH,J/STD1
U 1133, 1061,3002,0600,0000,0000,1610,0000	; 5710		ARX_ARX*BRX,AD/ANDCA,SR_0	;CLEAR ROUNDING BIT
U 1061, 0016,5163,7700,0000,0020,0027,0000	; 5711		AR_-AR LONG,J/DBLST		;NEGATE RESULT AND STORE
						; 5712	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 123
; DSK: UCODE; BYTE 7	17:13:16 20-AUG-2018	DOUBLE PRECISION NORMALIZATION

						; 5713	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 124
; DSK: UCODE; BYTE 7	17:13:16 20-AUG-2018	BYTE GROUP -- IBP, ILDB, LDB, IDPB, DPB

						; 5714	.TOC	"BYTE GROUP -- IBP, ILDB, LDB, IDPB, DPB"
						; 5715	
						; 5716		.DCODE
						; 5717	;133:	R,		J/IBP		;OR ADJBP
D 0134, 6000,1300				; 5718	134:	RW,		J/ILDB		;CAN'T USE RPW BECAUSE OF FPD
D 0135, 4000,1304				; 5719		R,		J/LDB
D 0136, 6001,1310				; 5720		RW,		J/IDPB
D 0137, 4001,1314				; 5721		R,		J/DPB
						; 5722		.UCODE
						; 5723	
						; 5724	;ALL FIVE INSTRUCTIONS OF THIS GROUP ARE CALLED WITH THE BYTE POINTER
						; 5725	;IN THE AR.  ALL INSTRUCTIONS SHARE COMMON SUBROUTINES, SO THAT
						; 5726	;THE 10/11 INTERFACE AND STRING MAY ALSO USE THESE SUBROUTINES
						; 5727	
						; 5728	;IBP OR ADJBP
						; 5729	;IBP IF AC#0, ADJBP OTHERWISE
						; 5730	; HERE WITH THE BASE POINTER IN AR
						; 5731	
						; 5732	;IBP:	SKP AC#0			;IS THIS IBP OR ADJBP?
						; 5733	.IF/ADJBP
						; 5734	=1**000
						; 5735	IBP1:	T0_AR,BR/AR,			;SAVE POINTER FOR ADJBP
U 1140, 1217,3401,2047,2412,0000,1021,0166	; 5736			SC_S,AR_0S,CALL,J/GETSC	; GET BYTE SIZE
						; 5737	.ENDIF/ADJBP
						; 5738	=001
						; 5739	IBP2:	BR/AR,P_P-S,CALL.M,		;NEW P UNLESS OVERFLOW
U 1141, 1152,0001,0040,5110,3021,5110,0600	; 5740			SKP SCAD0,J/IBPS
						; 5741	.IF/ADJBP
U 1142, 1105,3202,2040,0000,0000,0010,0000	; 5742		BR/AR,AR_BR,J/ADJBP		;HOLD S IN BR AND MQ
						; 5743	.ENDIF/ADJBP
U 1145, 0071,4001,0003,0000,0206,0010,0400	; 5744	=101	FIN STORE,I FETCH,J/NOP		;IBP DONE
						; 5745	=
						; 5746	
						; 5747	=00*000
						; 5748	ILDB:	BR/AR,P_P-S,BYTE DISP,		;START IBP
U 1300, 1152,4001,0040,5110,3021,0034,0600	; 5749			CALL.M,J/IBPS		;AND CALL SUBR
						; 5750	=100
U 1304, 1067,0001,0400,0102,1000,0021,0000	; 5751	LDB:	ARX_AR,SC_P,CALL,J/BYTEA	;BEGIN EA COMPUTATION
U 1305, 1150,0001,0000,2002,0000,0021,0000	; 5752		SC_FE+SC,CALL,J/LDB1		;SC_P+S WHILE LOADING AR
U 1307, 0071,4001,0000,0000,0206,1014,0400	; 5753	=111	AC0_AR,CLR FPD,I FETCH,J/NOP	;DONE
						; 5754	=
						; 5755	
						; 5756	=00*000
						; 5757	IDPB:	BR/AR,P_P-S,BYTE DISP,		;START IBP
U 1310, 1152,4001,0040,5110,3021,0034,0600	; 5758			CALL.M,J/IBPS
						; 5759	=100
U 1314, 1067,0001,0400,0102,1000,0021,0000	; 5760	DPB:	ARX_AR,SC_P,CALL,J/BYTEA	;COMPUTE EFFECTIVE BYTE ADDR
						; 5761		AR_AC0,TIME/3T,SC_#-SC,#/36.,	;COMPUTE 36-P
U 1315, 1166,3200,2000,5302,0020,5121,0044	; 5762			CALL,SKP SCAD0,J/DPB1	;CALL DEPOSITOR
						; 5763	=111
U 1317, 1134,0001,0003,0000,0206,0010,0400	; 5764	BFIN:	FIN STORE,I FETCH		;DONE
						; 5765	=
						; 5766	=*1***0
U 1134, 0012,0001,0000,0000,0000,0014,0000	; 5767	CLRFPD:	CLR FPD,J/FINI			;CAN'T DO THIS UNTIL STORE COMPLETE
U 1135, 0012,4001,0000,0000,0000,0010,0000	; 5768		J/FINI				;HERE FROM BLKO/BLKI PI
						; 5769	=
						; 5770	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 125
; DSK: UCODE; BYTE 7	17:13:16 20-AUG-2018	INCREMENT BYTE POINTER SUBROUTINE

						; 5771	.TOC	"INCREMENT BYTE POINTER SUBROUTINE"
						; 5772	
						; 5773	;THIS SUBROUTINE IS CALLED BY THE INSTRUCTIONS ILDB, IDPB AS
						; 5774	;WELL AS THE MICROCODED 10/11 INTERFACE HANDLER.
						; 5775	;CALL WITH BYTE DISP TESTING FPD AND SIGN OF P-S
						; 5776	;[TIME=2+2(BP OVFLO)]
						; 5777	
						; 5778	=1**010					;BR12 IRELEVANT
U 1152, 0004,0001,0000,0000,0016,0003,0000	; 5779	IBPS:	STORE,RETURN4			;SIMPLE, NO OVERFLOW
						; 5780		FE_#,#/36.,GEN AR+1,TIME/2T,	;HERE IF OVRFLO OF WORD
U 1153, 1065,4001,0400,0301,1000,0010,0044	; 5781			ARX_AR,J/NXTWRD
U 1156, 0004,3242,2000,0000,0000,0003,0000	; 5782		AR_BR,RETURN4			;FPD WAS SET, RESTORE AR
U 1157, 0004,3242,2000,0000,0000,0003,0000	; 5783		AR_BR,RETURN4			; AND CONVERT TO LDB OR DPB
						; 5784	=					;TEST BR12 ONLY
						; 5785	NXTWRD:	AR_AR+1,P_FE-S,STORE,
U 1065, 0004,4001,2000,5010,3016,0603,0200	; 5786			TIME/2T,RETURN4
						; 5787	
						; 5788	
						; 5789	.TOC	"BYTE EFFECTIVE ADDRESS EVALUATOR"
						; 5790	
						; 5791	;ENTER WITH POINTER IN AR, ARX, AND BR
						; 5792	;RETURN1 WITH (EA) LOADING INTO AR AND ARX,
						; 5793	;FPD SET, P IN SC, AND S IN FE
						; 5794	;[TIME=4+1(INDEXED)+?(INDIRECT)]
						; 5795	
						; 5796	BYTEA:	MEM_AR,FE_S,SET FPD,		;PUT AWAY UPDATED POINTER
U 1067, 1160,0001,0003,2411,0002,1136,0100	; 5797			EA MOD DISP		;EVAL BP ADDR
						; 5798	=11**00
U 1160, 0001,3711,0000,0000,0315,0003,0000	; 5799	BFETCH:	VMA_ARX,BYTE READ,RETURN1	;START DATA FETCH
U 1161, 0001,0610,0002,0000,0335,0003,0000	; 5800		VMA_ARX+XR,BYTE READ,RETURN1	;ADDRESS IS INDEXED
U 1162, 1072,3713,0000,0000,0111,0010,0000	; 5801		GEN ARX,BYTE INDRCT,J/BYTEI	;DO INDIRECT
U 1163, 1072,0610,0002,4000,0131,0010,0000	; 5802		GEN ARX+XR,BYTE INDRCT,J/BYTEI	;INDIRECT INDEXED!!!
						; 5803	
U 1072, 1146,3240,0003,0000,0022,7010,0000	; 5804	BYTEI:	ARX_MEM,SKP INTRPT		;WAIT FOR INDIRECT WORD
U 1146, 1160,0001,0000,0000,0000,0036,0000	; 5805	=0	EA MOD DISP,J/BFETCH		;PROCEED IN ADDR EVAL
U 1147, 2040,0001,0000,0000,0000,0005,0000	; 5806		SR DISP,J/CLEAN			;INTERRUPTED, CLEAN UP AS REQ'D
						; 5807	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 126
; DSK: UCODE; BYTE 7	17:13:16 20-AUG-2018	LOAD BYTE SUBROUTINE

						; 5808	.TOC	"LOAD BYTE SUBROUTINE"
						; 5809	;ENTER WITH S IN FE, P+S IN SC, AND AR LOAD IN PROGRESS
						; 5810	;SKP INTERRUPT AT ENTRY IS OPTIONAL
						; 5811	;RETURN2 WITH BYTE RIGHT JUSTIFIED IN AR
						; 5812	;[TIME=7]
						; 5813	=1****0
						; 5814	LDB1:	AR_MEM,SC_#-SC,#/36.,SKP SCAD0,	;36-(P+S)
U 1150, 1164,3200,0003,5302,0022,5110,0044	; 5815			TIME/3T,J/LDB2
U 1151, 2040,3200,0003,0000,0022,0005,0000	; 5816		AR_MEM,SR DISP,J/CLEAN		;HERE IF INTERRUPT PENDING
						; 5817	=
						; 5818	=*1***0
U 1164, 1154,3441,2400,0000,0000,0013,0000	; 5819	LDB2:	ARX_SHIFT,AR_0S,SC_FE,J/SHIFT	;BYTE IN ARX HI, READY TO SHIFT
						; 5820		ARX_AR,AR_0S,			;P+S > 36, PUT BYTE IN ARX HI
U 1165, 1154,3401,2400,2002,1020,5110,0000	; 5821			SC_FE+SC,SKP SCAD0	;ADJUST S AND SHIFT BYTE
						; 5822	
						; 5823	;PUT BYTE INTO AR RIGHT-JUSTIFIED
						; 5824	; THIS INSTRUCTION ALSO CALLED ALONE AS A SUBROUTINE
						; 5825	
						; 5826	=1****0
U 1154, 0002,0001,4000,0000,0000,0003,0000	; 5827	SHIFT:	AR_SHIFT,RETURN2		;RETURN WITH BYTE IN AR
U 1155, 0002,4001,0000,0000,0000,0003,0000	; 5828		RETURN2				;BYTE WAS OFF THE END, RETURN AR=0
						; 5829	
						; 5830	
						; 5831	.TOC	"DEPOSIT BYTE SUBROUTINE"
						; 5832	;ENTER WITH BYTE RIGHT JUSTIFIED IN AR, POINTER IN BR,
						; 5833	; S IN FE, 36-P IN SC, AND LOAD AR-ARX STARTED
						; 5834	; SKP IF P>36
						; 5835	;RETURN3 WITH FINAL STORE IN PROGRESS
						; 5836	;[TIME=11]
						; 5837	
						; 5838	=1****0
						; 5839	DPB1:	MQ_AR,AR_MEM,ARX_MEM,		;GET WORD TO ROTATE 36-P
						; 5840			GEN FE-SC,TIME/3T,	;COMPUTE S-(36-P)
U 1166, 1170,3240,0013,5000,1022,5110,0000	; 5841			SKP SCAD0,J/DPB2	;CHECK THAT P+S<36
U 1167, 0003,4001,0000,0000,0002,0003,0000	; 5842		MB WAIT,RETURN3			;P>36, STORE NOTHING
						; 5843	
						; 5844	=*1***0
U 1170, 1171,0001,0000,2401,0000,0010,0000	; 5845	DPB2:	FE_SC				;P+S>36, S_36-P
						; 5846		ARX_SHIFT,AR_MQ,SC_FE,		;ARX HAS P,X,S
U 1171, 1074,3723,2400,5301,0000,0013,0110	; 5847			FE_#-SC,#/72.		;SC_S, FE_72-(36-P)=36+P
U 1074, 1076,0001,0000,5302,0000,0010,0044	; 5848		SC_#-SC,#/36.			;SC_36-S (KNOWN .LE. P)
						; 5849		AR_SHIFT,ARX_SHIFT,		;S,P,X
U 1076, 1101,4001,4400,5002,0000,0010,0000	; 5850			SC_FE-SC		;SC_(36+P)-(36-S)=P+S
U 1101, 0003,0001,4000,0000,0016,0003,0000	; 5851		AR_SHIFT,STORE,RETURN3		;DONE, STORE IT BACK
						; 5852	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 127
; DSK: UCODE; BYTE 7	17:13:16 20-AUG-2018	ADJBP

						; 5853	.TOC	"ADJBP"
						; 5854	;HERE FOR ADJUST BYTE POINTER (IBP WITH NON-ZERO AC)
						; 5855	; BYTE SIZE (S) IS RIGHT ADJUSTED IN BR AND MQ
						; 5856	; FULL POINTER IS IN AR, AND SAVED IN T0
						; 5857	
						; 5858	.IF/ADJBP
						; 5859	
						; 5860	ADJBP:	SC_P,AR+ARX+MQ_0.M,		;GET P
U 1105, 1174,7162,0000,0102,0041,5410,0170	; 5861			SKP BR EQ		;CHECK SIZE IS NON-ZERO
						; 5862	
						; 5863	=1***00
U 1174, 1223,0001,0020,2400,3001,0010,0600	; 5864		BRX/ARX,P_SC,CALL.M,J/SIXDIV	;DIVIDE P BY S
U 1175, 0067,3200,2007,0000,0020,0010,0166	; 5865		AR_T0,J/IFSTAC			;OOPS, S=0, RETURN UNALTERED POINTER
						; 5866		T1_AR,AR_0S,ARX_0S,		;SAVE P/S
U 1176, 1220,3441,2207,5002,0000,1010,0171	; 5867			SC_FE-SC		;36-P IN SC
						; 5868	=
						; 5869	=*1**0*
U 1220, 1223,0001,0000,2400,3001,0010,0700	; 5870		P_SC,MQ_0.M,CALL.M,J/SIXDIV	;36-P IN AR0-5
U 1222, 1172,0600,2007,0000,0040,5610,0171	; 5871		AR_AR+T1,SKP AD NE		;(P/S)+(36-P/S)=BYTES/WORD
						; 5872	=*1***0
U 1172, 1113,0001,0000,0000,0206,0010,0400	; 5873		I FETCH,J/NODIVD		;ABORT, BYTES/WORD=0
U 1173, 1111,4001,4047,0000,2000,1010,0171	; 5874		T1_AR,BR/AR,AR_ARX		;SAVE BYTES/WORD, READY TO
						; 5875						; DIVIDE BY IT
U 1111, 1143,3721,2007,0000,0000,1010,0172	; 5876		T2_AR,AR_MQ			;SAVE REMAIN(36-P/S), GET (36-P)/S
						; 5877		AR_AR*AC0,AD/A+B,ARL/AD,	;ADJUSTMENT IN AR
U 1143, 1224,0600,2000,0000,0021,0010,0142	; 5878			ARX+MQ_0.M
						; 5879	
						; 5880	;COMPUTE QUOTIENT Q AND REMAINDER R OF ADJUSTMENT/(BYTES/WORD)
						; 5881	; SUCH THAT ADJUSTMENT=Q*(BYTES/WORD)+R, 1 .LE. R .LE. (BYTES/WORD)
						; 5882	; SINCE ADJUSTMENT IS CALCULATED RELATIVE TO LEFT-MOST BYTE OF
						; 5883	; A WORD, THIS GIVES Q AS THE NUMBER OF WORDS BY WHICH TO INDEX THE
						; 5884	; BYTE POINTER, AND R AS THE NUMBER OF BYTES FROM THE LEFT OF THE
						; 5885	; WORD.  MULTIPLYING R BY THE BYTE SIZE WILL GIVE THE NUMBER OF BITS
						; 5886	; FROM THE LEFTMOST BYTE, AND ADDING REMAIN(36-P/S) WILL GIVE NUMBER
						; 5887	; OF BITS FROM BIT 0.  FINALLY, WE MUST SUBTRACT THIS FROM 36 TO GET
						; 5888	; THE CORRECT P FIELD, WHICH IS ALWAYS RELATIVE TO THE RIGHT EDGE OF
						; 5889	; THE WORD.
						; 5890	
						; 5891	=*1*100
U 1224, 0376,4001,0000,4402,0000,1021,0000	; 5892		AC0_AR,SC_1,CALL,J/DIV2		;DO THE BASIC DIVIDE
U 1226, 1240,5162,0600,0301,0020,0010,0774	; 5893	=110	ARX_-BRX,FE_#,#/-4,J/ADJD1	;NEG QUO ==> NEG REMAIN
U 1227, 1240,3703,0300,0301,0040,5410,0774	; 5894		ARX/MQ,SKP AR NE,FE_#,#/-4	;POS QUO.  IS REMAIN .GT. 0?
						; 5895	=1****0
U 1240, 1144,0600,2007,0000,0020,0010,0171	; 5896	ADJD1:	AR_AR+T1,J/ADJD2		;INCREASE REMAIN TO MEET CONSTRAINT
						; 5897		BR/AR,AR_ARX (ADX),		;REMAIN IN RANGE,
U 1241, 1177,3701,6040,0000,0001,0010,0060	; 5898			ARL+ARX_0.M,J/ADJD3	; QUOTIENT TO ARR
						; 5899	
						; 5900	ADJD2:	BR/AR,AR_ARX-1,			;HOLD UPDATED REMAINDER,
U 1144, 1177,1701,6040,0000,0021,0010,0060	; 5901			ARL+ARX_0.M		; GET CORRESPONDING QUOTIENT
						; 5902	ADJD3:	AR_AR+T0,INH CRY18,		;ADD Q TO Y OF POINTER,
U 1177, 1250,0600,2027,0000,0020,0011,0166	; 5903			BRX/ARX			;CLR BRX
						; 5904	
						; 5905	=1**00*
U 1250, 1217,3441,2000,2412,0000,1021,0000	; 5906		AC0_AR,AR_0S,SC_S,CALL,J/GETSC	;SAVE UPDATED Y, GET SIZE
						; 5907		MQ_AR,AR_T2,CLR ARX,		;M'IER IS S, GET REMAIN(36-P/S)
U 1252, 0361,3240,2017,0000,1020,0521,0172	; 5908			CALL,J/MULREE		;COMPUTE (R*S)+REMAIN(36-P/S)
U 1256, 1206,3713,5000,0000,0206,0010,0400	; 5909	=11*	AR_ARX*2,I FETCH		;PUT THAT IN AR0-5
U 1206, 1215,3200,2000,5132,0020,0010,0044	; 5910		SC_P-#,#/36.,AR_AC0
U 1215, 0065,0001,0000,5400,3001,0010,0200	; 5911		P_-SC,J/STAC			;THAT'S NEW P, DONE
						; 5912	
						; 5913	.ENDIF/ADJBP
						; 5914	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 128
; DSK: UCODE; BYTE 7	17:13:16 20-AUG-2018	ADJBP

						; 5915	;SUBROUTINE TO GET CONTENTS OF SC RIGHT ALIGNED IN AR
						; 5916	;[TIME=6]
						; 5917	
U 1217, 1221,0001,0000,2400,2000,0022,0200	; 5918	GETSC:	AR0-8_SC			;PUT SC INTO AR
U 1221, 1154,4001,0400,0302,1000,0010,0011	; 5919	GETEXP:	ARX_AR,SC_#,#/9.,J/SHIFT	;HERE WITH DATA IN AR0-8
						; 5920	
						; 5921	
						; 5922	;SUBROUTINE FOR SHORT DIVISION, BR KNOWN POSITIVE
						; 5923	; CALL WITH MQ CLEAR, DIVISOR RIGHT-ALIGNED IN BR, AND DIVIDEND
						; 5924	;	IN AR0-5 (OR LEFT-ALIGNED IN ARX IF ENTERING AT SDIV)
						; 5925	; RETURN QUOTIENT IN AR AND MQ, REMAIN IN ARX
						; 5926	;[TIME=22+3(RESTORE REQ'D)]
						; 5927	
						; 5928	;TO IMPROVE ADJBP PERFORMANCE, INSERT THE INSTRUCTION SHOWN BELOW
						; 5929	; (SIXDZ), AND CHANGE THE CALLS TO SIXDIV TO "SKP SCAD NE,J/SIXDZ"
						; 5930	;=0
						; 5931	;SIXDZ:	AR_0S,ARX_0S,FE_#,#/36.,RETURN2	;HERE IF DIVIDEND IS ZERO
						; 5932	
U 1223, 1231,3401,2400,0301,1000,0010,0004	; 5933	SIXDIV:	ARX_AR,AR_0S,FE_#,#/4,J/SDIV-
						; 5934	=*1*0*0
U 1230, 1230,0602,5504,3001,0020,0031,0000	; 5935	SDIV:	DIVIDE,AR_2(AR+BR),ARX/ADX*2,J/SDIV
U 1231, 1230,5102,5500,3001,0020,0031,0000	; 5936	SDIV-:	DIVIDE,AR_2(AR-BR),ARX/ADX*2,J/SDIV
U 1234, 1244,0602,2000,3001,0020,0031,0000	; 5937		DIVIDE,AR_AR+BR,J/SDIVR		;NO SHIFT ON FINAL STEP
U 1235, 1244,5102,2004,3001,0020,0031,0000	; 5938		DIVIDE,AR_AR-BR
						; 5939	=1**1*0
U 1244, 1245,0602,2000,0000,0020,0010,0000	; 5940	SDIVR:	AR_AR+BR			;NO CRY0 MEANS RESTORE REQ'D
						; 5941		ARX_AR,AR_MQ,			;RETURN QUO IN AR, REMAIN IN ARX
U 1245, 0002,3723,2400,0301,1000,0003,0044	; 5942			FE_#,#/36.,RETURN2
						; 5943	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 129
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	ADJBP

						; 5944	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 130
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	I/O INSTRUCTIONS

						; 5945	.TOC	"I/O INSTRUCTIONS"
						; 5946	
						; 5947	; BITS 10-12 OF INSTRUCTION GET MAPPED TO IR 7-9 FOR I/O INSTRUCTIONS
						; 5948	; THE DEVICE ADDRESS IS BROKEN DOWN AS ONE OF THE FIRST 7, OR ALL OTHERS
						; 5949		.DCODE
						; 5950	
						; 5951	;DEVICE 000 (APR)
						; 5952	
D 0700, 3001,1502				; 5953	700:	W,		J/APRBI		;BLKI APR,	OPTIONS, SERIAL #
D 0701, 3600,1500				; 5954		W,	DATAI,	J/APRDI		;DATAI APR,	ADDRESS COMPARE
D 0702, 0001,1412				; 5955		I,		J/APRBO		;BLKO APR,	REFILL RAM
D 0703, 4400,1410				; 5956		R,	DATAO,	J/APRDO		;DATAO APR,	ADDRESS COMPARE
D 0704, 0400,1414				; 5957		I,	CONO,	J/APRCO		;CONO APR,	APR FLAGS
D 0705, 0600,1416				; 5958		I,	CONI,	J/APRCI		;CONI APR,
D 0706, 0101,1416				; 5959		I,	CONSZ,	J/APRCI		;CONSZ APR,
D 0707, 0500,1416				; 5960		I,	CONSO,	J/APRCI		;CONSO APR,
						; 5961	
						; 5962	;DEVICE 004 (PI)
						; 5963	
D 0710, 3600,1511				; 5964	710:	W,	M,	J/PIBI		;BLKI PI,	READ ERA
D 0711, 3301,1510				; 5965		W,	B/3,	J/PIDI		;DATAI PI,	UNASSIGNED
D 0712, 4001,1512				; 5966		R,		J/PIBO		;BLKO PI,	SBUS DIAGNOSTIC
D 0713, 4000,1510				; 5967		R,	B/0,	J/PIDO		;DATAO PI,	UNASSIGNED
D 0714, 0401,1600				; 5968		I,	CONO,	J/PICO		;CONO PI,	PI SYSTEM CONTROL
D 0715, 0601,1604				; 5969		I,	CONI,	J/PICI		;CONI PI,	IN PROGRESS, ENABLE
D 0716, 0100,1604				; 5970		I,	CONSZ,	J/PICI
D 0717, 0501,1604				; 5971		I,	CONSO,	J/PICI
						; 5972	
						; 5973	;DEVICE 010 (PAG)
						; 5974	
D 0720, 6201,1612				; 5975	720:	RW,	BLKI,	J/PAGBI		;BLKI PAG,	UNASSIGNED
D 0721, 3601,1610				; 5976		W,	DATAI,	J/PAGDI		;DATAI PAG,	USER CONTEXT
D 0722, 0000,1514				; 5977		I,		J/PAGBO		;BLKO PAG,	INVAL PAGE TABLE
D 0723, 4401,1516				; 5978		R,	DATAO,	J/PAGDO		;DATAO PAG,	USER CONTEXT
D 0724, 0401,1614				; 5979		I,	CONO,	J/PAGCO		;CONO PAG,	EXEC CONTEXT
D 0725, 0601,1616				; 5980		I,	CONI,	J/PAGCI		;CONI PAG,
D 0726, 0100,1616				; 5981		I,	CONSZ,	J/PAGCI
D 0727, 0501,1616				; 5982		I,	CONSO,	J/PAGCI
						; 5983	
						; 5984	;DEVICE 014 (CCA)
						; 5985	
D 0730, 0000,1312				; 5986	730:	I,	J/SWEEP			;8 FUNCTIONS TO SWEEP THE CACHE
D 0731, 0000,1312				; 5987		I,	J/SWEEP	;SWPIA	INVALIDATE ALL CACHE, NO CORE UPDATE
D 0732, 0000,1312				; 5988		I,	J/SWEEP	;SWPVA	VALIDATE ALL CORE, LEAVE CACHE VALID
D 0733, 0000,1312				; 5989		I,	J/SWEEP	;SWPUA	UNLOAD ALL CACHE TO CORE, CLEAR CACHE
D 0734, 0000,1312				; 5990		I,	J/SWEEP
D 0735, 0000,1312				; 5991		I,	J/SWEEP	;SWPIO	INVALIDATE ONE PAGE
D 0736, 0000,1312				; 5992		I,	J/SWEEP	;SWPVO	VALIDATE ONE PAGE
D 0737, 0000,1312				; 5993		I,	J/SWEEP	;SWPUO	UNLOAD ONE PAGE
						; 5994	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 131
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	I/O INSTRUCTIONS

						; 5995	;I/O CONT'D
						; 5996	
						; 5997	;DEVICE 020 (TIM)
						; 5998	
D 0740, 3101,1404				; 5999	740:	W,	B/1,	J/RDMTR		;BLKI TIM,	PERF CNT
D 0741, 3000,1404				; 6000		W,	B/0,	J/RDMTR		;DATAI TIM,	TIME BASE
D 0742, 4400,1710				; 6001		R,	DATAO,	J/TIMBO		;BLKO TIM,	PA ENABLES
						; 6002	.IFNOT/MUSIC
D 0743, 4401,1714				; 6003		R,	DATAO,	J/TIMDO		;DATAO TIM,	UNDEFINED
						; 6004	.IF/MUSIC
						; 6005		I,	DATAO,	J/PLAY		;DATAO TIM,	MUSIC PLAYER
						; 6006	.ENDIF/MUSIC
D 0744, 0400,1700				; 6007		I,	CONO,	J/TIMCO		;CONO TIM,	SETUP INTERVAL TIMER
D 0745, 0600,1702				; 6008		I,	CONI,	J/TIMCI		;CONI TIM,	RD INTERVAL & PERIOD
D 0746, 0101,1702				; 6009		I,	CONSZ,	J/TIMCI
D 0747, 0500,1702				; 6010		I,	CONSO,	J/TIMCI
						; 6011	
						; 6012	;DEVICE 024 (MTR)
						; 6013	
D 0750, 3300,1404				; 6014	750:	W,	B/3,	J/RDMTR		;BLKI MTR,	CACHE CNT
D 0751, 3201,1404				; 6015		W,	B/2,	J/RDMTR		;DATAI MTR,	EBOX CNT
D 0752, 0001,1002				; 6016		I,		J/UUO		;BLKO MTR,	UNDEFINED
D 0753, 0001,1002				; 6017		I,		J/UUO		;DATAO MTR,	UNDEFINED
D 0754, 0401,1704				; 6018		I,	CONO,	J/MTRCO		;CONO MTR,	ACCT & TB CTL
D 0755, 0601,1706				; 6019		I,	CONI,	J/MTRCI		;CONI MTR,	SAME
D 0756, 0100,1706				; 6020		I,	CONSZ,	J/MTRCI
D 0757, 0501,1706				; 6021		I,	CONSO,	J/MTRCI
						; 6022	
						; 6023	;DEVICE 030
						; 6024	
D 0760, 6200,1400				; 6025	760:	RW,	BLKI,	J/BLKIO
D 0761, 3601,1406				; 6026		W,	DATAI,	J/IO
D 0762, 6001,1400				; 6027		RW,	BLKO,	J/BLKIO
D 0763, 4401,1406				; 6028		R,	DATAO,	J/IO
D 0764, 0401,1402				; 6029		I,	CONO,	J/CONO
D 0765, 3601,1406				; 6030		W,	CONI,	J/IO
D 0766, 0101,1402				; 6031		I,	CONSZ,	J/CONS
D 0767, 0500,1402				; 6032		I,	CONSO,	J/CONS
						; 6033	
						; 6034	;DEVICES 034-774 (ALL OTHERS)
						; 6035	
D 0770, 6200,1400				; 6036	770:	RW,	BLKI,	J/BLKIO
D 0771, 3601,1406				; 6037		W,	DATAI,	J/IO
D 0772, 6001,1400				; 6038		RW,	BLKO,	J/BLKIO
D 0773, 4401,1406				; 6039		R,	DATAO,	J/IO
D 0774, 0401,1402				; 6040		I,	CONO,	J/CONO
D 0775, 3601,1406				; 6041		W,	CONI,	J/IO
D 0776, 0101,1402				; 6042		I,	CONSZ,	J/CONS
D 0777, 0500,1402				; 6043		I,	CONSO,	J/CONS
						; 6044	
						; 6045		.UCODE
						; 6046	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 132
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	EXTERNAL DEVICE I/O INSTRUCTIONS

						; 6047	.TOC	"EXTERNAL DEVICE I/O INSTRUCTIONS"
						; 6048	
						; 6049	=00*000
U 1400, 2002,4001,0000,0000,0000,7321,0000	; 6050	BLKIO:	SKP IO LEGAL,CALL,J/IOCHK	;FIRST VERIFY INSTR VALIDITY
U 1401, 1263,0001,0000,0000,0020,0034,0000	; 6051		BYTE DISP,J/BLK1		;TEST FPD
						; 6052	CONS:					;HERE FOR CONSO, CONSZ TO LOAD
						; 6053						; BR IN CASE OF UUO
U 1402, 1406,4001,0040,0000,3000,0610,0004	; 6054	CONO:	BR/AR,ARL_ARR,ARR_ARR		;CONDITIONS TO BOTH HALVES
						; 6055	=10
						; 6056	IO:	FIN XFER,MB WAIT,		;WAIT FOR MBOX IF BLKI/O
U 1406, 1270,3200,0003,0000,0022,7321,0000	; 6057			SKP IO LEGAL,CALL,J/GTEBUS
U 1407, 1232,4001,0000,0000,0005,2233,0000	; 6058	RELEEB:	REL ECL EBUS,B WRITE		;XFER DONE, WHAT TO DO?
						; 6059	=
						; 6060	=1*010
U 1232, 1225,4001,0003,0000,0002,0010,0000	; 6061	IOTEND:	FIN STORE,MB WAIT,J/BLK4	;BLKI/BLKO
U 1233, 0071,3602,0000,0000,0246,0010,0203	; 6062		TEST AR.BR,TEST FETCH,J/NOP	;CONSZ
U 1236, 1242,0001,0003,0000,0002,6510,0000	; 6063		MEM_AR,SKP PI CYCLE,J/IOFET	;DATA/CON I/O
U 1237, 0071,3602,0000,0000,0246,0010,0203	; 6064		TEST AR.BR,TEST FETCH,J/NOP	;CONSO
						; 6065	
						; 6066	;BLKO/BLKI SCREWED AROUND WITH TO TRY TO STOP PI LOSSAGE.
U 1225, 1134,5062,0000,0000,0246,6517,0203	; 6067	BLK4:	TEST BRL,TEST FETCH,SKP PI CYCLE,J/CLRFPD
						; 6068	
						; 6069	=1****0
U 1242, 0071,4001,0000,0000,0206,0010,0400	; 6070	IOFET:	I FETCH,J/NOP			;HERE IF NOT PI CYCLE
U 1243, 1544,0001,0000,0000,0000,0024,0502	; 6071		DISMISS,J/PIFET			;DISMISS INTRPT AFTER DATA/CON I/O
						; 6072	
						; 6073	=1**010
U 1262, 1275,3701,0043,0000,0302,0033,0000	; 6074	BLK2:	MEM_AR,BR/AR,VMA_AR,B DISP,J/BLK3
U 1263, 1262,4003,2000,0000,0036,0017,0000	; 6075	BLK1:	AR_AR+1,GEN CRY18,STORE,J/BLK2	;UPDATE POINTER WORD
U 1267, 1262,0001,0000,0000,0000,6510,0000	; 6076	=111	SKP PI CYCLE,J/BLK2		;IF FPD & NOT PI, DON'T INCREMENT
						; 6077	=1*101					;DO DATAI OR DATAO
U 1275, 1406,0001,0000,0000,0012,1110,0100	; 6078	BLK3:	LOAD AR,SET FPD,J/IO		;GET DATA TO OUTPUT
U 1277, 1406,0001,0000,0000,0000,1110,0100	; 6079		SET FPD,J/IO			;INPUT, DO IO BEFORE MEM
						; 6080	;NOTE NOTE NOTE SET FPD INHIBITED BY HARDWARE IF PI CYCLE (SCD5)
						; 6081	
						; 6082	;SUBROUTINES TO HANDLE EBUS
						; 6083	;CALL WITH "SKP IO LEGAL"
						; 6084	;ENTER AFTER LOADING AR IF OUTPUT FUNCTION
						; 6085	
						; 6086	=00
U 1270, 1002,3242,2000,0000,0000,0010,0000	; 6087	GTEBUS:	AR_BR,J/UUO			;HERE IF IO ILLEGAL IN THIS MODE
U 1271, 1254,0001,0000,0000,0000,2221,0200	; 6088		REQ EBUS,CALL,J/WGRANT		;ASK PI SYSTEM FOR BUS
						; 6089	=11					;RETURN TO TRANSFER ROUTINE
						; 6090	
						; 6091	;SUBROUTINE TO PERFORM EBUS TRANSFER
						; 6092	;SETUP CONTROLLER SELECT AND FUNCTION LINES BEFORE CALL
						; 6093	;IF OUTPUT, ALSO PUT AR ONTO EBUS DATA LINES
						; 6094	
						; 6095	EBUSX:	GEN AR,TIME/5T,			;WAIT AFTER ASSERTING FUNCTION
U 1273, 1247,3701,0000,0000,0060,2210,0060	; 6096			SET EBUS DEMAND,J/WXFER	; AFTER 300 NS, ASSERT DEMAND
						; 6097	=0
						; 6098	EBUSW:	AR_EBUS,GEN AR,
U 1246, 1251,3701,3000,0000,0060,2210,0020	; 6099			CLR EBUS DEMAND,J/RELEB	;STROBE DATA AND DROP DEMAND
U 1247, 1246,3701,0000,0000,0000,6710,0000	; 6100	WXFER:	GEN AR,SKP -EBUS XFER,J/EBUSW	;WAIT FOR TRANSFER
						; 6101	
						; 6102	RELEB:	GEN AR,REL EBUS,TIME/5T,	;DROP DATA, CS, AND FCN
U 1251, 0003,3701,0000,0000,0060,2203,0100	; 6103			RETURN3			;AFTER 150 NS, THEN RELEASE BUS
						; 6104	
						; 6105	
						; 6106	;SUBROUTINE TO WAIT FOR PI SYSTEM TO GRANT EBUS
						; 6107	; IT WILL EITHER SEND EBUS GRANT, OR PI READY
						; 6108	
						; 6109	=0
U 1254, 1260,4001,0000,0000,0000,6610,0000	; 6110	WGRANT:	SKP -EBUS GRANT,J/WGRNT1	;GOT IT?
U 1255, 0151,4001,0000,0000,0000,2210,0000	; 6111		DROP EBUS REQ,J/TAKINT
						; 6112	=0
U 1260, 1253,3701,0000,0000,0000,2210,0030	; 6113	WGRNT1:	IO INIT,GEN AR,J/WGRNT2		;GOT IT, SETUP CS, FCN, AND DATA
U 1261, 1254,4001,0000,0000,0000,7010,0000	; 6114		SKP INTRPT,J/WGRANT		;DIDN'T GET IT, TEST FOR INTERUPT
						; 6115	WGRNT2:	GEN AR,TIME/5T,			;JUST WAIT
U 1253, 0003,3703,0000,0000,0060,0003,0030	; 6116			EBUS CTL/IO INIT,RETURN3
						; 6117	
						; 6118	;HERE TO START PI CYCLE TRANSFER.  HOLD EBUS CTL SELECTION
						; 6119	
U 1257, 1273,0001,0000,0000,0060,0010,0027	; 6120	EBUSI:	TIME/5T,EBUS CTL/DATAI,J/EBUSX
U 1264, 1273,3701,0000,0000,0060,0010,0026	; 6121	EBUSO:	GEN AR,TIME/5T,EBUS CTL/DATAO,J/EBUSX
						; 6122	
						; 6123	;SUBROUTINES TO CHECK IO LEGALITY FOR INTERNAL I/O INSTRUCTIONS
						; 6124	
						; 6125	2002:					;ACCESSIBLE ON EXTEND [0]
U 2002, 1002,3242,2000,0000,0000,0010,0000	; 6126	IOCHK:	AR_BR,J/UUO			;NAUGHTY, MUST'NT DO
						; 6127	2003:
U 2003, 0001,4001,0000,0000,0000,0003,0000	; 6128	RET1:	RETURN1				;ONE-CYCLE NULL ROUTINE
						; 6129	
						; 6130	=0
U 1302, 1002,3242,2000,0000,0000,0010,0000	; 6131	GETEEB:	AR_BR,J/UUO			;IO ILLEGAL IN THIS MODE
U 1303, 0001,0001,0000,0000,0000,2203,0400	; 6132	GTEEB1:	GET ECL EBUS,RETURN1
						; 6133	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 133
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	INTERNAL DEVICE FUNCTIONS -- APR, CCA

						; 6134	.TOC	"INTERNAL DEVICE FUNCTIONS -- APR, CCA"
						; 6135	
						; 6136	=00***0
						; 6137	SWEEP:	BR/AR,SC_#,#/9.,CALL,
U 1312, 2002,4001,0040,0302,0000,7321,0011	; 6138			SKP IO LEGAL,J/IOCHK	;ALLOWED?
U 1313, 1265,0001,4000,0000,0000,0010,0000	; 6139		AR_SHIFT			;MOVE PAGE # TO PLACE
U 1265, 1266,3701,0000,0000,0307,0010,0601	; 6140	=	VMA_AR,SWEEP CACHE		;START A SWEEP
U 1266, 0066,0001,0000,0000,0002,0010,0000	; 6141	MBREL:	MB WAIT,J/IFNOP			;COMPLETE REG FUNC BEFORE FETCH
						; 6142	
						; 6143	
						; 6144	=00**00
U 1410, 1302,4001,0000,0000,0000,7321,0000	; 6145	APRDO:	CALL,SKP IO LEGAL,J/GETEEB	;SET ADDR BREAK
U 1411, 1407,3703,0000,0000,0060,2010,0417	; 6146		DATAO APR,J/RELEEB
U 1412, 2002,0001,0040,0000,0000,7321,0000	; 6147	APRBO:	BR/AR,CALL,SKP IO LEGAL,J/IOCHK	;SET CACHE REFILL ALGORITHM
U 1413, 1266,0001,0000,0000,0007,0010,0505	; 6148		WR REFILL RAM,J/MBREL		;INFO ALREADY IN VMA
						; 6149	=
						; 6150	
						; 6151	=00*000
U 1500, 1302,4001,0000,0000,0000,7321,0000	; 6152	APRDI:	CALL,SKP IO LEGAL,J/GETEEB	;READ ADDR BREAK
U 1501, 1407,0001,3000,0000,0060,2010,0513	; 6153		DATAI APR(L),J/RELEEB
						; 6154	=010
U 1502, 2002,4001,0000,0000,0000,7321,0000	; 6155	APRBI:	CALL,SKP IO LEGAL,J/IOCHK	;RETURN MICRO VERSION, SERIAL #
						; 6156		AR_SERIAL,TIME/3T,		;READ SERIAL NUMBER
U 1503, 0137,4001,0000,0000,0020,0721,0100	; 6157			CALL,J/UVERS		;GET MICRO-CODE VERSION IN AR
U 1507, 1272,3242,2000,0000,3000,0022,0004	; 6158	=111	ARL_ARR.S,AR_BR			;COMB SERIAL WITH VERSION
U 1272, 0066,4001,0000,0000,0016,0110,0420	; 6159	=	AR0-8_#,#OPTIONS,STORE,J/STMEM	;SET OPTION FLAGS
						; 6160	
						; 6161	
						; 6162	=00**00
						; 6163	APRCO:	BR/AR,ARL_ARR.M,ARR_ARR,CALL.M,	;SET APR FLAGS
U 1414, 1302,0001,0040,0000,3001,7310,0404	; 6164			SKP IO LEGAL,J/GETEEB
U 1415, 1407,3703,0000,0000,0060,2010,0414	; 6165		CONO APR,J/RELEEB
						; 6166	APRCI:	BR/AR,CALL,
U 1416, 1302,0001,0040,0000,0000,7321,0000	; 6167			SKP IO LEGAL,J/GETEEB	;READ APR FLAGS
U 1417, 1274,4001,3000,0000,0060,2010,0510	; 6168		CONI APR(R)			;GET RIGHT HALF OF APR CONDITIONS
U 1274, 1276,0001,3400,0000,3060,2010,0512	; 6169	=	ARX_AR SWAP,CONI APR(L)		;NOW LH COND TO AR LEFT
U 1276, 1407,0001,4000,0000,2000,0610,0000	; 6170		AR_ARX,ARL_ARL,J/RELEEB		;COMBINE HALVES
						; 6171	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 134
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	INTERNAL DEVICE FUNCTIONS -- PI

						; 6172	.TOC	"INTERNAL DEVICE FUNCTIONS -- PI"
						; 6173	
						; 6174	=00*000
						; 6175	.IFNOT/INSTR.STAT
						; 6176	PIDO:
U 1510, 1002,3242,2000,0000,0000,0010,0000	; 6177	PIDI:	AR_BR,J/UUO			;DATAI/O PI, UNASSIGNED
						; 6178	
						; 6179	.IF/INSTR.STAT
						; 6180	;DATAO PI, SETS UP BUFFER POINTERS FOR TRACKS
						; 6181	;DATAI PI, READS CURRENT BUFFER POINTER
						; 6182	
						; 6183	PIDI:
						; 6184	PIDO:	BR/AR,ARL+ARX_0.M,CALL.M,	;CHECK IO LEGALITY
						; 6185			SKP IO LEGAL,J/IOCHK
						; 6186		SC_#,#/9.,B DISP,SKP BR0,J/PIDX	;NOW, WHAT TO DO?
						; 6187	.ENDIF/INSTR.STAT
						; 6188	
U 1511, 0164,4001,0000,0000,0007,0010,0504	; 6189	PIBI:	READ ERA,J/RDEBRG		;GET AND STORE
						; 6190	=0
U 1512, 2002,4001,0000,0000,0000,7321,0000	; 6191	PIBO:	CALL,SKP IO LEGAL,J/IOCHK	;SBUS DIAGNOSTIC
U 1513, 1301,0001,0000,0000,0007,0010,0407	; 6192		SBUS DIAG			;SEND THE DIAG FUNCTION FROM AR
						; 6193	=	AR/CACHE,VMA_VMA+1,
U 1301, 0066,4001,1000,0000,0016,3610,0000	; 6194			STORE,J/STMEM		;GET AND STORE THE RESPONSE
						; 6195	
						; 6196	=00*000
						; 6197	PICO:	BR/AR,ARL_ARR.M,ARR_ARR,
U 1600, 1322,4001,0040,0000,3001,7310,0404	; 6198			CALL.M,SKP IO LEGAL,J/PICOM1
U 1603, 1320,3703,0000,0000,0060,2010,0415	; 6199	=11	CONO PI,J/PICOM2		;SEND THE DATA
						; 6200	=00*100
U 1604, 1322,4001,0040,0000,0000,7321,0000	; 6201	PICI:	BR/AR,CALL,SKP IO LEGAL,J/PICOM1
U 1607, 1306,4001,3000,0000,0060,2010,0500	; 6202	=11	CONI PI(R)			;READ RH TO AR LEFT
						; 6203	=	ARX_AR SWAP,			;RH COND TO ARX RH
U 1306, 1311,0001,3400,0000,3060,2010,0530	; 6204			CONI PI(PAR)		; AND PARITY ENABLES TO RH
						; 6205		BRX/ARX,ARX_AR,			;READY TO COMB RH PARTS
U 1311, 1316,0001,3420,0000,1060,2010,0501	; 6206			CONI PI(L)		; AND LH TO AR LEFT
U 1316, 1320,3302,6004,0000,0000,0610,0000	; 6207		AR_ARX*BRX,AD/OR,ARL_ARL	;COMBINE THEM
U 1320, 1232,3703,0000,0000,0005,2233,0100	; 6208	PICOM2:	REL EBUS,GEN AR,B WRITE,J/IOTEND
						; 6209	
						; 6210	=0
U 1322, 1002,3242,2000,0000,0000,0010,0000	; 6211	PICOM1:	AR_BR,J/UUO			;LOSE
U 1323, 1254,4001,0000,0000,0000,2210,0200	; 6212		REQ EBUS,J/WGRANT		;OK, WAIT TO GET FULL EBUS
						; 6213	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 135
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	TRACKS SUPPORT

						; 6214	.TOC	"TRACKS SUPPORT"
						; 6215	
						; 6216	.IF/INSTR.STAT
						; 6217	=00
						; 6218	PIDX:	CLR TRACKS EN,J/IFNOP		;TURN TRACKS OFF
						; 6219	.IF/TRACKS
						; 6220		ARX_SHIFT,ARL_BRL,ARR_0.S,J/PIDO2
						; 6221	.IFNOT/TRACKS
						; 6222		TRX_AR,J/PIDO3			;SAVE TABLE PAGE #, TURN ON
						; 6223	.ENDIF/TRACKS
						; 6224	
						; 6225	=11	AR_TRX				;READ BACK POINTER
						; 6226		ARL_0.M				;GET INDEX PART
						; 6227		AR_AR+TRB,STORE,J/STMEM		;DONE WITH DATAI
						; 6228	
						; 6229	PIDO2:	TRX_AR,AR_ARX			;SET UP INDEX
						; 6230		TRB_AR				;AND BASE
						; 6231	PIDO3:	SET TRACKS EN,J/IFNOP		;TURN TRACKS ON
						; 6232	
						; 6233	.IF/TRACKS
						; 6234	;HERE WHEN NICOND FINDS TRACKS ENABLED
						; 6235	=0
						; 6236	TRK1:	TRX_AR,J/TRK2			;PUT BACK UPDATED INDEX
						; 6237		AR_AR SWAP			;END OF BUFFER.  RESET
						; 6238		AR_-AR,J/TRK1			; ORIGINAL INDEX
						; 6239	
						; 6240	TRK2:	ARL_0.M
						; 6241		VMA_AR+TRB			;ADDRESS TRACKS BUFFER
						; 6242		AR_PC,STORE,PHYS REF		; PUT PC THERE
						; 6243		MEM_AR,VMA/PC,CLR TRACKS EN	;PREVENT NICOND SEEING TRACKS
						; 6244		SET TRACKS EN			;...UNTIL NEXT TIME
						; 6245		DISP/NICOND,J/NEXT		;GO DO NEXT INSTR
						; 6246	.ENDIF/TRACKS
						; 6247	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 136
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	TRACKS SUPPORT

						; 6248	.IF/OP.CNT
						; 6249	;HERE WHEN NICOND FINDS OPCODE COUNTING ENABLED
						; 6250	; SKIP IF USER MODE
						; 6251	
						; 6252	=0
						; 6253	OPCT1:	AR_TRX,SKP AC REF,J/OPCT2	;TRX HAS PAGE # FOR EXEC TABLE
						; 6254		AR_TRX+1,SKP AC REF		; NEXT PAGE IS FOR USER
						; 6255	=0
						; 6256	OPCT2:	AR_SHIFT,J/OPCT3		;OPCODE INDEXES INTO TABLE
						; 6257		ARX_FM(VMA),J/OPCT2		;GET INSTR FROM FM
						; 6258	OPCT3:	VMA_AR,LOAD AR,PHYS REF		;GET TABLE ENTRY
						; 6259		AR_MEM
						; 6260		AR_AR+1,STORE			;ADD THIS OCCURANCE TO IT
						; 6261		MEM_AR,VMA_PC,CLR TRACKS EN
						; 6262		SET TRACKS EN			;LET US GET BACK NEXT NICOND
						; 6263		DISP/NICOND,J/NEXT		;GO DO INSTR IN ARX
						; 6264	.ENDIF/OP.CNT
						; 6265	.IF/OP.TIME
						; 6266	;HERE TO ADD UP TIME SPENT IN INSTR'S
						; 6267	
						; 6268	OPTM1:	BR_AR LONG,AR_ARX,ARX_TRB,	;THIS INSTR TO AR, LAST TO ARX
						; 6269			SKP AC REF
						; 6270	=0
						; 6271	OPTM2:	TRB_AR,J/OPTM3			;SAVE NEXT INSTR
						; 6272		AR_FM(VMA),J/OPTM2		;GET NEXT INSTR FROM FM
						; 6273	OPTM3:	SC_#,#/9.,SKP USER		;WHICH TABLE SHALL WE USE?
						; 6274	=0	AR_TRX,J/OPTM4			;EXEC
						; 6275		AR_TRX+1			;USER
						; 6276	OPTM4:	ARX_SHIFT,RD+CLR PA		;TABLE ADDR TO ARX, TIME TO AR
						; 6277		VMA_ARX,LOAD ARX,PHYS REF	;GET TABLE ENTRY
						; 6278		AR_AR-BR,ARL_0.S		;COMPENSATE TIME FOR THIS CODE
						; 6279		BR/AR,AR_MEM,SKP AR18		;IF THIS WAS AN ENABLED STATE,
						; 6280	=0	AR_AR+BR,STORE			;WRITE IT BACK
						; 6281		MEM_AR,VMA/PC			;NOW SETUP NEXT INSTR AGAIN
						; 6282		ARX_BRX,SET TRK+PA EN		;RESTORE STATISTICS FLAGS
						; 6283		DISP/NICOND,J/NEXT
						; 6284	.ENDIF/OP.TIME
						; 6285	.ENDIF/INSTR.STAT
						; 6286	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 137
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	INTERNAL DEVICE FUNCTIONS -- PAG

						; 6287	.TOC	"INTERNAL DEVICE FUNCTIONS -- PAG"
						; 6288	
						; 6289	=00**00
						; 6290	PAGBO:	BR/AR,CLR FE,CALL,		;INVALIDATE ONE PAGE TABLE LINE
U 1514, 2002,0001,0040,0401,0000,7321,0000	; 6291			SKP IO LEGAL,J/IOCHK
U 1515, 1356,0001,0000,0000,0000,2310,0001	; 6292	PAGBO1:	PT SEL_INVAL,J/PTLOOP		;SETUP INITIAL PT WR SELECT
						; 6293	PAGDO:	ARX_AR (AD),ARR_ARL,ARL_ARL.M,	;SETUP USER CONTEXT
U 1516, 1302,3703,4200,0000,3001,7310,0400	; 6294			CALL.M,SKP IO LEGAL,J/GETEEB
U 1517, 1321,3703,4000,0000,2060,2010,0620	; 6295		DATAO PAG(L),AR_ARX		;SETUP AC BLOCKS, PREV CTXT
U 1321, 1324,3203,0000,0302,0020,5510,0011	; 6296	=	SKP AR2,SC_#,#/9.
						; 6297	=0
U 1324, 1407,4001,0000,0000,0000,0010,0007	; 6298	TIMCO1:	MTR CTL/CONO TIM,J/RELEEB	;DO NOT CHANGE UBR
U 1325, 1326,3401,2010,0000,0000,4410,0000	; 6299		MQ_SHIFT,SKP AR18,AR_0S		;STORE ACCT?
U 1326, 1330,4001,0000,0000,0000,0121,0100	; 6300	=0	AR0-8_#,#/100,CALL,J/PAGD2	;YES, START WITH EBOX CNT
U 1327, 1345,3723,0000,0000,0307,0010,0602	; 6301		VMA_MQ,LOAD UBR,J/CLRPT		;NO, JUST CLEAR PAGE TABLE
						; 6302	=0
U 1330, 1422,0001,0400,0302,1000,0021,0015	; 6303	PAGD2:	ARX_AR,SC_#,#/13.,CALL,J/EMTR	;UPDATE THE EBOX ACCT
U 1331, 1332,4001,0000,0000,0002,0110,0140	; 6304		MB WAIT,AR0-8_#,#/140		;READY TO GET CACHE ACCT
U 1332, 1423,0001,0400,0302,1000,0010,0015	; 6305		ARX_AR,SC_#,#/13.,J/CMTR	;RETURN ABOVE TO CLR PT
						; 6306	
						; 6307	
						; 6308	=00**00
						; 6309	PAGDI:	SC_#,#/70,SKP IO LEGAL,
U 1610, 1302,4001,0000,0302,0000,7321,0070	; 6310			CALL,J/GETEEB
U 1611, 1333,0001,3000,0000,0060,2021,0511	; 6311		DATAI PAG(L),CALL,J/PCTXT	;FIRST GET AC BLOCKS & CWSX
U 1612, 1002,3242,2000,0000,0000,0010,0000	; 6312	PAGBI:	AR_BR,J/UUO			;BLKI PAG, IS UNASSIGNED
U 1613, 1407,3242,4000,0000,0000,0610,0002	; 6313		AR_SHIFT,ARL_BRL,J/RELEEB	;COMBINE UBR WITH AC BLKS, CWSX
						; 6314	=
U 1333, 1340,4001,0000,2400,3001,0010,0200	; 6315	PCTXT:	P_SC				;PLUG IN LOAD-ENABLE BITS
						; 6316	=1***0*
						; 6317		BR/AR,AR_0S,READ UBR,		;ASK MBOX FOR UBR LOC'N
U 1340, 1754,3401,2040,0000,0007,0021,0502	; 6318			CALL,J/XFERW		;NOW READ IT
U 1342, 1334,4001,3000,0000,0060,2010,0567	; 6319		AR_EBUS REG
						; 6320		ARX_AR,AR_0S,SC_#,#/27.,	;READY TO MOVE INTO POSITION
U 1334, 0003,3441,2400,0302,1000,0003,0033	; 6321			RETURN3
						; 6322	=00**00
						; 6323	PAGCO:	BR/AR,ARL_ARR.M,ARR_ARR,ARX_0S,	;SET EXEC CONTEXT
U 1614, 1302,3401,0240,0000,3001,7310,0404	; 6324			SKP IO LEGAL,CALL.M,J/GETEEB
U 1615, 1344,3701,0000,0000,0060,2010,0416	; 6325		CONO PAG,J/SETEBR		;SET CACHE, SEC, TRAP EN FLAGS
						; 6326	
						; 6327	PAGCI:	BR/AR,AR_0S,CALL,SKP IO LEGAL,	;READ EXEC CONTEXT
U 1616, 1302,3441,2040,0302,0000,7321,0011	; 6328			SC_#,#/9.,J/GETEEB
U 1617, 1341,0001,3000,0000,0060,2010,0531	; 6329		CONI PAG			;READ CACHE, SEC, TRAP EN
						; 6330	=
						; 6331	=1***0*
						; 6332		ARX_AR SWAP,AR_0S,READ EBR,	;SETUP EPT LOC'N TO READ
U 1341, 1754,3441,2400,0000,3007,0021,0503	; 6333			CALL,J/XFERW
						; 6334		AR_EBUS REG,			;GET EBR IN AR
U 1343, 1335,3441,3220,0000,0060,2010,0567	; 6335			BRX/ARX,ARX_0S		;SAVE FLAGS IN LH OF BRX
U 1335, 1336,4001,0400,0000,0000,2210,0000	; 6336		ARX_SHIFT,REL ECL EBUS		;MOVE EBR LOC LEFT
U 1336, 1337,3322,0000,0000,0001,0010,0016	; 6337		ARR_0.M,ADB/BR,ADA EN/EN,AD/OR,ARL/ADX	;COMBINE, THEN PUT IN RH
U 1337, 1232,0001,4000,0000,3005,0033,0000	; 6338		AR_AR SWAP,B WRITE,J/IOTEND	;STORE THE RESULT
						; 6339	;HERE TO FINISH CONO PAG,
						; 6340	
						; 6341	=1***0*
U 1344, 1154,0001,0000,0302,0000,0021,0011	; 6342	SETEBR:	SC_#,#/9.,CALL,J/SHIFT		;MOVE EBR LOC'N TO POSITION
U 1346, 1345,3703,0000,0000,0307,0010,0603	; 6343		VMA_AR,LOAD EBR,J/CLRPT		;SETUP EBR
						; 6344	
						; 6345	;HERE TO CLEAR HWARE PAGE TABLE
						; 6346	; AFTER SETTING EBR OR UBR
						; 6347	
U 1345, 1350,0001,0000,0000,0000,2210,0000	; 6348	CLRPT:	REL ECL EBUS			;DON'T HANG UP BUS FOR THIS
						; 6349	=0*
						; 6350	CLRPT1:	AR_1,CLR ARX,MB WAIT,		;WAIT FOR U/E BR LOAD
U 1350, 1154,4061,2000,0302,0022,0521,0014	; 6351			SC_#,#/12.,CALL,J/SHIFT	;GET 1B23
						; 6352		BR/AR,AR_0S,VMA/AD,		;START CLEARING AT ZERO
U 1352, 1515,3441,2040,0301,0300,0010,0077	; 6353			FE_#,#/63.,J/PAGBO1	;SETUP LOOP COUNT
						; 6354	=110
						; 6355	PTLOOP:	AR_AR+BR,VMA/AD,FE_FE-1,	;SELECT A LINE OF PT
						; 6356			CLR PT LINE,TIME/3T,	;DO THE WORK
U 1356, 1356,0602,2000,3001,0320,2334,0021	; 6357			BYTE DISP,J/PTLOOP	;LOOP TO CLEAR ALL
U 1357, 0066,0001,0000,0000,0000,2310,0000	; 6358		PT SEL_NORMAL,J/IFNOP		;RESET PT WR SELECTION
						; 6359	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 138
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	INTERNAL DEVICE FUNCTIONS -- TIM & MTR

						; 6360	.TOC	"INTERNAL DEVICE FUNCTIONS -- TIM & MTR"
						; 6361	
						; 6362	=00***0
						; 6363	RDMTR:	AR_BR,CALL,			;GET E TO AR
U 1404, 1302,3242,2000,0000,0000,7321,0000	; 6364			SKP IO LEGAL,J/GETEEB	;GRAB CONTROL OF EBUS
						; 6365		MQ_AR,AR_0S,			;SAVE E IN MQ
U 1405, 1360,3441,2010,0302,1000,0033,0015	; 6366			SC_#,#/13.,B DISP	;WHICH COUNTER?
						; 6367	=
U 1360, 1354,4001,3000,0000,0060,2010,0510	; 6368	=00	AR_TIME BASE,J/RDMTR1		;DATAI TIM,
U 1361, 1354,0001,3000,0000,0060,2010,0511	; 6369		AR_PERF CNT,J/RDMTR1		;BLKI TIM,
U 1362, 1354,0001,3000,0000,0060,2010,0512	; 6370		AR_EBOX CNT,J/RDMTR1		;DATAI MTR,
U 1363, 1354,4001,3000,0000,0060,2010,0513	; 6371		AR_CACHE CNT,J/RDMTR1		;BLKI MTR,
						; 6372	
						; 6373	=0
						; 6374	RDMTR1:	ARL+ARX_0.M,B DISP,		;SHIFT COUNT INTO POSITION
U 1354, 1434,4001,0000,0000,0001,0033,0460	; 6375			CALL.M,J/MTRDBL		;ADD DOUBLE WORD FROM PT
U 1355, 1347,0602,2604,0000,0020,2227,0000	; 6376		AR_AR+BR LONG,REL ECL EBUS
U 1347, 0017,3721,0000,0302,0316,0010,0043	; 6377		VMA_MQ,STORE,SC_#,#/35.,J/DMVM1	;STORE TOTAL AT E & E+1
						; 6378	
						; 6379	=00**00
U 1700, 1302,0001,0040,0000,0000,7321,0000	; 6380	TIMCO:	BR/AR,CALL,SKP IO LEGAL,J/GETEEB
U 1701, 1324,3701,0000,0000,0060,2023,0407	; 6381		CONO TIM,J/TIMCO1
						; 6382	TIMCI:	BR/AR,AR_0S,CALL,
U 1702, 1302,3401,2040,0000,0000,7321,0000	; 6383			SKP IO LEGAL,J/GETEEB
U 1703, 1351,0001,3000,0000,0060,2010,0514	; 6384		AR_INTERVAL			;INTERVAL GOES TO LH
U 1351, 1353,3441,2400,0000,3000,0010,0000	; 6385	=	ARX_AR SWAP,AR_0S
U 1353, 1364,4001,3000,0000,0060,2010,0515	; 6386		AR_PERIOD			;PERIOD TO RH
						; 6387	TIMBO1:	MTR CTL/LD PA LH,		;KEEP MTR DECODE FOR TIMBO
U 1364, 1407,4001,0000,0000,2000,0022,0004	; 6388			ARL_ARXL,J/RELEEB	;COMBINE PERIOD WITH INTERVAL
						; 6389	
						; 6390	=00**00
						; 6391	MTRCO:	BR/AR,ARL_ARR.M,ARR_ARR,
U 1704, 1302,0001,0040,0000,3001,7310,0404	; 6392			CALL.M,SKP IO LEGAL,J/GETEEB
U 1705, 1365,3703,0000,0000,0060,2023,0406	; 6393		CONO MTR,J/MTRCO1
						; 6394	MTRCI:	BR/AR,AR_0S,CALL,
U 1706, 1302,3401,2040,0000,0000,7321,0000	; 6395			SKP IO LEGAL,J/GETEEB
U 1707, 1365,0001,3000,0000,0060,2010,0516	; 6396		CONI MTR			;READ BACK CONDITIONS
						; 6397	=
U 1365, 1407,0001,0000,0000,0000,0022,0026	; 6398	MTRCO1:	ARL_0.S,MTR CTL/CONO MTR,J/RELEEB
						; 6399	
						; 6400	=00*000		;only =00***0 needed except dram bites the bag
						; 6401			;so try to hack TIMBO and TIMDO into nearby addresses
						; 6402	TIMBO:	ARX_AR,AR_0S,CALL,		;SAVE ENABLES, CLEAR AR
U 1710, 1302,3441,2400,0000,1000,7321,0000	; 6403			SKP IO LEGAL,J/GETEEB	;CHECK LEGALITY, GET BUS
U 1711, 1712,3703,4000,0000,2060,2023,0404	; 6404		BLKO TIM(L),AR_ARX		;TURN OFF BY CLEARING LH ENABLES
U 1712, 1713,3701,4000,0000,3060,2023,0405	; 6405		BLKO TIM(R),AR_AR SWAP		;SEND RH
U 1713, 1364,3703,0000,0000,0060,2023,0404	; 6406		BLKO TIM(L),J/TIMBO1		;SEND LH, TURNING ON AGAIN
						; 6407	
						; 6408	.IFNOT/MUSIC
U 1714, 1002,3242,2000,0000,0000,0010,0000	; 6409	TIMDO:	AR_BR,J/UUO			;DATAO TIM, UNDEFINED
						; 6410	.IF/MUSIC
						; 6411	PLAY:	SKP PI CYCLE,BR/AR,AR_MUSTIM,J/PLAY0	;MUSIC PLAYER
						; 6412	.ENDIF/MUSIC
						; 6413	=
						; 6414	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 139
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	INTERNAL DEVICE FUNCTIONS -- TIM & MTR

						; 6415	;HERE WHEN METER INCREMENT REQUEST DETECTED
						; 6416	
U 1366, 1367,0001,0000,0000,0000,2210,0400	; 6417	MTRREQ:	GET ECL EBUS			;TAKE CONTROL OF BUS
U 1367, 1370,0001,3000,0000,0060,2010,0517	; 6418		AR_MTR REQ			;WHAT TYPE REQUEST?
						; 6419	=0	MQ_AR,AR_AR*2,CALL,		;GET READY TO DISP
U 1370, 1373,3701,5010,0000,1100,3021,0514	; 6420			VMA_#,#/514,J/MTRRQ0
U 1371, 1372,0001,0000,0000,0000,2210,0000	; 6421		REL ECL EBUS			;DONE
U 1372, 1544,4001,0000,0000,0000,2110,0105	; 6422		SET ACCOUNT EN,J/PIFET		;FETCH NEXT INSTR
						; 6423	
						; 6424	MTRRQ0:	ARX_AR SWAP,DISP/SH0-3,AR_0S,	;DISPATCH ON REQUEST TYPE
U 1373, 1420,3401,2400,0302,3040,0007,0015	; 6425			SC_#,#/13.
						; 6426	=000
U 1420, 1376,4001,3000,0000,0060,2023,0510	; 6427		RD+CLR TB,J/TMTR1		;TIME BASE
U 1421, 1377,4001,3000,0000,0060,2023,0511	; 6428		RD+CLR PA,J/PMTR1		;PERF ANALYSIS CNT
U 1422, 1403,0001,3000,0000,0060,2023,0512	; 6429	EMTR:	RD+CLR E CNT,J/EMTR1		;EBOX CNT
U 1423, 1425,0001,3000,0000,0060,2023,0513	; 6430	CMTR:	RD+CLR C CNT,J/CMTR1		;CACHE CNT
U 1424, 1374,0001,0000,0000,0000,2210,0000	; 6431		REL ECL EBUS			;INTERVAL -- VECTOR INTERRUPT
U 1374, 1375,4001,0000,0000,0000,1510,0714	; 6432	=	SET PI CYCLE
U 1375, 1443,4001,0000,0000,0000,2110,0105	; 6433		SET ACCOUNT EN,J/PIINST
						; 6434	
U 1376, 1426,0001,0000,0000,0000,0010,0000	; 6435	TMTR1:	MTR CTL/CLR TIME,J/MTRRQ1	;HOLD SELECTS FOR
U 1377, 1426,4001,0000,0000,0000,0010,0001	; 6436	PMTR1:	MTR CTL/CLR PERF,J/MTRRQ1	;MTR CTL FUNCTION
U 1403, 1426,4001,0000,0000,0000,0010,0002	; 6437	EMTR1:	MTR CTL/CLR E CNT,J/MTRRQ1	; TO PREVENT RACE
U 1425, 1426,0001,0000,0000,0000,0010,0003	; 6438	CMTR1:	MTR CTL/CLR M CNT,J/MTRRQ1	; AND POSSIBLE GLITCHES
						; 6439	
						; 6440	;HERE WITH RELEVANT COUNT IN ARR, GARBAGE IN ARL
						; 6441	
						; 6442	=0
						; 6443	MTRRQ1:	ARL+ARX_0.M,ARX0-3 DISP,	;CLEAR GARBAGE & RE-DISPATCH
U 1426, 1434,0001,0000,0000,2041,0007,0460	; 6444			CALL.M,J/MTRDBL		; TO ADD DOUBLE COUNTER FROM PT
						; 6445		AR_AR+BR LONG,SC_#,#/35.,
U 1427, 1430,0602,2604,0302,0036,3527,0043	; 6446			VMA_VMA-1,STORE		;STORE BACK IN PROCESS TABLE
U 1430, 1431,3441,2003,0000,0002,1510,0004	; 6447		MEM_AR,AR_0S,ABORT INSTR	;HI PART TO MEM
U 1431, 0001,4001,4000,0000,0016,3603,0000	; 6448		AR_SHIFT,VMA_VMA+1,STORE,RETURN1
						; 6449	
						; 6450	;HERE TO PICK UP DOUBLEWORD FROM PROCESS TABLE
						; 6451	; AND ADD CURRENT CONTENTS OF APPROPRIATE METER
						; 6452	
						; 6453	=00
						; 6454	MTRDBL:	AR_0S,ARX_SHIFT,
U 1434, 1432,3441,2400,0000,0100,3010,0510	; 6455			VMA_#,#/510,J/RDEMTR	;TIME BASE IN EPT 510-511
						; 6456		AR_0S,ARX_SHIFT,
U 1435, 1432,3401,2400,0000,0100,3010,0512	; 6457			VMA_#,#/512,J/RDEMTR	;PERF CNT IN EPT 512-513
						; 6458		AR_0S,ARX_SHIFT,
U 1436, 1433,3401,2400,0000,0100,3010,0504	; 6459			VMA_#,#/504,J/RDUMTR	;EBOX ACCT IN UPT 504-505
						; 6460		AR_0S,ARX_SHIFT,
U 1437, 1433,3441,2400,0000,0100,3010,0506	; 6461			VMA_#,#/506,J/RDUMTR	;CACHE ACCT IN UPT 506-507
						; 6462	
						; 6463	RDEMTR:	BR_AR LONG,			;SAVE COUNT IN BR!BRX
U 1432, 1440,4001,0060,0000,0012,0026,0111	; 6464			LOAD AR,EPT REF,J/RDMTR2;GET HIGH WORD FROM EPT
U 1433, 1440,4001,0060,0000,0012,0026,0221	; 6465	RDUMTR:	BR_AR LONG,LOAD AR,UPT REF	; OR UPT AS APPROP
						; 6466	=0*
						; 6467	RDMTR2:	FIN XFER,VMA_VMA+1,LOAD ARX,	;NOW GET LOW WORD
U 1440, 1754,3240,0003,0000,0033,3621,0000	; 6468			CALL,J/XFERW		;GO WAIT FOR IT
U 1442, 0001,3701,0500,0000,0000,0003,0000	; 6469		ARX_ARX*2,RETURN1
						; 6470	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 140
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	PRIORITY INTERRUPT PROCESSING

						; 6471	.TOC	"PRIORITY INTERRUPT PROCESSING"
						; 6472	;HERE WHEN PRIORITY INTERRUPT REQUEST DETECTED
						; 6473	;PI LOGIC HAS DONE HANDSHAKE TO BRING FUNCTION WORD IN ON EBUS
						; 6474	; FUNCTION WORD IS NOW IN AR, SC=2
						; 6475	
						; 6476	;THE FORMAT OF THE FUNCTION WORD IS --
						; 6477	;    0-2	ADDRESS SPACE FOR THE FUNCTION
						; 6478	;	0=EPT
						; 6479	;	1=EXEC VIRTUAL
						; 6480	;	4=PHYSICAL
						; 6481	;	OTHERS UNDEFINED
						; 6482	;    3-5	FUNCTION TO PERFORM (SEE LIST BELOW AT PIDISP)
						; 6483	;      6	FUNCTION QUALIFIER
						; 6484	;   7-10	PHYSICAL DEVICE # ON EBUS
						; 6485	;  11-12	UNDEFINED
						; 6486	;  13-35	ADDRESS FOR FUNCTION
						; 6487	
						; 6488	;IN THE CASE OF A STANDARD OR A VECTOR INTERRUPT, THE 'FE'
						; 6489	;REGISTER, WHICH IS NOT CLOBBERED BY THE BASIC INSTRUCTION
						; 6490	;LOOP NOR BY BLKO/BLKI, IS USED TO REMEMBER WHETHER IT WAS
						; 6491	;A STANDARD OR A VECTOR INTERRUPT. (0 FOR STANDARD,
						; 6492	;-1 FOR VECTOR.)  IN THE CASE OF A VECTOR
						; 6493	;INTERRUPT, AC 'T0' IS USED TO REMEMBER THE FUNCTION WORD.
						; 6494	;THIS ALLOWS THE CORRECT ADDRESS FOR THE SECOND WORD OF
						; 6495	;A TWO-WORD INTERRUPT TO BE DETERMINED.  THIS MAKES THE
						; 6496	;MIT IMPTERFACE WORK.  NOTE THAT THIS HACK DOES NOT WORK
						; 6497	;FOR DTE20 OR RH20 VECTOR INTERRUPTS, BUT NO ONE WOULD
						; 6498	;EVER USE BLKO/BLKI WITH THOSE DEVICES.
						; 6499	;[COST = 2 WORDS]
						; 6500	
U 1441, 1450,0001,0000,0000,0040,1507,0714	; 6501	PICYC1:	SET PI CYCLE,SH DISP		;START PI CYCLE
						; 6502	=1000					;3-5 IS FUNCTION TO PERFORM
U 1450, 1443,4001,0000,0401,0100,3410,0040	; 6503	PIDISP:	VMA_40+PI*2,CLR FE,J/PIINST	;(0) STANDARD INTERRUPT
U 1451, 1443,4001,0000,0401,0100,3410,0040	; 6504		VMA_40+PI*2,CLR FE,J/PIINST	;(1) DITTO
U 1452, 1444,0001,0017,0000,1000,1010,0166	; 6505		MQ_AR,T0_AR,J/PIVECT		;(2) VECTOR
U 1453, 1464,3703,0010,0000,1312,0010,0000	; 6506		VMA_AR,MQ_AR,LOAD AR,J/PIINCR	;(3) INCREMENT
U 1454, 1540,3703,0010,7310,1320,5210,0040	; 6507		VMA_AR,MQ_AR,SKP AR6,J/PIDATO	;(4) DATAO
U 1455, 1522,3703,0010,0000,1360,0010,0000	; 6508		VMA_AR,MQ_AR,TIME/5T,J/PIDATI	;(5) DATAI
U 1456, 1640,3243,2010,7310,1020,5210,0040	; 6509		MQ_AR,AR_AR*4,SKP AR6,J/PIBYTE	;(6) BYTE TRANSFER
U 1457, 1443,4001,0000,0401,0100,3410,0040	; 6510		VMA_40+PI*2,CLR FE,J/PIINST	;(7) UNDEFINED
						; 6511	
						; 6512	;HERE FOR 2ND INTERRUPT INSTRUCTION (PI OV)
						; 6513	=110
U 1446, 1443,0001,0000,0000,0100,3410,0041	; 6514	PICYC2:	VMA_41+PI*2,J/PIINST		;2ND PART OF STD INT
U 1447, 0010,4660,0007,0000,0333,0010,0166	; 6515	PICY2V:	VMA_T0+1,LOAD ARX,J/XCTW	;2ND PART OF VECTOR INT
						; 6516	
U 1443, 0010,4001,0000,0000,0013,0026,0511	; 6517	PIINST:	EPT FETCH,J/XCTW		;SAVE INSTRUCTION ADDRESS
						; 6518	
						; 6519	PIVECT:
						; 6520	.IF/KI INTERRUPT LOSES			;KLUDGE
						; 6521	;IN AC BLK 7, R4 GETS PI FCN WD, R5 GETS PI LEVEL
						; 6522	;(ONLY ON VECTOR INTERRUPTS)
						; 6523		E0_AR,MQ_AR
						; 6524		VMA_40+PI*2
						; 6525		COND/LD VMA HELD
						; 6526		AR_VMA HELD
						; 6527		E1_AR
						; 6528		AR_MQ
						; 6529	.ENDIF/KI INTERRUPT LOSES		;END OF KLUDGE
U 1444, 1445,3203,2000,0302,0000,0010,0005	; 6530		AR_AR*4,SC_#,#/5		;HERE FOR VECTOR INTR
U 1445, 1463,3441,2000,7311,0040,0007,0030	; 6531		FE_# AND S,#/30,AR_0S,SH DISP	;WHAT KIND OF DEVICE?
U 1463, 0010,3723,0000,0000,0313,0026,0511	; 6532	=0011	VMA_MQ,EPT FETCH,J/XCTW		;CHAN 0-3
U 1467, 0010,3723,0000,0000,0313,0026,0511	; 6533		VMA_MQ,EPT FETCH,J/XCTW		;CHAN 4-7
U 1473, 1460,4001,0000,2030,2000,0110,0142	; 6534		AR0-8_FE+#,#/142,J/DTEVEC	;DTE 0-3
						; 6535	.IFNOT/KI INTERRUPT LOSES
U 1477, 0010,3723,0000,3401,0313,0010,0000	; 6536		VMA_MQ,LOAD ARX,FE_-1,J/XCTW	;EXTERNAL DEVICE
						; 6537	.IF/KI INTERRUPT LOSES
						; 6538		AR_MQ,ARL_0S			;EXTERNAL DEVICE
						; 6539		SKP AR NE			;SEE IF ADDR = 0
						; 6540	=0				
						; 6541		DISMISS				;YES, FLUSH
						; 6542		VMA_MQ,LOAD ARX,FE_-1,J/XCTW	;NO, TAKE THE INT
						; 6543	.ENDIF/KI INTERRUPT LOSES
						; 6544	
						; 6545	=0*
U 1460, 1154,3401,2400,0302,1000,0021,0011	; 6546	DTEVEC:	ARX_AR,AR_0S,SC_#,#/9.,CALL,J/SHIFT
U 1462, 0010,3701,0000,0000,0313,0026,0511	; 6547		VMA_AR,EPT FETCH,J/XCTW
						; 6548	
						; 6549	=0101
U 1525, 1754,4001,0000,0000,0012,0026,0111	; 6550	PILD:	LOAD AR,EPT REF,J/XFERW		;GET DATUM FROM EPT
U 1527, 1754,0001,0000,0000,0012,0010,0000	; 6551		LOAD AR,J/XFERW			; OR EXEC VIRTUAL ADDR SPACE
U 1535, 1461,3701,0000,0000,0307,0010,0503	; 6552		VMA_AR,READ EBR,J/PIKLG1	; OR PHYSICAL MEMORY, AS REQUESTED
U 1537, 1543,4001,0000,0000,0000,0010,0000	; 6553		J/PIDONE			;IN CASE OF EBUS PROBLEMS
						; 6554	
						; 6555	;KLUDGE - NEED MEM/REG FUNC TO LOAD VMA EXT
U 1461, 1754,0001,0000,0000,0012,0026,0101	; 6556	PIKLG1:	LOAD AR,PHYS REF,J/XFERW	;NOW DO THE MEMORY CYCLE
						; 6557	
						; 6558	;HERE TO PERFORM INCREMENT FUNCTION
						; 6559	
U 1464, 1470,3200,0003,7310,0042,5210,0040	; 6560	PIINCR:	AR_MEM,SKP AR6			;GET WORD, INCR OR DECR?
U 1470, 1543,4003,2000,0000,0036,0010,0000	; 6561	=0	AR_AR+1,STORE,J/PIDONE
U 1471, 1543,1701,2000,0000,0036,0010,0000	; 6562		AR_AR-1,STORE,J/PIDONE
						; 6563	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 141
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	PRIORITY INTERRUPT PROCESSING

						; 6564	;HERE FOR DATAO (EXAMINE) FUNCTION
						; 6565	
						; 6566	=0000
U 1540, 1525,4001,0000,0000,1041,0007,0400	; 6567	PIDATO:	AR0-3 DISP,CALL.M,J/PILD	;GET DATA FROM REQUESTED ADR SPC
						; 6568		AR_AR*4,SC_#,#/13.,
U 1541, 1532,3243,2000,0302,0000,0021,0015	; 6569			CALL,J/RDEX		;RESTRICTED EXAMINE
U 1542, 1264,3200,0003,0000,0022,2221,0026	; 6570	PIOUT:	AR_MEM,SET DATAO,CALL,J/EBUSO	;SEND DATA
U 1543, 1544,4001,0003,0000,0002,0024,0502	; 6571	PIDONE:	MEM_AR,DISMISS			;DONE, DISMISS & RESUME NORMAL
U 1544, 0071,4001,0000,0000,0106,0010,0400	; 6572	PIFET:	VMA/PC,FETCH,J/NOP		;RESUME AS BEFORE
U 1545, 1504,1703,0000,0000,0320,0021,0000	; 6573	=0101	VMA_AR-1,CALL,J/DEXCHK		;GO PROT/RELOC THIS EXAM
U 1547, 1542,0602,0004,0000,0332,0026,0101	; 6574	=0111	VMA_AR+BR,LOAD AR,PHYS REF,J/PIOUT
U 1557, 1542,0001,0000,0000,0000,0010,0000	; 6575	=1111	J/PIOUT				;PROT VIOLATION.  SEND 0
						; 6576	
						; 6577	;HERE FOR DATAI (DEPOSIT) FUNCTION
						; 6578	
						; 6579	=10
U 1522, 1257,3441,2000,0000,0060,2221,0027	; 6580	PIDATI:	SET DATAI,TIME/5T,CALL,J/EBUSI	;READ THE DATA
U 1523, 1465,3721,2400,0000,1000,0010,0000	; 6581		ARX_AR,AR_MQ			;DATUM TO ARX, GET FCN WORD
U 1465, 1560,0001,0020,7310,0020,5210,0040	; 6582		BRX/ARX,SKP AR6			;RESTRICTED?
U 1560, 1625,0001,0400,0000,1040,0007,0000	; 6583	=0000	AR0-3 DISP,ARX_AR,J/PIST	;NO, STORE AS REQUESTED
U 1561, 1532,3243,2000,0302,0000,0021,0015	; 6584		AR_AR*4,SC_#,#/13.,CALL,J/RDEX	;YES, GET PROT/RELOC ADDR
U 1565, 1504,4001,0000,0000,0320,0021,0000	; 6585	=0101	VMA_AR+1,CALL,J/DEXCHK		;VERIFY LEGALITY
U 1567, 1635,0602,0004,0000,0320,0010,0000	; 6586	=0111	VMA_AR+BR,J/PSTOR		;GO STORE RELOCATED
U 1577, 1543,4001,0000,0000,0000,0010,0000	; 6587	=1111	J/PIDONE			;PROT VIOLATION, STORE NOTHING
						; 6588	
						; 6589	=0101
U 1625, 1543,3202,6000,0000,0016,0026,0111	; 6590	PIST:	AR_BRX,STORE,EPT REF,J/PIDONE
U 1627, 1543,3242,6000,0000,0016,0010,0000	; 6591		AR_BRX,STORE,J/PIDONE
U 1635, 1466,3711,0000,0000,0307,0010,0503	; 6592	PSTOR:	VMA_ARX,READ EBR,J/PIKLG2	;KLUDGE TO SET VMA EXT
U 1637, 1543,4001,0000,0000,0000,0010,0000	; 6593		J/PIDONE
						; 6594	
U 1466, 1543,3242,6000,0000,0016,0026,0101	; 6595	PIKLG2:	AR_BRX,STORE,PHYS REF,J/PIDONE	;NOW DO THE MEM CYCLE
						; 6596	
						; 6597	=10
						; 6598	RDEX:	FE_# AND S,#/30,AR_MQ,CLR ARX,	;DTE# *8 TO FE, ADDR TO AR
U 1532, 0264,3721,2000,7311,0000,0521,0030	; 6599			CALL,J/ROTS
U 1533, 1472,0001,4000,0000,0000,0010,0000	; 6600		AR_SHIFT			;ADDRESS NOW IN AR
U 1472, 1474,4001,0040,2030,2000,0110,0145	; 6601		BR/AR,AR0-8_FE+#,#/145		;SAVE ADDR TO BR, GET EPT LOC
U 1474, 1475,3441,2400,0302,1000,0010,0011	; 6602	GTAR08:	ARX_AR,AR_0S,SC_#,#/9.
U 1475, 0004,0001,4000,0000,0000,0003,0000	; 6603		AR_SHIFT,RETURN4
						; 6604	
						; 6605	=0*
U 1504, 1525,0001,0000,0000,0000,0021,0000	; 6606	DEXCHK:	CALL,J/PILD			;PROTECTION WORD FROM EPT
U 1506, 1520,3102,0000,0000,0020,5410,0000	; 6607		SKP AR GT BR			;ALLOWED?
U 1520, 0012,3401,2000,0000,0000,0003,0000	; 6608	=0	AR_0S,RETURN12			;NO, SEND 0, STORE NOTHING
U 1521, 1754,4001,0000,0000,0012,3626,0111	; 6609		VMA_VMA+1,LOAD AR,EPT REF,J/XFERW	;YES, GET RELOCATION WORD
						; 6610	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 142
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	PRIORITY INTERRUPT PROCESSING

						; 6611	;HERE FOR BYTE TRANSFERS
						; 6612	
						; 6613	=000
U 1640, 1476,0001,0000,7311,0000,0021,0030	; 6614	PIBYTE:	FE_# AND S,#/30,CALL,J/PIBPA	;OUT... GET BP ADDR
U 1641, 1257,3441,2000,0000,0000,2221,0027	; 6615		SET DATAI,CALL,J/EBUSI		;IN ... FIRST READ THE DATA
U 1643, 1650,0321,5400,0000,1020,0010,0000	; 6616	=011	ARX_AR,AR_MQ*4,J/PIDPB		;GOT IT, GO DEPOSIT IT
						; 6617	
U 1644, 1550,3701,0000,0000,0300,0021,0000	; 6618	=100	VMA_AR,CALL,J/PIIBP		;GO INCREMENT OUTPUT BP
U 1645, 1150,0001,0000,2002,0000,0021,0000	; 6619		SC_FE+SC,CALL,J/LDB1		;GO LOAD BYTE FROM IT
U 1647, 1542,0001,0000,0000,0000,0010,0000	; 6620	=111	J/PIOUT				;THEN SEND BYTE
						; 6621	
						; 6622	=000
						; 6623	PIDPB:	BRX/ARX,FE_# AND S,#/30,	;HERE WITH INPUT DATA
U 1650, 1476,4001,0020,7311,0000,0021,0030	; 6624			CALL,J/PIBPA
U 1654, 1550,4003,0000,0000,0320,0021,0000	; 6625	=100	VMA_AR+1,CALL,J/PIIBP		;GO INCREMENT INPUT BYTE PTR
						; 6626		AR_BRX,SC_#-SC,#/36.,		;STORE BYTE WITH IT
U 1655, 1166,3202,6000,5302,0020,5121,0044	; 6627			SKP SCAD0,CALL,J/DPB1
U 1657, 1543,4001,0000,0000,0000,0010,0000	; 6628	=111	J/PIDONE
						; 6629	
U 1476, 1474,0001,0000,2030,2000,0110,0140	; 6630	PIBPA:	AR0-8_FE+#,#/140,J/GTAR08
						; 6631	
						; 6632	=00*
U 1550, 1525,0001,0000,0000,0000,0021,0000	; 6633	PIIBP:	CALL,J/PILD			;GET POINTER FROM EPT
U 1552, 1152,4001,0000,5110,3021,5110,0600	; 6634		P_P-S,SKP SCAD0,CALL.M,J/IBPS	;INCREMENT IT
U 1556, 1067,4001,0400,0102,1000,0010,0000	; 6635	=11*	ARX_AR,SC_P,J/BYTEA		;NOW EVALUATE ITS ADDR
						; 6636	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 143
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	KL-MODE PAGE REFILL LOGIC

						; 6637	.TOC	"KL-MODE PAGE REFILL LOGIC"
						; 6638	
						; 6639	.IF/KLPAGE
						; 6640	;HERE ON ANY PAGE FAILURE
						; 6641	;THE POSSIBLE CAUSES ARE --
						; 6642	;  1:	A PARITY ERROR WAS DETECTED IN AR OR ARX FOLLOWING A READ
						; 6643	;	REFERENCE.  IN THIS CASE WE SAVE THE BAD WORD IN A RESERVED
						; 6644	;	LOCATION IN FAST MEMORY BLOCK 7, AND RETURN A PAGE FAIL CODE
						; 6645	;	INDICATING THE ERROR.
						; 6646	;  2:	THE MBOX DETECTED A PROPRIETARY VIOLATION OR PAGE TABLE PARITY
						; 6647	;	ERROR, OR THE EBOX FOUND THE SELECTED ADDRESS BREAK CONDITION.
						; 6648	;	IN THIS CASE, WE RETURN THE PAGE FAIL CODE GENERATED BY THE
						; 6649	;	MBOX (SEE PRINT PAG4).
						; 6650	;  3:	A REFERENCE OCCURRED FOR A VIRTUAL PAGE FOR WHICH THE HARDWARE
						; 6651	;	PAGE TABLE DIRECTORY HAD NO VALID MATCH.  IN THIS CASE, WE
						; 6652	;	WRITE THE PAGE TABLE DIRECTORY FROM THE VMA, AND CLEAR THE
						; 6653	;	ACCESS BITS FOR ALL PAGE ENTRIES CONTROLLED BY THE SELECTED
						; 6654	;	DIRECTORY ENTRY.  WE THEN JOIN THE REFILL CODE, BELOW.
						; 6655	;  4:	A REFERENCE OCCURRED FOR A VIRTUAL PAGE FOR WHICH THE ACCESS BIT
						; 6656	;	IN THE HARDWARE PAGE TABLE WAS OFF, OR A WRITE OCCURRED TO A
						; 6657	;	PAGE WHOSE WRITABLE BIT WAS OFF.  IN THIS CASE, WE EVALUATE THE
						; 6658	;	PAGING POINTERS IN CORE TO DETERMINE WHETHER THE ACCESS SHOULD
						; 6659	;	BE ALLOWED, AND IF SO, THE PHYSICAL PAGE TO WHICH IT SHOULD BE
						; 6660	;	TRANSLATED.  WE THEN EITHER PAGE FAULT, OR WRITE A PAGE ENTRY
						; 6661	;	INTO THE HARDWARE PAGE TABLE AND RESTART THE REFERENCE.
						; 6662	
						; 6663	
U 2377, 1505,3203,7700,0000,0000,2110,0145	; 6664	2377:	CLR ACCOUNT EN,FORCE AR-ARX,J/PF1
U 1777, 1505,3203,7700,0000,0000,2110,0145	; 6665	1777:	CLR ACCOUNT EN,FORCE AR-ARX
U 1505, 1524,4001,4007,0000,2000,1010,0156	; 6666	PF1:	SV.AR_AR,AR_ARX			;SAVE CURRENT AR
U 1524, 1526,4001,0007,0000,0000,1010,0157	; 6667		SV.ARX_AR			; AND ARX IN CASE PARITY ERROR
U 1526, 1674,4001,0000,0000,0000,2204,0400	; 6668		GET ECL EBUS,PF DISP,J/PF2
						; 6669	=1100
						; 6670	PF2:					;ANY PARITY ERROR?
						; 6671	=1101	AR_SV.AR,SC_#,#/156,		;YES.  AR HAS THE BAD WORD.
U 1675, 1530,3200,2007,0302,0020,6410,0156	; 6672			SKP RPW,J/PFPAR		;CHECK FOR MIDDLE OF RPW CYCLE
U 1676, 1530,3200,2007,0302,0020,0010,0157	; 6673		AR_SV.ARX,SC_#,#/157,J/PFPAR	;YES.  ARX HAS THE BAD WORD.
						; 6674	;	BAG-BITING NO-OP		;ARX PARITY ERROR IS
						; 6675	;					;FRAUDULENT EVEN IN REV.7
U 1677, 1551,0001,3000,0000,0062,2010,0567	; 6676		AR_EBUS REG,MB WAIT,J/PF3	;NO. GET PAGE FAIL WORD
						; 6677	
						; 6678	;HERE ON ANY PARITY ERROR
						; 6679	;SKIP IF MIDDLE OF READ-PAUSE-WRITE CYCLE, IN WHICH CASE WE
						; 6680	; MUST WRITEBACK THE DATA TO PREVENT INCOMPLETE CYCLE
						; 6681	=0
U 1530, 1534,3733,0000,0000,0307,1710,0140	; 6682	PFPAR:	VMA_VMA HELD,MAP,J/PFPAR1	;GET MAP INFO ON REF
U 1531, 1530,4001,0000,0000,0016,0010,0000	; 6683		STORE,J/PFPAR			;WRITEBACK WITH GOOD PARITY
						; 6684	PFPAR1:	SV.PAR_AR,MB WAIT,		;SAVE WORD WITH BAD PARITY
U 1534, 1536,0001,0007,2302,0002,1010,0160	; 6685			SC_#+SC,#/160		;GET PF CODE 36 OR 37
U 1536, 1546,4001,3000,0000,0060,2010,0567	; 6686		AR_EBUS REG			;READ MAP INFO
U 1546, 1551,0001,0000,6100,3001,0010,0200	; 6687		P_P OR SC,J/PF3			;INSERT PF CODE
						; 6688	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 144
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	KL-MODE PAGE REFILL LOGIC

						; 6689	;HERE WITH PAGE FAIL WORD IN AR
						; 6690	
U 1551, 1727,4001,0000,0000,0000,2204,0000	; 6691	PF3:	REL ECL EBUS,PF DISP		;EBOX HANDLING?
U 1727, 2040,0001,0007,0000,0000,1005,0161	; 6692	=0111	SV.PFW_AR,SR DISP,J/CLEAN	;NO, GO CLEAN UP
U 1737, 1553,3242,2047,0000,0000,1010,0161	; 6693		SV.PFW_AR,AR_BR,BR/AR		;YES, GET BR TOO
U 1553, 1554,3401,2007,0000,0000,1010,0153	; 6694		SV.BR_AR,AR_0S			;SAVE BR
U 1554, 1555,4001,0000,0000,2000,0022,0200	; 6695		AR0-8_FE			;NOW SAVE 10-BIT REGS
U 1555, 1562,3701,0200,2400,2000,0022,0200	; 6696		ARX_AR (AD),AR0-8_SC		;FE TO ARX, SC TO AR
						; 6697		ARR_ARL,ARL_ARX (ADX),		;FE IN ARL, SC IN ARR
U 1562, 1563,3731,4200,0000,3001,1710,0006	; 6698			ARX_VMA HELD		;GET VMA WHICH FAILED
						; 6699		SV.SC_AR,AR_ARX,		;HOLD SC & FE
U 1563, 1666,3241,4007,0000,2020,1032,0163	; 6700			GEN BR*2,SIGNS DISP	;TEST FOR PT DIR MATCH
						; 6701	=110
						; 6702	PGRF1:
						; 6703	.IFNOT/ITSPAGE
						; 6704		SV.VMA_AR,AR_AR SWAP,		;GET SEC # TO AR32-35
						; 6705			EA MOD DISP,J/PGRF2	; SEC < 20?
						; 6706	.IF/ITSPAGE
U 1666, 1605,0001,0007,0000,0000,1010,0152	; 6707		SV.VMA_AR,J/PGRF2		;AR, ARX HAVE VMA; BR HAS PFW
						; 6708	.ENDIF/ITSPAGE
						; 6709	
						; 6710	.IFNOT/PT DIR VAL BUG
						; 6711	;HERE TO WRITE PT DIR, & CLR 4 PAGE ENTRIES
						; 6712	
						; 6713		AR_0S,COND/MBOX CTL,MBOX CTL/2,	;READY TO CLEAR EVEN PAIR
						; 6714			FE_P AND #,#/2,SC/SCAD	;GET WRITE REF BIT TO FE & SC
						; 6715		COND/MBOX CTL,MBOX CTL/33,	;CLR EVEN, WR DIR, SEL ODD
						; 6716			TIME/3T,FE_FE+SC,SC/SCAD; WR REF = 4 NOW
						; 6717		COND/MBOX CTL,MBOX CTL/10,	;CLR ODD, RESET NORMAL SELECT
						; 6718			TIME/3T,FE_FE+SC,AR_BR	;GET PFW BACK, WR REF = 10
						; 6719		SC_# AND AR0-8,#/401		;GET USER & PAGED REF BITS
						; 6720		AR0-8_FE OR SC			;COMBINE WITH WR REF BIT
						; 6721		SV.PFW_AR,BR/AR,AR_ARX,J/PGRF1	;REJOIN MAIN PATH
						; 6722	.IF/PT DIR VAL BUG
						; 6723	;HERE IF NO PT DIR MATCH.  MUST WRITE ZEROS INTO THE PAGE TABLE
						; 6724	;LOCATIONS THAT COME UNDER THIS DIR ENTRY, AND WRITE THE DIR ENTRY.
						; 6725	;BECAUSE THE PT DIR VAL BITS COME IN PAIRS
						; 6726	;(ONE FOR EACH 2K), AND THERE IS A HARDWARE BUG THAT SOMETIMES CONFUSES
						; 6727	;THE TWO BITS IN A PAIR, WE ARRANGE FOR THE TWO BITS ALWAYS TO HAVE
						; 6728	;THE SAME VALUE BY CLEARING BOTH SETS OF PAGE TABLE ENTRIES.
						; 6729	
						; 6730						;FIRST CLR THE 4 P ADDRESSED
U 1667, 1564,4061,7607,0000,0020,1010,0152	; 6731		SV.VMA_AR,AR_1 LONG		;AR := 0, ARX := 1
						; 6732		COND/MBOX CTL,MBOX CTL/2,	;READY TO CLEAR EVEN PAIR
U 1564, 1566,3203,0600,0000,0000,2310,0002	; 6733			ARX_ARX*4		;ARX := 4
						; 6734		COND/MBOX CTL,MBOX CTL/33,TIME/3T, ;CLR EVEN, WR DIR, SEL ODD
U 1566, 1570,3243,0500,0000,0020,2310,0033	; 6735			ARX_ARX*8		;ARX := 40
						; 6736		COND/MBOX CTL,MBOX CTL/10,TIME/3T, ;CLR ODD, RESET NORMAL SELECT
U 1570, 1571,3243,0500,0000,0020,2310,0010	; 6737			ARX_ARX*8		;ARX := 400
						; 6738		COND/MBOX CTL,MBOX CTL/2,	;READY TO CLEAR EVEN PAIR
U 1571, 1572,3203,0500,0000,0000,2310,0002	; 6739			ARX_ARX*8		;ARX := 4000
U 1572, 1573,3110,0007,0000,0320,0010,0152	; 6740		GEN ARX*SV.VMA,AD/XOR,VMA/AD	;SET UP VMA TO OTHER GROUP OF 4 P
U 1573, 1574,3200,0007,0000,0020,5510,0161	; 6741		GEN SV.PFW,SKP AD0		;COMPENSATE FOR HARDWARE BUG
U 1574, 1576,0001,0000,0000,0000,0026,0100	; 6742	=0	EXEC REF,J/PTDC1
U 1575, 1576,0001,0000,0000,0000,0026,0200	; 6743		USER REF,J/PTDC1
U 1576, 1601,4001,0000,0000,0020,2310,0033	; 6744	PTDC1:	COND/MBOX CTL,MBOX CTL/33,TIME/3T  ;CLR EVEN, WR DIR, SEL ODD
						; 6745		COND/MBOX CTL,MBOX CTL/10,TIME/3T, ;CLR ODD, RESET NORMAL SELECT
U 1601, 1602,3242,2000,0301,0020,2310,0010	; 6746			AR_BR,FE_#,#/10		;AR GETS PFW, FE GETS WRITE REF BIT
						; 6747	.IFNOT/ITSPAGE				;CORRECT THE PAGE FAIL CODE
						; 6748		SC_# AND AR0-8,#/401		;SC GETS USER AND PAGED REF BITS
						; 6749		AR0-8_FE OR SC			;COMBINE WITH WR REF BIT
						; 6750		SV.PFW_AR,BR/AR			;STORE CORRECTED PFW
						; 6751		AR_SV.VMA			;NOW DO WHAT PGRF1 DOES
						; 6752		ARX_AR,AR_AR SWAP,		;GET SEC # TO AR32-35
						; 6753			EA MOD DISP,J/PGRF2	; SEC < 20?
						; 6754	.IF/ITSPAGE
U 1602, 1605,3200,2207,0000,0040,0010,0152	; 6755		AR_SV.VMA,ARX_SV.VMA,J/PGRF2	;AR, ARX HAVE VMA; BR HAS PFW
						; 6756	.ENDIF/ITSPAGE
						; 6757	
						; 6758	.ENDIF/PT DIR VAL BUG
						; 6759	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 145
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	KL-MODE PAGE REFILL LOGIC

						; 6760	
						; 6761	.IFNOT/ITSPAGE
						; 6762	
						; 6763	;HERE TO TRACE PAGE POINTERS FOR THIS ADDRESS
						; 6764	;VMA WHICH FAILED IS IN ARX AND IN AR WITH THE HALVES SWAPPED
						; 6765	;PAGE FAIL WORD IS IN BR
						; 6766	
						; 6767	=01
						; 6768	PGRF2:	VMA_#+AR32-35,#/440,		;YES.
						; 6769			SIGNS DISP,J/PGRF3	; USER REF?
						; 6770		VMA_#+AR32-35,#/460,		;NO
						; 6771			SIGNS DISP,J/PGRF3
						; 6772	=101
						; 6773	PGRF3:	LOAD AR,EPT REF,		;GET SEC PTR FROM EPT
						; 6774			ARX_AR,FE_-1,J/SECPTR	;PAGE NO TO ARX0-8
						; 6775		LOAD AR,UPT REF,ARX_AR,FE_-1	;SEC PTR FROM UPT
						; 6776	
						; 6777	;HERE TO FIND PAGE MAP WITH SECTION POINTER
						; 6778	
						; 6779	SECPTR:	AR_MEM,SC_#,#/9			;GET SECTION POINTER
						; 6780		FE_FE AND AR0-8,BR/AR,		;COMBINE ACCESS BITS
						; 6781			ARL_0.M,AR0-3 DISP	;SPT INDEX IN ARR, DISP ON TYPE
						; 6782	=1001	AR_SV.BR,J/PFT			;NO ACCESS TO SECTION
						; 6783	SECIMM:	AR_SHIFT,VMA_AR+CBR,J/PGRF5	;IMMEDIATE
						; 6784	LDIND:	VMA_AR+SBR,J/GTSPT		;SHARED SEC = INDRCT PAG
						; 6785		VMA_AR+SBR,AR_ARX		;INDRCT SEC.  LOOK IN SPT
						; 6786		BR/AR,AR_BR,LOAD AR,PHYS REF	;CALL FOR SPT ENTRY
						; 6787		ARX_SHIFT,AR_MEM		;WORD IN PT TO ARX0-8
						; 6788		AR_SHIFT,ARX_BR			;NEW SEC PTR ADDR TO AR
						; 6789		GEN # AND AR0-8,#/77,SKP SCAD NE,
						; 6790			VMA_AR
						; 6791	=0	LOAD AR,PHYS REF,J/SECPTR
						; 6792		AR_SV.BR,J/PFT			;TRAP, SEC MAP NOT IN CORE
						; 6793	
						; 6794	GTSPT:	LOAD AR,PHYS REF		;GET PAGE TABLE ADDR
						; 6795		AR_MEM,J/SECIMM
						; 6796	
						; 6797	;HERE WITH PAGE NO OF PAGE TABLE IN AR,
						; 6798	; VIRTUAL PAGE NO WITHIN SECTION IN ARX0-8
						; 6799	
						; 6800	PGRF5:	GEN # AND AR0-8,#/77,		;IS PAGE TABLE IN CORE?
						; 6801			SKP SCAD NE
						; 6802	=0	LOAD AR,PHYS REF,		;GET CST ENTRY FOR PAGE TABLE
						; 6803			BR/AR,J/PGRF6		;SAVE PAGE PTR ADDR IN BR
						; 6804		AR_SV.BR,J/PFT			;NOT IN CORE, PAGE FAIL TRAP
						; 6805	PGRF6:	AR_MEM,FE_FE AND #,#/164	;HERE IS CST FOR PAGE TABLE
						; 6806		AR_AR AND CSMSK,SKP P NE	;BEGIN CST UPDATE
						; 6807	=0	AR_SV.BR,J/PFT			;AGE TRAP, PT BEING SWAPPED
						; 6808		AR_AR OR PUR,STORE		;PUT CST WORD BACK
						; 6809		MEM_AR,VMA_BR
						; 6810		LOAD AR,PHYS REF		;GET PAGE MAP ENTRY
						; 6811		AR_MEM,FE_FE OR #,#/100		;PAGE POINTER
						; 6812	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 146
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	KL-MODE PAGE REFILL LOGIC

						; 6813	;HERE WITH PAGE MAP ENTRY IN AR
						; 6814	;FE HAS ACCUMULATED ACCESS BITS -- APWSC*4, S HAS BEEN CLEARED
						; 6815	;SC CONTAINS 9.
						; 6816	
						; 6817		FE_FE AND AR0-8,AR0-3 DISP,	;COMBINE PWSC, DISP ON TYPE
						; 6818			ARX_SV.VMA		;GET BACK SAVED VMA
						; 6819	=1001	AR_SV.BR,J/PFT			;0=NO ACCESS
						; 6820	LDIMM:	ARL_SHIFT,FE_FE SHRT,		;1=IMMEDIATE, LOAD PT
						; 6821			ARX_ARX*2 COMP,		; GET -WR REF TO ARX03
						; 6822			SC_1,J/LDPT		; READY TO TEST WR REF BIT
						; 6823		VMA_AR+SBR,J/LDSHR		;2=SHARED, GET SPT ENTRY
						; 6824		ARL_0.M,ARX_SHIFT,J/LDIND	;3=INDIRECT, LOOP
						; 6825	
						; 6826	;HERE TO GET SHARED PAGE POINTER OUT OF SPT
						; 6827	
						; 6828	LDSHR:	LOAD AR,PHYS REF
						; 6829		AR_MEM,FE_FE OR #,#/100,J/LDIMM	;TREAT SPT ENTRY AS IMMED
						; 6830	
						; 6831	;HERE WITH IMMEDIATE PAGE NO IN AR TO LOAD INTO PT
						; 6832	
						; 6833	LDPT:	GEN # AND AR0-8,#/77,SKP SCAD NE,	;PAGE IN CORE?
						; 6834			ARX_AR,AR_ARX*.25	;GET -WR REF TO AR05
						; 6835	=0	VMA_ARX+CBR,AR_ARX,		;PAGE IS IN CORE.  GET CST
						; 6836			SC_P AND SC,J/GTCST	;-WR REF TO SC
						; 6837		AR_SV.BR,J/PFT			;PAGE NOT IN CORE
						; 6838	
						; 6839	;NOW GET CST ENTRY FOR THIS PAGE
						; 6840	
						; 6841	GTCST:	LOAD AR,PHYS REF,ARX_AR SWAP,
						; 6842			SC_-SC,AR_1		;SC=0 IF WR REF, ELSE -1
						; 6843		GEN FE AND #,#/10,SKP SCAD NE,	;SKIP IF WRITABLE
						; 6844			BR/AR,MB WAIT		;GET CST ENTRY & BIT FOR TESTING
						; 6845	=0	GEN P AND SC,SKP SCAD NE,	;FAIL IF WRITING OR AGE=0
						; 6846			AR_AR AND CSMSK,J/NOTWR	;STRIP OLD AGE FROM CST
						; 6847		TEST AR.BR,SKP CRY0,		;WRITABLE--SKIP IF CST WRITTEN
						; 6848			GEN #-SC,#/-1,BYTE DISP	; OR THIS IS WRITE REF
						; 6849	=110	FE_FE-#,#/4,J/STCST		;TEMPORARILY UNWRITABLE, SET S
						; 6850		AR_AR*BR,AD/OR,			;SET CST WRITTEN BIT
						; 6851			FE_FE OR #,#/4		;SET SOFT BIT = WRITABLE
						; 6852	STCST:	AR_AR AND CSMSK,SKP P NE	;CLEAR OLD AGE, TEST IT
						; 6853	=0
						; 6854	NOTWR:	AR_SV.BR,J/PFT			;WRITE OR AGE TRAP
						; 6855		AR_AR OR PUR,STORE		;SET USE BITS, STORE BACK CST
						; 6856		MB WAIT,VMA_SV.VMA,		;RELOAD VMA FOR ORIGINAL REF
						; 6857			AR_SV.VMA,SC_1		;READY TO TEST VMA USER
						; 6858		GEN P AND SC,SKP SCAD NE,	;TEST VMA USER
						; 6859			ARL_ARXL.M,ARR_0.M,	;PHYS PAGE# TO ARL, APWSC0 TO SC
						; 6860			SC_FE,ARX_AR (AD)	; MAP BIT TO ARX
						; 6861	=0	P_P OR SC#,EXEC REF,J/WRHPT	;BUILD PT ENTRY, CLEAR VMA USER
						; 6862		P_P OR SC#,USER REF		; OR SET USER, AS NECESSARY
						; 6863	WRHPT:	WR PT ENTRY,FE_#,#/10,AR_ARX*4	;UPDATE HARDWARE TABLE
						; 6864	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 147
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	KL-MODE PAGE REFILL LOGIC

						; 6865	
						; 6866	.IF/ITSPAGE
						; 6867	
						; 6868	;HERE TO START HACKING PAGE MAP
						; 6869	;AR, ARX HAVE VMA.  BR HAS PFW.
						; 6870	;AR, ARX, BR, FE, SC, SV.VMA, SV.PFW HAVE BEEN STORED.
						; 6871	
U 1605, 1715,0001,0000,0000,0020,0632,0020	; 6872	PGRF2:	ARL_0S,SIGNS DISP		;SKIP ON PFW BIT 0 (USER MODE)
						; 6873	=101	AR_ARX (ADX),ARX_AR (AD),	;<AR|ARX> WILL HAVE <VMA|0,,VMA> FOR SHIFT
						; 6874			SC_#,#/25.,		;SC GETS SHIFT AMOUNT FOR PG TBL INDEX
U 1715, 1747,3701,6200,0302,3040,0007,0031	; 6875			AR18-21 DISP,J/PGEXRF	;DISPATCH ON VMA 2.9 FOR DBR SELECT
						; 6876		AR_ARX (ADX),ARX_AR (AD),	;<AR|ARX> WILL HAVE <VMA|0,,VMA> FOR SHIFT
						; 6877			SC_#,#/25.,		;SC GETS SHIFT AMOUNT FOR PG TBL INDEX
U 1717, 2007,3701,6200,0302,3040,0007,0031	; 6878			AR18-21 DISP,J/PGUSRF	;DISPATCH ON VMA 2.9 FOR DBR SELECT
						; 6879	=0111
U 1747, 1620,3200,4207,2421,0020,0010,0144	; 6880	PGEXRF:	FE_AR0-8,AR_SHIFT,ARX_DBR4,J/RDDBR	;ARR GETS INDEX INTO ITS PAGE TABLE.
U 1757, 1606,3200,4207,2421,0020,0010,0143	; 6881		FE_AR0-8,AR_SHIFT,ARX_DBR3,J/RDDBR0	; AR0 TELLS WHICH HALFWORD.
						; 6882	=0111						; FE 1.5 GETS WRITE REF BIT.
U 2007, 1620,3200,4207,2421,0020,0010,0141	; 6883	PGUSRF:	FE_AR0-8,AR_SHIFT,ARX_DBR1,J/RDDBR	; ARX GETS ONE OF FOUR DBR'S
U 2017, 1606,3240,4207,2421,0020,0010,0142	; 6884		FE_AR0-8,AR_SHIFT,ARX_DBR2,J/RDDBR0	; DEPENDING ON EXEC/USER AND VMA 2.9.
						; 6885	
						; 6886	;HERE TO PICK UP ITS PAGE TABLE ENTRY
						; 6887	
U 1606, 1620,5110,0207,0000,0020,0010,0150	; 6888	RDDBR0:	ARX_ARX-CN100			;COMPENSATORY CROCK
U 1620, 1621,3242,2040,2422,0000,0010,0000	; 6889	RDDBR:	SC_AR0-8,AR_BR,BR/AR		;SC _ 1/2 WD BIT, BR _ PTW INDEX
U 1621, 1622,0612,0004,7302,0320,0010,0400	; 6890		VMA_ARX+BR,SC_SC AND #,#/400	;SET UP VMA BEFORE PHYS REF
						; 6891						;(BUG IN MCL BOARD: MCL USER EN)
						; 6892		LOAD AR VIA RPW,BR/AR,PHYS REF,	;BR NOW HAS PFW AGAIN.
U 1622, 1630,4001,0040,2400,0037,5226,0101	; 6893			GEN SC,SKP SCAD NE	;FETCH PTW, SKIP ON HALF.
						; 6894	=0
U 1630, 1623,3200,0003,0302,0022,0510,0000	; 6895		AR_MEM,CLR ARX,SC_#,#/0,J/RDBRLH	;SC GETS 0 FOR LEFT HALF,
U 1631, 1624,3240,0003,0302,0022,0510,0022	; 6896		AR_MEM,CLR ARX,SC_#,#/18.,J/RDBRRH	; 18. FOR RIGHT HALF
						; 6897	RDBRLH:	AR_AR*LH.AGE,AD/ANDCB,		;AND OUT APPROPRIATE AGE BITS,
U 1623, 1626,3500,2007,0000,0036,0010,0145	; 6898			STORE,J/PACCDS		; AND STORE BACK
						; 6899	RDBRRH:	AR_AR*RH.AGE,AD/ANDCB,
U 1624, 1626,3500,2007,0000,0036,0010,0146	; 6900			STORE,J/PACCDS
						; 6901	
						; 6902	;HERE TO DETERMINE ACCESS ALLOWED BY ITS PAGE TABLE ENTRY
						; 6903	
						; 6904	PACCDS:	MEM_AR,ARL_SHIFT.C,ARR_0.C,	;GET PAGE TABLE HALFWORD IN ARL,
U 1626, 2023,0001,0003,4402,0042,0607,0014	; 6905			SC_1,SH DISP		; CLEAR ARR, DISPATCH ON ACCESS
						; 6906	=0011
U 2023, 1633,3242,2000,0302,0000,0010,0033	; 6907		SC_PF.PNA,AR_BR,J/PFT69		;00	NO ACCESS
U 2027, 1632,0001,4000,0302,0000,0010,0040	; 6908		SC_#,#/PPRO,AR_SHIFT,J/PFWLOS	;01	READ ONLY	;AR GETS SHIFTED
U 2033, 1632,0001,4000,0302,0000,0010,0040	; 6909		SC_#,#/PPRWF,AR_SHIFT,J/PFWLOS	;10	R/W FIRST	; FOR KL-10 SIZE
U 2037, 1652,4001,4000,0302,0000,0010,0050	; 6910		SC_#,#/PPRW,AR_SHIFT,J/PGSTO	;11	READ/WRITE	; PAGES (.5K)
						; 6911	
U 1632, 1652,4001,0000,7030,0020,5210,0020	; 6912	PFWLOS:	GEN FE AND #,#/20,SKP SCAD NE	;LOSE IF WRITE ATTEMPT
						; 6913	=0
						; 6914	PGSTO:	SCADA/#,SCADB/AR0-8,SCAD/AND,	;CLEAR OUT ACCESS AND AGE BITS
						; 6915			AR0-8_SCAD#,#/37,
U 1652, 1636,4001,0000,7320,2000,0110,0037	; 6916			J/PGSTO1
U 1653, 1633,3242,2000,0302,0000,0010,0024	; 6917		SC_PF.ILW,AR_BR			;WRITE INTO READ ONLY OR R/W/F LOSES
U 1633, 1634,3200,0207,2400,3020,0110,0153	; 6918	PFT69:	P_SC#,ARX_SV.BR			;SET PAGE FAIL CODE
U 1634, 1722,4001,4007,0000,2000,1010,0161	; 6919		SV.PFW_AR,AR_ARX,J/PFT		;GO TAKE PAGE FAULT
						; 6920	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 148
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	KL-MODE PAGE REFILL LOGIC

						; 6921	
						; 6922	;HERE TO WRITE TWO KI-10 PAGE MAP ENTRIES
						; 6923	
						; 6924	PGSTO1:	SCADA/AR0-5,SCADB/SC,SCAD/OR,	;OR IN APPROPRIATE KI-10
U 1636, 1642,3240,0207,6100,3020,0110,0152	; 6925			P_SCAD#,ARX_SV.VMA	; STYLE ACCESS BITS
U 1642, 1646,3510,0007,0000,0320,0010,0147	; 6926		GEN ARX*CN1000,AD/ANDCB,VMA/AD	;VMA ADDRESS FOR LOW HALF PAGE
U 1646, 1660,3200,0007,0000,0020,5510,0161	; 6927		GEN SV.PFW,SKP AD0		;SKIP IF USER REFERENCE
U 1660, 1651,0001,0000,0000,0000,0026,0100	; 6928	=0	EXEC REF,J/PGSTO2		;FIX IT UP (BUG IN MCL BOARD
U 1661, 1651,0001,0000,0000,0000,0026,0200	; 6929		USER REF,J/PGSTO2		; HAVING TO DO WITH PXCT)
						; 6930	PGSTO2:	WR PT ENTRY,ADA/AR,AD/A+XCRY,	;WRITE IT, THEN BUMP ARL
U 1651, 1656,0003,2000,0000,0040,2317,0010	; 6931			GEN CRY18,AR/AD		; FOR HIGH .5K ENTRY
U 1656, 1662,3310,0007,0000,0320,0010,0147	; 6932		GEN ARX*CN1000,AD/OR,VMA/AD	;VMA ADDRESS FOR HIGH HALF PAGE
U 1662, 1664,3240,0007,0000,0020,5510,0161	; 6933		GEN SV.PFW,SKP AD0		;SKIP IF USER REFERENCE
U 1664, 1663,4001,0000,0000,0000,0026,0100	; 6934	=0	EXEC REF,J/PGSTO3		;FIX IT UP (BUG IN MCL BOARD
U 1665, 1663,4001,0000,0000,0000,0026,0200	; 6935		USER REF,J/PGSTO3		; HAVING TO DO WITH PXCT)
U 1663, 1670,3243,6000,0301,0020,2310,0010	; 6936	PGSTO3:	WR PT ENTRY,AR_ARX*4,FE_#,#/10	;WRITE 2ND PTW.  SET UP FE AND S
						; 6937	.ENDIF/ITSPAGE
						; 6938	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 149
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	KL-MODE PAGE REFILL LOGIC

						; 6939	;HERE WHEN MAP INFO WRITTEN INTO HARDWARE PAGE TABLE
						; 6940	; WE NOW NEED ONLY RESTORE THE REGISTERS WE HAVE USED, AND RESTART THE
						; 6941	; MEMORY REFERENCE WHICH FAILED, RETURNING TO THE MICROINSTRUCTION
						; 6942	; WHICH WAITS FOR ITS COMPLETION.  (EXCEPT FOR MAP)
						; 6943	; THIS SCREWING AROUND WITH FE_EXP,FE_-SC-1 ETC. LOOKS USELESS,
						; 6944	; BUT IT IS NECESSARY BECAUSE THESE KLUDGIFEROUS REGISTERS HAVE 11
						; 6945	; BITS, EVEN THOUGH YOU CAN ONLY READ 9 OF THEM.  THE HARDWARE FORCES
						; 6946	; THE TWO HIGHEST BITS TO BE IDENTICAL, BUT WE WANT TO FORCE THE THREE
						; 6947	; HIGHEST BITS TO BE IDENTICAL.  AS FAR AS I KNOW, THE ONLY WAY TO
						; 6948	; READ THOSE TWO EXTRA BITS IS VIA SKIP/SCAD0 OR SKIP/SC0.
						; 6949	
						; 6950	.IF/MAP
						; 6951		GEN FE AND S,SKP SCAD NE,	;TEST FOR MAP INSTR
						; 6952			AR_SV.SC
						; 6953	=0
						; 6954	.IFNOT/MAP
U 1670, 1671,3200,2007,0000,0020,0010,0163	; 6955		AR_SV.SC
						; 6956	.ENDIF/MAP
						; 6957		SC_EXP,FE_EXP,SKP AR0,		;RESTORE FE
U 1671, 1672,3240,4207,0203,3020,4510,0153	; 6958			AR_AR SWAP,ARX_SV.BR,J/PGRST1
						; 6959	.IF/MAP
						; 6960		AR_SV.VMA,ARX_SV.VMA,J/COMPEA	;*MAP* RESTART FROM AREAD
						; 6961	.ENDIF/MAP
						; 6962	=0
						; 6963	PGRST1:	SC_EXP,SKP AR0,			;RESTORE SC
U 1672, 1720,3240,4207,0202,2020,4510,0156	; 6964			AR_ARX,ARX_SV.AR,J/PGRST2
U 1673, 1672,4001,0000,1401,0000,0010,0000	; 6965		FE_-SC-1,J/PGRST1		;MAKE FE NEG
						; 6966	=0
U 1720, 1674,3200,4247,0000,2020,0010,0157	; 6967	PGRST2:	BR/AR,AR_ARX,ARX_SV.ARX,J/PGRST3	;RESTORE BR AND AR AND ARX
U 1721, 1674,3240,4247,1402,2020,0010,0157	; 6968		BR/AR,AR_ARX,ARX_SV.ARX,SC_-SC-1	;MAKE SC NEG
						; 6969	
U 1674, 1716,3240,0007,0000,0134,0010,0152	; 6970	PGRST3:	REQ SV.VMA			;RESTART REQUEST THAT FAILED
U 1716, 0000,4001,0000,0000,0000,2103,0105	; 6971		SET ACCOUNT EN,RETURN0		;RESTART MICROINSTRUCTION THAT FAILED
						; 6972	
						; 6973	
						; 6974	;HERE ON A TRAP CONDITION DETECTED BY REFILL LOGIC
						; 6975	;AR CONTAINS SAVED BR
						; 6976	
						; 6977	;IF WE PAGE FAULTED ON THE FETCH OF THE INSTRUCTION IMMEDIATELY
						; 6978	;AFTER A PI CYCLE, CON INT DISABLE IS STILL ON BECAUSE THE NICOND
						; 6979	;THAT OUGHT TO HAVE CLEARED IT DIDN'T GET CLOCKED.  SO CLEAR IT
						; 6980	;NOW.  IF PFAIL.PIHACK, COULD HANG AT WGRANT BECAUSE PI BOARD
						; 6981	;THINKS INTERRUPTS ARE ENABLED BUT CON BOARD DOESN'T.  IF NO
						; 6982	;PFAIL.PIHACK, ONLY LOSS IS THAT INTERRUPT WON'T PREEMPT PG FLT.
						; 6983	
U 1722, 1723,4001,0000,0000,0000,1510,0000	; 6984	PFT:	CLR INTRPT INH			;CLEAR CON INT DISABLE
						; 6985		BR/AR,VMA_SV.VMA,		;RESTORE BR & VMA
U 1723, 2040,3240,0047,0000,0320,0005,0152	; 6986			SR DISP,J/CLEAN		;TAKE TRAP
						; 6987	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 150
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	KL-MODE PAGE REFILL LOGIC

						; 6988	.IFNOT/KLPAGE
						; 6989	.TOC	"KI-MODE PAGE FAIL HANDLING"
						; 6990	
						; 6991	2377:	CLR ACCOUNT EN,FORCE AR-ARX,J/PFSAVE
						; 6992	1777:	CLR ACCOUNT EN,FORCE AR-ARX	;DON'T CHARGE PAGE FAIL TO USER
						; 6993	PFSAVE:	SV.AR_AR,AR_ARX			;PRESERVE AR, ARX
						; 6994		SV.ARX_AR,SR DISP,J/CLEAN	;NOW CHECK FOR CLEANUP REQUIRED
						; 6995	
						; 6996	.ENDIF/KLPAGE
						; 6997	;HERE ON PAGE FAIL OR INTERRUPT WHICH REQUIRES CLEANUP IN ORDER
						; 6998	; TO BE CORRECTLY RESTARTABLE AFTER SERVICE...
						; 6999	
						; 7000	=1*0000
U 2040, 1724,0001,0000,0301,0000,7010,0037	; 7001	CLEAN:	FE_#,#/37,SKP INTRPT,J/PGF1	;HERE FOR INTRPT OR PGF?
						; 7002	
						; 7003	.IF/EIS
						; 7004	;(1) HERE ON EDIT SOURCE FAIL
						; 7005	=0001	AR_SRCP,SR_0,J/BACKS		;BACK UP SRC POINTER
						; 7006	.IF/DECIMAL
						; 7007	;(2) HERE ON ANY FAILURE IN DECIMAL TO BINARY
						; 7008	=0010	AR_BR LONG,SR_1,J/D2BPF		;GET ACCUMULATED BINARY
						; 7009	
						; 7010	;(3) HERE ON DST FAIL IN BINARY TO DECIMAL FILL
						; 7011	=0011	AR_DLEN COMP,SR_#,#/4,J/B2DFPF
						; 7012	.ENDIF/DECIMAL
						; 7013	;(4) HERE ON EDIT DST FAIL WITH NO SRC POINTER UPDATE
						; 7014	=0100	AR_DSTP,SR_0,J/BACKD		;BACK UP DST POINTER ONLY
						; 7015	
						; 7016	;(5) HERE ON EDIT DST FAIL AFTER UPDATING SRC POINTER
						; 7017	=0101	AR_DSTP,SR_1,J/BACKD		;BACK UP DST, THEN SRC
						; 7018	.IF/DECIMAL
						; 7019	;(6) HERE ON DESTINATION FAILURE IN BINARY TO DECIMAL
						; 7020	=0110	AR_DSTP,SR_BDT,J/BACKD		;BACK UP DST, THEN SAVE FRACTION
						; 7021	.ENDIF/DECIMAL
						; 7022	.ENDIF/EIS
						; 7023	;(7) HERE ON BLT FAILURE
						; 7024	=0111
						; 7025	.IF/KLPAGE
U 2047, 1751,3240,0207,0000,0020,0010,0157	; 7026		ARX_SV.ARX,J/BLTPF		;GET DEST ADDR AGAIN
						; 7027	.IFNOT/KLPAGE
						; 7028	BLTPF:	AR_ARX+BR,SR_0,J/BLTPF1		;CURRENT SRC ADDR
						; 7029	.ENDIF/KLPAGE
						; 7030	.IF/EIS
						; 7031	.IF/DECIMAL
						; 7032	;(10) HERE ON TRANSLATION FAILURE IN BINARY TO DECIMAL
						; 7033	=1000	AR_BR LONG,SR_0,J/B2DPF		;GET BINARY FRACTION
						; 7034	.ENDIF/DECIMAL
						; 7035	
						; 7036	;(11) HERE ON SRC FAILURE IN COMPARE OR MOVE STRING
						; 7037	=1001	AR_DLEN,SR_1,J/STRPF		;PUT LENGTHS BACK, THEN BACK SRC
						; 7038	
						; 7039	;(12) HERE ON DST FAILURE IN COMPARE OR MOVE STRING
						; 7040	=1010	AR_DLEN,SR_#,#/4,J/STRPF
						; 7041	
						; 7042	;(13) HERE ON DST FAILURE AFTER UPDATING SRC IN COMPARE OR MOVE
						; 7043	=1011	AR_DSTP,SR_SRC,J/BACKD		;BACK DST, THEN HANDLE AS SRC FAIL
						; 7044	
						; 7045	;(14) HERE ON DST FILL FAILURE IN MOVRJ
						; 7046	=1100	AR_DLEN,SR_#,#/4,J/STRPF4
						; 7047	.ENDIF/EIS
						; 7048	.IF/KLPAGE
						; 7049	.IF/MAP
						; 7050	;(15) HERE ON PAGE FAILURE IN MAP INSTRUCTION.  RETURN PAGE FAIL WORD
						; 7051	=1101	AR_SV.PFW,J/IFSTAC		;RETURN PFW IN AC
						; 7052	.ENDIF/MAP
						; 7053	.ENDIF/KLPAGE
						; 7054	
						; 7055	;(16) LISP??
						; 7056	
						; 7057	;(17) HERE ON PAGE FAIL ON FETCH OF INSTRUCTION AFTER A JRSTF.
						; 7058	;     DOING AN ABORT INSTR WOULD SCREW UP THE FLAGS, BECAUSE
						; 7059	;     THE NICOND THAT ADVANCES THE FLAGS (CYC_REQ, REQ_0)
						; 7060	;     WAS NOT CLOCKED.  SO WE FAKE ONE UP NOW.
U 2057, 2077,0001,0000,0000,0100,0006,0000	; 7061	=1111	VMA/PC,DISP/NICOND,#/0,J/JRSTFC
						; 7062	=		;END OF 'CLEAN' DISPATCH TABLE
						; 7063	
						; 7064	;SECOND INST FOR JRSTF CLEANUP
						; 7065	=1111
U 2077, 2040,0001,0000,0000,0000,1615,0000	; 7066	JRSTFC:	PC_VMA,SR_0,J/CLEAN		;DISP/NICOND CLOBBERED PC
						; 7067	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 151
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	KL-MODE PAGE REFILL LOGIC

						; 7068	;HERE ON ANY PAGE FAILURE OR PI REQUEST IN LONG INSTRUCTIONS
						; 7069	; SKIP IF PI REQUEST, WHICH TAKES PRIORITY
						; 7070	
						; 7071	.IF/KLPAGE
						; 7072	=0
U 1724, 1726,0001,0000,0000,0102,3010,0500	; 7073	PGF1:	MB WAIT,VMA_#,#/500,J/PGF2
U 1725, 0151,0001,0000,0000,0000,2110,0105	; 7074		SET ACCOUNT EN,J/TAKINT		;CLEANUP DONE, SERVE INTRPT
U 1726, 1730,3200,2007,0000,0020,6510,0161	; 7075	PGF2:	AR_SV.PFW,SKP PI CYCLE,J/PGF4	;GET BACK PAGE FAIL WORD
						; 7076	.IFNOT/KLPAGE
						; 7077	=0
						; 7078	PGF1:	GET ECL EBUS,CLR SC,
						; 7079			PF DISP,J/PGF2
						; 7080		SET ACCOUNT EN,J/TAKINT		;HERE TO SERVE INTRPT, DO IT
						; 7081	=1100
						; 7082	PGF2:
						; 7083	=01	AR_SV.AR,FE_FE-1,		;AR PARITY ERROR
						; 7084			SKP RPW,J/PGF6		;DO WE NEED TO RESTART RPW?
						; 7085	=10	VMA_VMA HELD,MAP,SC_FE		;ARX PARITY ERROR, PF CODE 37
						; 7086	PGF3:	MB WAIT,VMA_#,#/500
						; 7087		AR_EBUS REG			;READ PAGE FAIL WORD
						; 7088		REL ECL EBUS
						; 7089		P_P OR SC,SKP PI CYCLE		;STUFF ERROR CODE IF PARITY
						; 7090	.ENDIF/KLPAGE
						; 7091	=00
						; 7092	PGF4:	ARX_AR,AR_VMA HELD,SC_#,#/13.,	;READY TO COMBINE PF WORD
U 1730, 0264,3731,2400,0302,1000,1721,0015	; 7093			CALL,J/ROTS		; WITH ADDRESS
U 1731, 1746,0001,0007,0000,0000,1010,0162	; 7094		SV.IOPF_AR,J/IOPGF		;SAVE IO PG FAIL WORD
						; 7095	=11
						; 7096	.IFNOT/PFAIL.PIHACK
						; 7097	.IFNOT/LPM.SPM
						; 7098		AR_SHIFT,STORE,UPT REF		;PUT PAGE FAIL WORD AT 500
						; 7099	.IF/LPM.SPM
						; 7100		AR_SHIFT,STORE,EPT REF		;STORE PFW AT 500
						; 7101		UPFW_AR				;ALSO IN LPM/SPM VARIABLES
						; 7102	.ENDIF/LPM.SPM
						; 7103	.IF/PFAIL.PIHACK
						; 7104		MQ_SHIFT,AR_1,GEN CRY18,	;SAVE PAGE FAIL WORD IN MQ
U 1733, 1740,4061,2210,0302,0020,0017,0010	; 7105			ARX/AD,SC_#,#/8		; AND GENERATE MAGIC BITS
U 1740, 1254,4001,4000,0000,0000,2221,0200	; 7106	=00	AR_SHIFT,REQ EBUS,CALL,J/WGRANT	;GOBBLE DOWN EBUS
U 1743, 1732,3701,0000,0000,0060,2010,0415	; 7107	=11	CONO PI				;TURN OFF PI SYSTEM
U 1732, 1734,4001,0000,0000,0000,2210,0100	; 7108		REL EBUS			;RELEASE EBUS
						; 7109	.IFNOT/LPM.SPM
						; 7110		AR_MQ,STORE,UPT REF
						; 7111	.IF/LPM.SPM
U 1734, 1735,3721,2000,0000,0016,0026,0111	; 7112		AR_MQ,STORE,EPT REF		;STORE PFW AT 500
U 1735, 1736,4001,0007,0000,0000,1010,0140	; 7113		UPFW_AR				;AND IN LPM/SPM VARIABLES
						; 7114	.ENDIF/LPM.SPM
						; 7115	.ENDIF/PFAIL.PIHACK
U 1736, 1741,4001,0000,0000,0000,1510,0004	; 7116		ABORT INSTR			;RECOVER TRAP FLAGS, IF ANY
						; 7117		FIN STORE,AR_PC,
U 1741, 1742,3731,2003,0000,0016,3610,0000	; 7118			VMA_VMA+1,STORE		;STORE OLD PC AT 501
						; 7119	.IFNOT/KLPAGE
						; 7120		REL ECL EBUS
						; 7121	.ENDIF/KLPAGE
						; 7122	.IFNOT/LPM.SPM
						; 7123		FIN STORE,VMA_VMA+1,LOAD AR	;GET NEW PC FROM 502
						; 7124	.IF/LPM.SPM
U 1742, 1744,0001,0003,0000,0002,3610,0000	; 7125		MEM_AR,VMA_VMA+1		;DON'T CHANGE TO FIN STORE!
U 1744, 1745,4001,0000,0000,0012,0026,0111	; 7126		LOAD AR,EPT REF
						; 7127	.ENDIF/LPM.SPM
U 1745, 0226,0001,0000,0000,0000,2110,0105	; 7128		SET ACCOUNT EN,J/NEWPC
						; 7129	
						; 7130	;HERE ON PAGE FAIL DURING PI CYCLE
						; 7131	
U 1746, 1750,4001,0000,0000,0000,2310,0100	; 7132	IOPGF:	SET IO PF			;TROUBLE...
U 1750, 1543,0001,0000,0000,0000,2110,0105	; 7133		SET ACCOUNT EN,J/PIDONE
						; 7134	
						; 7135	.IFNOT/KLPAGE
						; 7136	;HERE ON PARITY ERROR IN AR.  SKIP IF READ-PAUSE-WRITE IN PROGRESS
						; 7137	=0
						; 7138	PGF6:	VMA_VMA HELD,MAP,		;AR PARITY ERROR
						; 7139			SC_FE,J/PGF3		;PF CODE 36
						; 7140		STORE,J/PGF6			;COMPLETE CYCLE, WITH GOOD PAR
						; 7141	.ENDIF/KLPAGE
						; 7142	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 152
; DSK: UCODE; IO 51	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7143	.TOC	"PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS"
						; 7144	
						; 7145	;HERE ON BLT PAGE FAIL
						; 7146	
						; 7147	.IF/KLPAGE
U 1751, 1752,0612,2000,0000,0020,1610,0000	; 7148	BLTPF:	AR_ARX+BR,SR_0			;CURRENT SRC ADDR
						; 7149	.ENDIF/KLPAGE
U 1752, 1753,3713,2000,0000,3000,0610,0004	; 7150	BLTPF1:	AR_ARX (AD),ARL_ARR
U 1753, 2040,4001,0000,0000,0000,1005,0000	; 7151	PGFAC0:	AC0_AR,SR DISP,J/CLEAN		;BEGIN NORMAL PF WORK
						; 7152	
						; 7153	.IF/EIS
						; 7154	;HERE ON VARIOUS CASES OF STRING/EDIT FAILURE
						; 7155	
						; 7156	BACKS:	P_P+S
						; 7157		SRCP_AR,SR DISP,J/CLEAN		;RE-DISPATCH FOR MORE
						; 7158	
						; 7159	BACKD:	P_P+S
						; 7160		DSTP_AR,SR DISP,J/CLEAN
						; 7161	
						; 7162	.IF/DECIMAL
						; 7163	D2BPF:	AC3_AR,AR_0S,SC_#,#/35.		;PUT AWAY HIGH BINARY
						; 7164		AR_SHIFT,ARX_-SLEN		;LOW TO AR, REMAINING LEN TO ARX
						; 7165		AC4_AR,AR_ARX,J/STRPF2		;PUT LOW AWAY
						; 7166	
						; 7167	B2DFPF:	AR_AR*T0,AD/OR,J/B2DPF2
						; 7168	
						; 7169	B2DPF:	AC0_AR,AR_ARX			;HIGH FRACTION TO AC
						; 7170		AC1_AR				;LOW TO AC1
						; 7171		AR_AC3				;GET FLAGS
						; 7172	B2DPF2:	AR_AR*SLEN,AD/A-B,J/STRPF3	;REBUILD FLAGS+LEN
						; 7173	.ENDIF/DECIMAL
						; 7174	
						; 7175	STRPF:	BR/AR,AR_-SLEN,SKP AR0		;WHICH IS LONGER?
						; 7176	=0
						; 7177	STRPF1:	AC3_AR,AR_AR+BR,J/STRPF2	;SRC LONGER
						; 7178		ARX_AR,AR_AR*SFLGS,AD/OR	;DST.  BUILD SRC LEN+FLAGS
						; 7179		AC0_AR,AR_ARX-BR		;THAT'S AWAY, MAKE DST LEN
						; 7180	STRPF3:	AC3_AR,SR DISP,J/CLEAN		;OK, NOW BACK UP SRC IF REQ'D
						; 7181	
						; 7182	STRPF2:	AR_AR*SFLGS,AD/OR,J/PGFAC0
						; 7183	
						; 7184	STRPF4:	BR/AR,AR_SLEN COMP,SKP AR0,J/STRPF1
						; 7185	.ENDIF/EIS
						; 7186	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 153
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7187	.IF/EIS
						; 7188	
						; 7189	.TOC	"EXTENDED INSTRUCTION SET DECODING"
						; 7190	
						; 7191	;GET HERE WITH E0 IN BR, (E0) IN AR
						; 7192	;	(E0) IS THE OPERATION WORD, AND HAS THE NORMAL -10 INSTRUCTION
						; 7193	;	FORMAT -- BITS 0-8 ARE OPCODE, 9-12 IGNORED, 13 @, 14-17 XR,
						; 7194	;	AND 18-35 Y.  THE AC USED COMES FROM THE EXTEND INSTRUCTION.
						; 7195	; COMPUTE E1 FROM 13-35
						; 7196	
						; 7197	;EXTEND:FE_#+AR0-8,#/-20,SKP SCAD0,	;CHECK LEGAL OPERATION
						; 7198	;		ARX_AR,AR_BRX		;OPR TO ARX, GET AC FROM BRX
						; 7199	=0
						; 7200	EXT1:	AR_BR,J/UUO			;OPCODE > 17
						; 7201		AR0-8_FE+#,#/20			;PLUG OPR INTO EXTEND AC
						; 7202		GEN AR,LOAD IR,AR_ARX,ARL_0.M,
						; 7203			EA MOD DISP
						; 7204	=00
						; 7205	EXT2:	E1_AR,AR_BR,J/EXT5		;SAVE E1, READY TO SAVE E0
						; 7206		ARL_0.M,AR_ARX+XR,J/EXT2
						; 7207		GEN ARX,A INDRCT,SKP INTRPT,J/EXT3
						; 7208		GEN ARX+XR,A INDRCT,
						; 7209			SKP INTRPT,J/EXT3
						; 7210	=0
						; 7211	EXT3:	AR_MEM,ARX_MEM,J/EXT4
						; 7212		AR_MEM,TAKE INTRPT
						; 7213	EXT4:	ARL_0.M,EA MOD DISP,J/EXT2
						; 7214	
						; 7215	EXT5:	E0_AR,VMA_AR+1,IR DISP,J/2000	;ENTER EXTENDED INSTR HANDLER
						; 7216	
						; 7217	;THE EXTENDED INSTRUCTION SET IS "HIDDEN" UNDER THE LUUO'S BY THIS
						; 7218	; USE OF "IR DISP,J/2000" TO DISPATCH TO THEM.  THE LUUO'S WHICH
						; 7219	; HAVE THE SAME OPCODES AS EXTENDED OPERATIONS ARE ASSIGNED UNIQUE
						; 7220	; CRAM LOCATIONS IN THE RANGE 1000 TO 1017.  WHEN WE SPECIFY J/2000,
						; 7221	; THE CRAM ADDRESS BECOMES 3000 TO 3017, WHICH ACCESSES CRAM LOCATIONS
						; 7222	; 2000 TO 2017 BECAUSE ADDRESS BITS 01 AND 02 ARE IGNORED WHEN BIT 00
						; 7223	; IS TRUE (CRA, CRM).
						; 7224	
						; 7225	2005:	AR_AC3,J/CMPS			;HIDDEN BEHIND L-CMS
						; 7226	2006:	CLR AR,ARX_1S,SC_#,#/15.,J/EDIT	;HIDDEN BEHIND L-EDIT
						; 7227	.IF/DECIMAL
						; 7228	2010:	AR_AC0 COMP,J/DBIN		;HIDDEN BEHIND L-DBIN
						; 7229	2011:	AR_AC1,ARL/AD,SC_1,ARX+MQ_0.M,
						; 7230			BYTE DISP,J/BDEC	;HIDDEN BEHIND L-BDEC
						; 7231	.ENDIF/DECIMAL
						; 7232	2012:	AR_AC3,LOAD AR,J/MVST		;HIDDEN BEHIND L-MVS
						; 7233	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 154
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7234	.TOC	"EIS -- STRING MOVE"
						; 7235	; HERE WITH AC3 (DEST LEN) IN AR
						; 7236	;SLEN IS THE COMPLEMENT OF THE SHORTER STRING LENGTH
						; 7237	;DLEN IS <SRC LEN>-<DST LEN>
						; 7238	
						; 7239	MVST:	BR/AR,AR_MEM,			;HOLD AC3, WAIT FOR FILLER
						; 7240			FE_AR0-8,SKP SCAD NE	;CHECK FOR FLAGS IN DEST LEN
						; 7241	=0	ARX_AC0,J/MVST1			;GET SRC LEN, FLAGS
						; 7242		AR_E0,J/UUO			;NO FLAGS ALLOWED IN DST LEN
						; 7243	MVST1:	FILL_AR,AR_ARX			;SAVE FILL CHAR
						; 7244		FE_AR0-8,AR0-8_#,#/0		;SEPARATE FLAGS OFF
						; 7245		ARX_AR,AR_AR-BR,SKP AD0		;COMPUTE SRC-DST LEN
						; 7246	=0	DLEN_AR,AR_BR COMP,J/MVST2	;SRC LONGER
						; 7247		DLEN_AR,AR_ARX COMP		;DST LONGER
						; 7248	MVST2:	SLEN_AR,ARX_AR,MQ_AR,AR_0S	;-SHORT LEN -1 TO MQ
						; 7249		AR0-8_FE,BRX/ARX		; AND BRX
						; 7250		SFLGS_AR,B DISP
						; 7251	=100	CLR AR,ARX_1S,SC_#,#/15.,J/MOVS2;TRANSLATE, BUILD MASK
						; 7252		AR_E1,J/MVSO1			;OFFSET, SIGN EXTEND E1
						; 7253		ARX_BRX+1,AR/ADX,SR_SRC,J/MOVST1	;LEFT JUSTIFY
						; 7254		AR_DLEN,SKP AD0,J/MOVRJ		;RIGHT JUSTIFY
						; 7255	
						; 7256	MVSO1:	ARX_DSTP,SKP AR18,ARL_0.M	;CHECK SIGN FOR EXTENDING
						; 7257	=0
						; 7258	MVSO2:	E1_AR,AR_ARX,J/MVSO3		;SAVE AGAIN, GET POINTER
						; 7259		ARL_1S,J/MVSO2			;NEG, MAKE MINUS
						; 7260	MVSO3:	SC_S,CLR ARX,AR_1S		;PREPARE TO BUILD MASK
						; 7261	MOVS2:	AR_SHIFT,SR_SRC
						; 7262		MSK_AR
						; 7263	=000
						; 7264	MOVELP:	AR_SLEN+1,CALL,J/SRCMOD		;PICK UP SOURCE BYTE
						; 7265		AR_DLEN,J/MOVSTX		;(1) LENGTH EXHAUSTED
						; 7266	=100
						; 7267	MOVPUT:	SR_SRC+DST,CALL,J/PUTDST	;(4) NORMAL, STORE DST BYTE
						; 7268		I FETCH,AR_DLEN,J/MVABT		;(5) ABORT
						; 7269	=110	SR_SRC,J/MOVELP			;(6) DPB DONE
						; 7270	=
						; 7271	;HERE TO ABORT A STRING MOVE DUE TO TRANSLATE OR OFFSET FAILURE
						; 7272	
						; 7273	MVABT:	BR/AR,AR_-SLEN,SKP AR0		;WHICH STRING LONGER?
						; 7274	=0
						; 7275	MVABT1:	AC3_AR,FETCH WAIT,J/MVABT2	;PUT AWAY DEST LEN
						; 7276		AR_AR-BR,J/MVABT1		;DEST LEN WAS GREATER
						; 7277	
						; 7278	MVABT2:	AR_SLEN COMP,SKP BR0		;GET UNDECREMENTED SLEN
						; 7279	=0	AR_AR+BR			;SRC LONGER BY (DLEN)
						; 7280	MVEND:	AR_AR*SFLGS,AD/OR,SR_0,J/STAC	;PUT BACK REMAINING LENGTH
						; 7281	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 155
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7282	;HERE TO BEGIN RIGHT-JUSTIFIED MOVE
						; 7283	
						; 7284	=00
						; 7285	MOVRJ:	ARX_AR,AR_SRCP,SR_SRC,J/MVSKP	;SRC LONGER, SKIP OVER SOME
						; 7286		SR_DSTF,CALL,J/MOVF1		;DST LONGER, FILL IT
						; 7287	=11	ARX_BRX+1,AR/ADX,SR_SRC,J/MOVST1	;DONE FILLING
						; 7288	
						; 7289	=0
						; 7290	MVSKP:	ARX_ARX-1 (AD),FE_#,#/36.,
						; 7291			SIGNS DISP,SKP INTRPT,J/MVSK1
						; 7292		P_FE-S,AR_AR+1,J/MVSKP
						; 7293	=110
						; 7294	MVSK1:	P_P-S,SKP SCAD0,J/MVSKP		;BUMP POINTER
						; 7295		SRCP_AR,GEN ARX,SIGNS DISP,AR_0.M
						; 7296	=110	BRX/ARX,AR_SLEN COMP,ARX/AD,J/MVSK3	;INTERRUPTED
						; 7297		DLEN_AR,J/MVSK4			;DONE FILLING
						; 7298	
						; 7299	MVSK3:	AC3_AR,AR_ARX*BRX,AD/A+B+1	;DEST HAS SHORT LEN
						; 7300		SR_0,J/STRPF2			;FIX UP AC0, SERVE INTRPT
						; 7301	
						; 7302	;HERE FOR NO-MODIFICATION STRING MOVES
						; 7303	
						; 7304	=000
						; 7305	MOVST1:	SLEN_AR,BRX/ARX,		;PUT UPDATED LEN AWAY
						; 7306			AR+ARX+MQ_0.M,CALL.M,
						; 7307			SIGNS DISP,J/GSRC
						; 7308	MOVSTX:	SKP AR0,ARX_AR,AR_0S,J/MOVST2	;SHORT LEN EXHAUSTED
						; 7309	=010	SR_SRC+DST,CALL,J/PUTDST
						; 7310	=110
						; 7311	MVSK4:	ARX_BRX+1,AR/ADX,SR_SRC,J/MOVST1
						; 7312	=
						; 7313	=00
						; 7314	MOVST2:	TEST ARX,TEST FETCH,		;SKIP IF BOTH LENGTHS =0
						; 7315			AC3_AR,AR_ARX,J/MVEND	;CLEAR DEST LEN, REBUILD SRC
						; 7316		SR_DST,CALL,J/MOVF1		;SOURCE GONE, FILL OUT DST
						; 7317	=11	AR_SFLGS,VMA_PC+1,J/SFET1	;DONE FILLING
						; 7318	
						; 7319	;NOTE -- IT AIN'T AS EASY AS IT LOOKS TO BUM A CYCLE OUT OF THIS
						; 7320	; ROUTINE, BECAUSE AN INTERRUPT, IF ANY, HAS TO BE TAKEN AFTER THE
						; 7321	; POINTER UPDATE AND BEFORE THE LENGTH UPDATE.  GOOD HUNTING!
						; 7322	=01*
						; 7323	MOVF1:	AR_FILL,CALL,J/PUTDST
						; 7324		AR_DLEN+1,SKP INTRPT,J/MOVF2
						; 7325	=0
						; 7326	MOVF2:	DLEN_AR,SIGNS DISP,J/MOVF3	;DONE?
						; 7327		SR DISP,J/CLEAN			;BREAK OUT FOR INTERRUPT
						; 7328	=011
						; 7329	MOVF3:	RETURN2				;YES, DONE
						; 7330		J/MOVF1				;NO, DO ANOTHER
						; 7331	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 156
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7332	.TOC	"EIS -- STRING COMPARE"
						; 7333	
						; 7334	;HERE WITH AC3 (DEST LENGTH) IN AR
						; 7335	
						; 7336	CMPS:	BR/AR,ARX_AR,FE_AR0-8,AR_AC0	;DEST LEN TO BR, GET SRC LEN
						; 7337		FE_FE OR AR0-8,			;GATHER HIGH BITS OF LEN'S
						; 7338			SKP AR GT BR		;WHICH STRING LONGER?
						; 7339	=0
						; 7340	CMPS1:	LOAD AR,AR_ARX-1,ARX_AR-1,	;SRC SHORTER
						; 7341			GEN FE,SKP SCAD NE,J/CMPS2	;CHECK LEN'S PURE
						; 7342		VMA_VMA+1,J/CMPS1		;SRC LONGER, GET DST FILLER
						; 7343	=0
						; 7344	CMPS2:	AR_MEM,BR/AR,BRX/ARX,J/CMPS4	;DECREMENTED LEN'S TO BR'S
						; 7345		MB WAIT,AR_E0,J/UUO		;OOPS, ILLEGAL BITS IN LEN'S
						; 7346	
						; 7347	;HERE IS THE COMPARE LOOP.
						; 7348	; MQ CONTAINS THE FILL CHARACTER FOR THE SHORTER STRING,
						; 7349	; BR CONTAINS THE REMAINING DESTINATION LENGTH,
						; 7350	; BRX CONTAINS THE REMAINING SOURCE LENGTH
						; 7351	=0
						; 7352	CMPS3:	ARX0_MQ35,J/CMPSX		;WE GOT INEQUALITY.  GET SIGN
						; 7353	CMPS4:	MQ_AR,ARX_AR,FE_#,#/36.,	;FILL TO MQ & ARX
						; 7354			AR_BR,SKP ARX0		;MORE CHARS IN SRC STRING?
						; 7355	=000	AR_SRCP,ARX_SRCP,		;READY WITH SRC POINTER
						; 7356			SR_ED(S),CALL,J/GSRC1	;GO GET SRC BYTE
						; 7357		AR_ARX,ARX_0S,SR_0,SIGNS DISP	;SRC DONE.  TEST DEST LEN
						; 7358	=010	T0_AR,AR_MQ,SIGNS DISP,J/CMPS5	;SRC (OR SRC FILL) TO T0,
						; 7359	=110					;TEST FOR END OF DEST STRING
						; 7360	CMPSX:	GEN ARX,CMS FETCH,J/NOP		;QUIT WITH COMPARE COND IN ARX
						; 7361	=
						; 7362	;HERE TO GET DESTINATION BYTE.  SRC IS IN T0, FILL CHAR IN AR
						; 7363	;HERE WITH SIGNS DISP, TO AVOID CALL ON CMPDST IF DST LEN EXHAUSTED
						; 7364	
						; 7365	=101
						; 7366	CMPS5:	SR_ED(+D),CALL,J/CMPDST		;GO FOR DESTINATION BYTE
						; 7367		AR_AR*T0,AD/XOR,		;AR ZERO IF EQUAL
						; 7368			ARX/MQ,MQ_MQ*2		;FILL TO ARX, CRY TO MQ35
						; 7369		BR/AR,BRX/ARX,			;EQUALITY TO BR, FILL TO BRX
						; 7370			AR_BR,ARX_BRX,SKP BR0	;LENGTHS TO AR, ARX
						; 7371	=0	AC3_AR,ARX_AR,AR_ARX (AD),	;UPDATE DEST LEN IN AC3
						; 7372			SIGNS DISP,J/CMPS6	;TEST SRC LEN
						; 7373		ARX_AR,AR_ARX (AD)		;DEST LEN EXHAUSTED
						; 7374	=110
						; 7375	CMPS6:	AC0_AR,AR_ARX-1,ARX_AR-1,J/CMPS7	;UPDATE SRC LEN IN AC0
						; 7376		AR_ARX-1,ARX_AR-1		;SRC EXHAUSTED PREVIOUSLY
						; 7377	
						; 7378	CMPS7:	BR/AR,BRX/ARX,			;LENGTHS TO BR'S
						; 7379			SKP BR EQ,AR/ADX,J/CMPS3	;CHECK FOR EQUALITY
						; 7380	
						; 7381	=0
						; 7382	CMPDST:	AR_DSTP,ARX_DSTP,FE_#,#/36.,	;GET DEST BYTE FOR COMPARE
						; 7383			CALL,J/IDST		;UPDATE DEST POINTER
						; 7384		SC_FE+SC,SKP INTRPT,J/LDB1	;GET DEST BYTE
						; 7385	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 157
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7386	.TOC	"EIS -- DECIMAL TO BINARY CONVERSION"
						; 7387	; HERE WITH AC0 (SRC LEN) IN AR COMPLEMENTED
						; 7388	; IN THE LOOP, AC3 CONTAINS 10 (DECIMAL), BR'BRX HAS ACCUMULATED BINARY
						; 7389	
						; 7390	.IF/DECIMAL
						; 7391	
						; 7392	DBIN:	BR/AR,FE_AR0-8 COMP,AR0-8_#,#/-1	;FORCE OUT FLAGS
						; 7393		SLEN_AR,AR_0S,SIGNS DISP
						; 7394	=101	AR0-8_FE,MQ_0.S,ARX_AC4,J/DBS1	;BUILD SFLGS
						; 7395		B DISP				;OFFSET OR TRANSLATE?
						; 7396	=110	AR0-8_FE,J/DBST			;TRANSLATE, LET S FLAG SET LATER
						; 7397		AR0-8_FE OR #,#/400		;OFFSET, SET S FLAG
						; 7398	DBST:	SFLGS_AR,AR_0S,ARX_0S,J/DBS2	;CLEAR BINARY
						; 7399	
						; 7400	DBS1:	SFLGS_AR,ARX_ARX*2		;HERE WHEN SIG ALREADY ON
						; 7401		AR_AC3				;ACCUMULATED BINARY IN AR
						; 7402	DBS2:	BR_AR LONG,AR_1,CLR ARX
						; 7403		AR_AR*10,B DISP,SC_#,#/4	;GET CONSTANT 10 FOR COMPARE
						; 7404	=110	AC3_AR,AR_ARX,ARX_1S,J/DBS3	;PREPARE TO BUILD MASK
						; 7405		AC3_AR				;OFFSET
						; 7406		AR_E1				;GET OFFSET
						; 7407		ARL_1S.M,SKP AR18		;SIGN EXTEND IT
						; 7408	=0	ARL_0S				;OOPS, TWAS POS
						; 7409		E1_AR,AR_1S			;NOW READY TO BUILD MASK
						; 7410	DBS3:	AR_SHIFT,SR_DB
						; 7411		MSK_AR,AR_BR LONG		;SAVE MASK, GET INITIAL INPUT
						; 7412	
						; 7413	=0*0
						; 7414	DBINLP:	BR_AR LONG,AR_SLEN+1,		;BINARY BACK TO BR, COUNT LENGTH
						; 7415			CALL,J/SRCMOD		;PICK UP A DIGIT
						; 7416		SKP AR2,VMA_PC+1,J/DBXIT	;(1) DONE, TEST M FLAG
						; 7417		ARX_AR,AR+MQ_0.M,GEN AR-AC3,	;(4) NORMAL, ADD IN DIGIT
						; 7418			SKP CRY0,J/DBIN2	;TEST FOR DIGIT >9
						; 7419		AR_SLEN COMP,J/DBABT		;(5) ABORT
						; 7420	
						; 7421	;HERE TO ADD IN A DIGIT
						; 7422	
						; 7423	=0
						; 7424	DBIN2:	BR_AR LONG,AR_BR LONG,J/DBIN3	;DIGIT TO BR LONG, BINARY TO AR LONG
						; 7425		AR_SLEN COMP,J/DBABT		;DIGIT >9, ABORT
						; 7426	
						; 7427	DBIN3:	AR_AR*5 LONG			;ALREADY HAVE BINARY *2
						; 7428		AR_2(AR+BR) LONG,J/DBINLP	;ADD IN DIGIT, SHIFT LEFT
						; 7429	
						; 7430	;HERE ON ABORT
						; 7431	
						; 7432	DBABT:	AR_AR*SFLGS,AD/OR		;COMBINE FLAGS WITH +LEN REMAINING
						; 7433		AC0_AR,AR_BR LONG,SC_#,#/35.,	;PUT BACK UNUSED LENGTH
						; 7434			VMA_PC+1,J/STOR34	;END WITH NO SKIP
						; 7435	
						; 7436	;HERE AT END
						; 7437	
						; 7438	=0
						; 7439	DBXIT:	AR_BR LONG,VMA_VMA+1,		; M FLAG=0
						; 7440			SC_#,#/35.,J/STOR34	;GO FOR NEXT INSTR
						; 7441		AR_-BR LONG,VMA_VMA+1,		;NEGATE
						; 7442			SC_#,#/35.
						; 7443	STOR34:	AC3_AR,AR_SIGN,FETCH		;STORE HIGH PART
						; 7444		AR_SHIFT,SR_0			;GET LOW READY
						; 7445	STAC4:	AC4_AR,FINISH
						; 7446	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 158
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7447	.TOC	"EIS -- BINARY TO DECIMAL CONVERSION"
						; 7448	;	AC0,AC1 = BINARY INTEGER INPUT
						; 7449	;	AC3 = FLAGS, MAX LENGTH OF DECIMAL STRING
						; 7450	;	AC4 = DESTINATION STRING POINTER
						; 7451	; TEMPS ARE USED AS FOLLOWS:
						; 7452	;	SLEN= # OF SIGNIFICANT DIGITS
						; 7453	;	T1,2= 10.**(SLEN) THE LOWEST POWER OF TEN LARGER THAN BINARY
						; 7454	
						; 7455	;FPD IS SET IF THE INSTRUCTION WAS INTERRUPTED AFTER
						; 7456	; CONVERSION OF THE BINARY INTEGER TO FRACTION FORM.
						; 7457	; (AND THUS BY IMPLICATION, AFTER STORING FILLERS)
						; 7458	
						; 7459	=011
						; 7460	BDEC:	ARX_SHIFT,AR_AC0,SKP AD0,	;BINARY INTEGER NOW IN AR LONG
						; 7461			SC_#,#/20,J/BD1		;IS IT NEGATIVE?
						; 7462		ARX_AR,AR_E1,B DISP		;CONT FROM INTRPT OR PGF
						; 7463	=0
						; 7464	BDDR1:	AR_AC3,SR_BDT,J/BDDR3		;RESUME WITH FRACTION IN AR LONG
						; 7465		SKP AR18,ARL_0.M		;OFFSET MODE.  EXTEND E1
						; 7466	=0
						; 7467	BDDR2:	E1_AR,J/BDDR1			;GET REST OF FRACTION
						; 7468		ARL_1S,J/BDDR2			;E1 NEGATIVE
						; 7469	BDDR3:	BR/AR,CLR EXP,			;SEPARATE FLAGS & LENGTH
						; 7470			BRX/ARX,ARX_AC0		;LOW FRAC TO BRX, HI TO ARX
						; 7471		AR_AR*BR,AD/ANDCA,BR/AR		;JUST FLAGS TO AR, JUST LEN TO BR
						; 7472		AC3_AR,AR_ARX			;GET HI FRAC TO AR
						; 7473		BR/AR,VMA_PC+1,			;FRAC TO BR LONG, GET VMA READY
						; 7474			AR_-BR,SKP CRY0,J/BDDR4	;CHECK FOR MORE TO GO
						; 7475	
						; 7476	=0
						; 7477	BD1:	SKP AR NE,AD LONG,J/BD2		;TEST FOR ZERO LONG
						; 7478		AR_-AR LONG,SC_#,#/30,J/BD3	;MAKE POSITIVE, SET N&M FLAGS
						; 7479	=00
						; 7480	BD2:	BR_AR LONG,AR_1 LONG,		;BINARY RIGHT-ALIGNED IN BR,
						; 7481			SC_#,FE_#,#/20.,J/BD4	;LOOK FOR LARGER POWER OF TEN
						; 7482	BD3:	BR_AR LONG,AR_AC3,		;SAVE POS BINARY, GET AC FLAGS
						; 7483			CALL,J/SETFLG		; SET FLAGS AS NEEDED
						; 7484	=11	AC3_AR,AR_BR*.5 LONG,J/BD2	;SAVE NEW FLAGS, SHIFT BINARY RIGHT
						; 7485	
						; 7486	;HERE TO FIND THE SMALLEST POWER OF TEN LARGER THAN THE BINARY INTEGER.
						; 7487	;BINARY IS IN BR LONG, AND POSITIVE UNLESS IT WAS 1B0.  IN THIS CASE THE
						; 7488	;COMPARISON WILL NEVER FIND A LARGER POWER OF TEN, BUT THE COUNT IN FE
						; 7489	;WILL RUN OUT, AND WE WILL CORRECTLY COMPUTE 22 DIGITS REQUIRED.
						; 7490	
						; 7491	=010					;IGNORE BR SIGN
						; 7492	BD4:	AR_AR*10 LONG,FE_FE-1,J/BD6	;THIS POWER IS TOO SMALL
						; 7493		SC_FE-SC-1,T1_AR,AR_ARX,J/BD7	;THIS POWER IS BIG ENOUGH
						; 7494		FE_FE-1				;10.**21 IS TOO SMALL, USE 22
						; 7495		SC_FE-SC-1,T1_AR,AR_ARX,J/BD7	;10.**21 IS BIG ENOUGH
						; 7496	
						; 7497	BD6:	GEN AR-BR-1,DISP/DIV,J/BD4	;COMPARE BINARY TO 10**N
						; 7498	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 159
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7499	;HERE HAVING FOUND THE NUMBER OF DIGITS REQUIRED TO REPRESENT THE
						; 7500	; GIVEN INTEGER.  THE ONE'S COMPLEMENT OF THE NUMBER OF DIGITS IS NOW
						; 7501	; IN SC, AND T1/T2 IS GETTING A POWER OF TEN LARGER THAN THE INPUT.
						; 7502	
						; 7503	=0*
						; 7504	BD7:	T2_AR,AR_1S,CALL,J/GETSC	;SAVE (10**N), GET -# OF DIGITS
						; 7505		SLEN_AR,ARX_AR*4 COMP		;-# OF SIGNIFICANT DIGITS-1
						; 7506		AR_AC3				;GET FLAGS, LENGTH
						; 7507		FE_AR0-8,AR0-8_#,#/0		;LEN IN AR, FLAGS IN FE
						; 7508		AR_ARX*.25-AR-1,SKP CRY0,	;-# OF FILL CHARS -1
						; 7509			SC_FE-#,#/400		;SC0 SET IF S FLAG =0
						; 7510	=0	ARX_AR+1,AR_0.M,J/BD8		;ENOUGH SPACE. -FILL CNT TO ARX
						; 7511		I FETCH,J/NOP			;OVERFLOW
						; 7512	BD8:	AR0-8_FE.M,SKP SC0,		;FLAGS TO AR.  S FLAG =0?
						; 7513			GEN ARX COMP,SIGNS DISP	; OR EXACT LENGTH?
						; 7514	=110	T0_AR,LOAD AR,J/BDF1		;FLAGS TO T0, GET FILLER
						; 7515	BD9:	AC3_AR,J/BDDV1			;NO FILL.  FLAGS TO AC3
						; 7516	
						; 7517	=00
						; 7518	BDF1:	AR_MEM,SR_BDF,CALL,J/RET1	;GET FILLER, GO WAIT FOR PARITY
						; 7519		FILL_AR,AR_ARX,CALL,J/MOVF2	;FILL AS REQUIRED
						; 7520	=11	AR_T0,J/BD9			;GET FLAGS BACK
						; 7521	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 160
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7522	;SETUP FOR LONG DIVISION OF BINARY BY 10**N
						; 7523	;BR STILL HAS BINARY RIGHT ALIGNED (IE, LOW SIGN SQUEEZED OUT BY
						; 7524	; SHIFTING HIGH WORD RIGHT).  BR IS POSITIVE UNLESS INPUT INTEGER WAS
						; 7525	; 1B0, IN WHICH CASE BR IS -1B1.  T1,T2 HAS LARGER POWER OF TEN, UNLESS
						; 7526	; BINARY EXCEEDS 10**21, IN WHICH CASE T1,T2 CONTAINS 10**21. SINCE
						; 7527	; BINARY CANNOT BE AS LARGE AS 2 * 10**21, THE FIRST DIVIDE STEP
						; 7528	; IS GUARANTEED TO GENERATE A 1 IN THIS CASE ONLY, AND TO REDUCE THE
						; 7529	; BINARY TO LESS THAN 10**21.
						; 7530	
						; 7531	BDDV1:	ARX_T2,CLR AR			;FILL DONE.  GET 10**N
						; 7532	=110	AR_T1,MQ_AR,			;D'SOR SET IN AR, MQ CLR
						; 7533			SKP BR0,CALL,J/BDDV2	; CHK D'END SIGN
						; 7534		ARX_AR,AR_AC0,SET FPD,B DISP	;DONE, GET FULL QUO IN AR LONG
						; 7535	=0	AR_AR+1 LONG,SR_BDT,J/BDD1	;PREVENT 9'S DISEASE
						; 7536		BR_AR LONG,AR_E1		;OFFSET MODE, MUST SIGN EXT E1
						; 7537		ARL_0.M,SKP AR18
						; 7538	=0
						; 7539	BDE2:	E1_AR,AR_BR+1 LONG,J/BDD1	;UPDATE E1
						; 7540		ARL_1S,J/BDE2			;MAKE FULL E1 NEG
						; 7541	
						; 7542	=000
						; 7543	BDDV2:	AR_BR LONG,BR_AR LONG,		;BEGIN LONG DIVISION
						; 7544			SC_#,FE_#,#/34.,	;STEP COUNTS FOR BOTH PARTS
						; 7545			CALL,J/DDVSUB
						; 7546		AR_-BR,ARX/ADX,BR_AR LONG,	;HERE IF BINARY WAS 1B0
						; 7547			SC_#,FE_#,#/34.,	; IT'S NOW 1B1
						; 7548			CALL,J/DDVSUB
						; 7549	=011	AC0_AR,AR_MQ,ARL/AD,MQ_0.M,	;HALF DONE WITH DIVISION
						; 7550			FE_SC,J/DDVLP		;RESUME WITH ADD STEP
						; 7551	=101	AC0_AR,AR_MQ,ARL/AD,MQ_0.M,
						; 7552			FE_SC,J/DDVSUB		;RESUME WITH SUBTRACT STEP
						; 7553	=
						; 7554	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 161
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7555	;HERE WITH QUOTIENT OF <INPUT INTEGER>/<10**N> IN AR LONG, WITH THE
						; 7556	; BINARY POINT BETWEEN BITS 0 AND 1 OF AR.  THUS, BIT 0 WILL BE SET
						; 7557	; IFF THE INPUT INTEGER WAS GREATER THAN OR EQUAL TO 10**21.
						; 7558	; SINCE THIS IS A TRUNCATED FRACTION, IT IS NOT GREATER THAN THE TRUE
						; 7559	; QUOTIENT, AND THE ERROR IS LESS THAN 2**-71. WE ADD 2**-71, TO
						; 7560	; GUARANTEE THAT OUR FRACTION IS GREATER THAN THE TRUE QUOTIENT,
						; 7561	; WITH AN ERROR NO GREATER THAN 2**-71.  WE WILL THEN MULTIPLY THIS
						; 7562	; FRACTION BY 10 N TIMES, REMOVING THE INTEGER PART AT EACH STEP
						; 7563	; TO EXTRACT THE N DIGITS.  SINCE N IS AT MOST 21, THIS IS A MULTIPLI-
						; 7564	; CATION BY AT MOST 10**21, SO THE ERROR IS AT MOST (2**-71)*(10**21).
						; 7565	; SINCE THIS IS LESS THAN ONE, THE ERROR DOES NOT INTRUDE INTO THE
						; 7566	; OUTPUT DIGIT STRING.
						; 7567	
						; 7568	;HERE IS LOOP TO EXTRACT DIGITS FROM FRACTION IN AC0,AC1
						; 7569	
						; 7570	BDD1:	BR_AR LONG,VMA_PC+1,		;START NEXT LOOP ITERATION
						; 7571			AR_SLEN+1,SKP CRY0	;ANY MORE DIGITS?
						; 7572	=0					;HERE TO RESUME AFTER INTERRUPT
						; 7573	BDDR4:	SLEN_AR,MQ_AR,SC_1,		;YES, SAVE LENGTH REMAINING
						; 7574			AR_BR LONG,		; AND GET FRACTION
						; 7575			SIGNS DISP,J/BDD2	;CHECK FOR 1ST DIGIT OF 10**21
						; 7576		AR_0S,ARX_0S,CLR FPD,		;NO, DONE.  CLEAR AC0 & AC1
						; 7577			VMA_VMA+1
						; 7578		AC0_AR,FETCH,J/STRAC1		;MOVE FETCH WHEN TIMING FIXED
						; 7579	=101					;LOOK AT BR0 ONLY
						; 7580	BDD2:	AR_AR*1.25 LONG,SC_#,#/4	;NEXT DIGIT TO AR0-3
						; 7581		ARX_AR,AR_0S,SKP INTRPT		;READY TO SHIFT IN DIGIT
						; 7582	=0	AR_SHIFT,B DISP,J/BDD3		;STORE IT
						; 7583		AR_BR LONG,SR_0,J/B2DPF		;UPDATE REGS & QUIT
						; 7584	
						; 7585	;HERE TO STORE DIGIT IN AR FOR BDEC
						; 7586	=0
						; 7587	BDD3:	VMA_AR+E1,LOAD AR,J/BDD4	;TRANSLATE: GET TABLE ENTRY
						; 7588		AR_AR+E1,J/BDD7			;OFFSET AR AND STORE IT
						; 7589	
						; 7590	BDD4:	SKP MQ EQ -1,TIME/3T,ARX_0.M	;LAST DIGIT?
						; 7591	=0
						; 7592	BDD5:	AR_MEM,J/BDD6			;NO, STORE RH (POS DIGIT)
						; 7593		ARX_AC3,J/BDD5			;YES, LOOK AT M FLAG
						; 7594	BDD6:	SKP ARX2,ARX_AR SWAP,ARL_0.M
						; 7595	=100
						; 7596	BDD7:	SR_BDD,CALL,J/PUTDST
						; 7597		AR_ARX,ARL_0.M,J/BDD7		;M SET ON LAST DIGIT, USE LH
						; 7598	
						; 7599		AR_BR LONG,SR_BDT,		;GET FRACTION BACK
						; 7600			SIGNS DISP		;CHECK BR0 FOR INTEGER PART
						; 7601	=
						; 7602	=101	AR_AR*10 LONG			;DISCARD PREVIOUS DIGIT
						; 7603		P_P AND #,#/37,J/BDD1		;CLEAR AR0, GO FOR NEXT
						; 7604	
						; 7605	.ENDIF/DECIMAL
						; 7606	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 162
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7607	.TOC	"EIS -- SRCMOD SUBROUTINE TO GET MODIFIED SOURCE BYTE"
						; 7608	
						; 7609	;SLEN = COMPLEMENT OF LENGTH
						; 7610	;MSK = MASK
						; 7611	;E1 = EFFECTIVE ADDRESS OF OPERATION WORD (SIGN EXTENDED IF OFFSET)
						; 7612	
						; 7613	;CALL WITH:	AR_SLEN+1,CALL,J/SRCMOD
						; 7614	;RETURNS:	1 LENGTH EXHAUSTED: FLAGS IN AR
						; 7615	;		2 (EDIT ONLY) NO SIGNIFICANCE: FLAGS IN FE
						; 7616	;		3 (EDIT ONLY) SIGNIFICANCE START: BYTE IN AR, FLAGS IN FE
						; 7617	;		4 NORMAL: BYTE IN AR
						; 7618	;		5 ABORT: OUT OF RANGE OR TRANSLATE FAILURE
						; 7619	;	BR, BRX, PRESERVED.
						; 7620	;	B=0 IF TRANSLATE, =1 IF OFFSET MODE, =2 IF EDIT, =4 IF CVTDBT
						; 7621	
						; 7622	
						; 7623	=00
						; 7624	SRCMOD:	SLEN_AR,AR+ARX+MQ_0.M,CALL.M,	;PUT LENGTH AWAY, GET BYTE
						; 7625			SIGNS DISP,J/GSRC	;CHECK FOR LENGTH EXHAUSTION
						; 7626		AR_SFLGS,SR_0,RETURN1		;LEN =0, DONE
						; 7627		E1,TIME/2T,B DISP		;BYTE IN AR
						; 7628	=110	AR_AR*.5 LONG,E1,J/XLATE	;LOW BIT TO ARX0, BYTE/2 TO AR LOW
						; 7629		AR_AR+E1,TIME/3T		;OFFSET, ADD OFFSET, TEST MASK
						; 7630		TEST AR.MSK,SKP CRY0,RETURN4	;RETURN 4 IF OK, 5 OUT OF RANGE
						; 7631	
						; 7632	;HERE ON TRANSLATE-MODE OPERATIONS, WITH THE BYTE/2 IN AR, AND
						; 7633	; THE LEAST SIGNIFICANT BIT OF THE BYTE IN ARX0.  PERFORM THE
						; 7634	; TABLE LOOKUP, AND OPERATE AS CONTROLLED BY THE HIGH THREE BITS
						; 7635	; OF THE TABLE ENTRY.
						; 7636	
						; 7637	XLATE:	VMA_AR+E1,LOAD AR		;GET FUNCTION FROM TABLE
						; 7638	
						; 7639	TRNAR:	AR_MEM,SKP ARX0,SC_#,#/18.	;WHICH HALF?
						; 7640	=0	ARX_AR,AR0-3 DISP,		;LH, MOVE TO ARX LEFT
						; 7641			AR_SFLGS,J/TRNFNC
						; 7642		ARX_AR SWAP,AR18-21 DISP,	;RH, MOVE THAT TO ARX LEFT
						; 7643			AR_SFLGS,J/TRNFNC
						; 7644	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 163
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7645	;HERE ON TRANSLATE OPERATION TO PERFORM FUNCTIONS REQUIRED BY
						; 7646	; THE 3 HIGH ORDER BITS OF THE TRANSLATE FUNCTION HALFWORD.
						; 7647	; WE HAVE DISPATCHED ON THOSE THREE BITS, WITH THE FUNCTION
						; 7648	; HALFWORD IN LH(ARX), AND THE FLAGS FROM AC0 IN AR.
						; 7649	
						; 7650	=0001
						; 7651	TRNFNC:	SFLGS_AR,FE_P,AR_SHIFT,		;SAVE FLAGS, GET FCN IN AR RIGHT
						; 7652			SIGNS DISP,J/TRNRET	;WAS S FLAG ALREADY SET?
						; 7653	TRNABT:	SFLGS_AR,FE_P AND #,#/3,RETURN5	;ABORT
						; 7654		P_P AND #,#/67,J/TRNFNC		;CLEAR M FLAG
						; 7655		P_P OR #,#/10,J/TRNFNC		;SET M FLAG
						; 7656	TRNSIG:	P_P OR #,#/20,J/TRNFNC		;SET N FLAG
						; 7657		P_P OR #,#/20,J/TRNABT		;SET N AND ABORT
						; 7658		P_P AND #,#/67,J/TRNSIG		;CLEAR M, THEN SET N
						; 7659		P_P OR #,#/30,J/TRNFNC		;SET N AND M
						; 7660	
						; 7661	=011
						; 7662	TRNRET:	ARX_AR*MSK,AD/AND,		;S FLAG IS 0, GET BYTE IN AR
						; 7663			SKP AR18,B DISP,J/TRNSS	;IS THIS EDIT?
						; 7664		AR_AR*MSK,AD/AND,RETURN4	;RETURN NORMAL SINCE S FLAG SET
						; 7665	
						; 7666	=100
						; 7667	TRNSS:	AR_DLEN,B DISP,J/TRNNS1		;NO SIG ON MOVE OR D2B
						; 7668		AR_SFLGS,SC_#,#/40,J/TRNSS1	;SIG START, SET FLAG
						; 7669		VMA_E0+1,LOAD AR,RETURN2	;EDIT NO SIG.  GET FILL
						; 7670		AR_DSTP,FE_#,#/36.,RETURN3	;EDIT SIG START
						; 7671	
						; 7672	=0**
						; 7673	TRNNS1:	AR_AR-1,J/TRNNS2		;COMPENSATE FOR IGNORING SRC
						; 7674		AR_SLEN+1,J/SRCMOD		;D2B HAS NO DEST LENGTH
						; 7675	TRNNS2:	DLEN_AR,SIGNS DISP
						; 7676	=011	AR_SLEN,J/SRCMOD		;SLEN = DST LEN, DON'T CHANGE IT
						; 7677		AR_SLEN+1,J/SRCMOD		;SLEN REFLECTS SRC LENGTH
						; 7678						; COUNT DOWN FOR BYTE SKIPPED
						; 7679	TRNSS1:	P_P OR SC
						; 7680		SFLGS_AR,AR_ARX,RETURN4		;RETURN WITH SIG SET
						; 7681	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 164
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7682	;SUBROUTINE TO GET BYTE FROM SOURCE STRING
						; 7683	; CALL GSRC WITH SIGNS DISP TO CHECK FOR LENGTH EXHAUSTION
						; 7684	; [TIME = 17 + 3(BP OVERFLOW)]
						; 7685	
						; 7686	=011
						; 7687	GSRC:	AR_DLEN,RETURN1			;LEN RAN OUT
						; 7688	GETSRC:	AR_SRCP,ARX_SRCP,FE_#,#/36.
						; 7689	=0
						; 7690	GSRC1:	P_P-S,SC/SCAD,CALL.M,		;UPDATE POINTER
						; 7691			SKP SCAD0,J/GSRC2	;TEST FOR WORD OVERFLOW
						; 7692		SC_FE+SC,SKP INTRPT,J/LDB1	;GET BYTE & RETURN TO CALLER
						; 7693	=0
						; 7694	GSRC2:	SRCP_AR,ARX_AR,FE_S,		;STORE POINTER,
						; 7695			EA MOD DISP,J/BFETCH	; GO EVALUATE THE ADDRESS
						; 7696		AR_AR+1,P_FE-S,SC/SCAD,J/GSRC2
						; 7697	
						; 7698	;SUBR TO STORE AR IN DEST STRING
						; 7699	; [TIME = 24 + 3(BP OVERFLOW)]
						; 7700	
						; 7701	=00
						; 7702	PUTDST:	MQ_AR,AR_DSTP,ARX_DSTP,
						; 7703			FE_#,#/36.,CALL,J/IDST
						; 7704		AR_MQ,SC_#-SC,#/36.,SKP SCAD0,
						; 7705			CALL,J/DPB1
						; 7706	=11	MEM_AR,RETURN6
						; 7707	
						; 7708	
						; 7709	
						; 7710	;SUBROUTINES TO UPDATE STRING POINTERS
						; 7711	
						; 7712	IDST:	P_P-S,SC/SCAD,SKP SCAD0		;TEST FOR WORD OVERFLOW
						; 7713	=0
						; 7714	IDST1:	DSTP_AR,ARX_AR,FE_S,		;STORE POINTER,
						; 7715			EA MOD DISP,J/BFETCH	; GO GET THE WORD ADDRESSED
						; 7716		AR_AR+1,P_FE-S,SC/SCAD,J/IDST1
						; 7717	.ENDIF/EIS
						; 7718	
U 1754, 0002,3240,0003,0000,0022,0003,0000	; 7719	XFERW:	FIN XFER,MB WAIT,RETURN2	;FINISH TRANSFER, RETURN
						; 7720	
						; 7721	.IF/EIS
						; 7722	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 165
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7723	.TOC	"EIS -- EDIT FUNCTION"
						; 7724	;	HERE WITH E0, E1 SETUP, 0 IN AR, -1 IN ARX, AND 15 IN SC
						; 7725	
						; 7726	EDIT:	AR_SHIFT,ARX_AC0		;MASK TO AR, FLAGS ETC TO ARX
						; 7727	=1*0	MSK_AR,AR_ARX (AD),		;SAVE MASK, GET FLAGS IN AR
						; 7728			VMA_ARX,LOAD AR,	;GET FIRST PATTERN OPERATOR
						; 7729			CALL,J/TRNABT		;GET PBN INTO FE
						; 7730	EDITLP:	SC_# AND AR0-8,#/30,		;PBN*8 IN SC
						; 7731			SFLGS_AR,ARX_AR		;UPDATED AC NOW IN AC AND ARX
						; 7732	=0*	SC_FE+SC,SR_0,CALL,J/XFERW	;PATTERN IN AR, PBN*9 IN SC
						; 7733		AR_SHIFT,SH DISP,SC_#,#/5	;PATTERN BYTE TO AR0-8,
						; 7734	=0001					; DISP ON HIGH 3 BITS
						; 7735	EDDISP:	GEN #+AR0-8,#/-5,
						; 7736			SKP SCAD0,J/EDOPR	;(0XX) OPERATE GROUP
						; 7737		AR_AR*8,SKP ARX0,J/EDMSG	;(1XX) MESSAGE
						; 7738		J/EDNOP				;(2XX) UNDEFINED
						; 7739		J/EDNOP				;(3XX) UNDEFINED
						; 7740		J/EDNOP				;(4XX) UNDEFINED
						; 7741		MQ_ARX,ARX_ARX*4,
						; 7742			SC_FE+1,J/EDSKPT	;(5XX) SKIP IF MINUS
						; 7743		MQ_ARX,ARX_ARX*2,
						; 7744			SC_FE+1,J/EDSKPT	;(6XX) SKIP IF NON-ZERO
						; 7745		AR_AR*8,SC_FE+1,J/EDSKP		;(7XX) SKIP ALWAYS
						; 7746	
						; 7747	;HERE TO DECODE OPERATE GROUP
						; 7748	=0
						; 7749	EDOPR:	J/EDNOP				;OPR .GE. 005 UNDEFINED
						; 7750		SH DISP,J/OPDISP		;(00X), DISP ON LOW 3 BITS
						; 7751	=000
						; 7752	OPDISP:	AR_ARX,SC_#,#/-4,		;(000) STOP
						; 7753			VMA_PC+1,J/EDSTOP
						; 7754		SR_ED(S),J/EDSEL		;(001) SELECT
						; 7755		AR_DSTP,SKP ARX0,J/EDSSIG	;(002) START SIGNIFICANCE
						; 7756		AR_ARX,J/EDFLDS			;(003) FIELD SEPARATOR
						; 7757		VMA_AC3,LOAD ARX,		;(004) EXCH MARK AND DEST
						; 7758			MQ_ARX,J/EDEXMD
						; 7759	=
						; 7760	;HERE TO TERMINATE EDIT INSTRUCTION
						; 7761	; SC HAS -4, FE HAS CURRENT PBN, VMA HAS PC IF ABORT, PC+1 IF DONE
						; 7762	
						; 7763	EDSTOP:	FE_FE-#,#/3,SKP SCAD0
						; 7764	=0	AR_AR+1,INH CRY18,
						; 7765			P_P AND SC,J/SFET1
						; 7766		P_P+1
						; 7767	SFET1:	FETCH+1,J/STORAC
						; 7768	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 166
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7769	;HERE FOR SKPM & SKPN, WITH APPROPRIATE BIT IN ARX0
						; 7770	
						; 7771	EDSKPT:	AR_AR*8,SKP ARX0,ARX/MQ		;SKIP DISTANCE TO AR0-5
						; 7772	
						; 7773	;HERE AT END OF OPERATION TO UPDATE PBN
						; 7774	=0
						; 7775	EDNOP:	FE_FE-#,#/3,SKP SCAD0,		;END OF PATTERN WORD?
						; 7776			AR_ARX,J/EDNXT1
						; 7777	EDSKP:	FE_P+SC,J/EDNOP			;ADD SKIP DISTANCE
						; 7778	=0
						; 7779	EDNXT1:	AR_AR+1,INH CRY18,		;BUMP TO NEXT WORD
						; 7780			FE_FE-#,#/4,		;REDUCE PBN
						; 7781			SKP SCAD0,J/EDNXT1
						; 7782		FE_FE+#,#/4			;RESTORE PBN POS, INCR IT
						; 7783		SC_P AND #,#/74,VMA_AR,LOAD AR	;FLAGS & EDIT BIT TO SC, GET PATTERN
						; 7784		P_FE OR SC,J/EDITLP		;SET NEW PBN, GO DO NEXT PATTERN
						; 7785	
						; 7786	;HERE TO EXCHANGE MARK AND DESTINATION POINTERS
						; 7787	
						; 7788	EDEXMD:	AR_DSTP				;READY TO STORE DEST PTR
						; 7789		FIN XFER,STORE			;WAIT FOR MARK, STORE DSTP
						; 7790		MEM_AR,AR_ARX			;READY TO UPDATE DSTP
						; 7791		DSTP_AR,ARX/MQ,J/EDNOP		;DONE, GET NEXT OPR
						; 7792	
						; 7793	;HERE FOR FIELD SEPARATOR (CLEAR FLAGS IN AC 0-2)
						; 7794	
						; 7795	EDFLDS:	P_P AND #,#/7,J/EDSEND		;EASY ENOUGH
						; 7796	
						; 7797	;HERE FOR SIG START
						; 7798	
						; 7799	=00
						; 7800	EDSSIG:	VMA_AC3,STORE,CALL,J/EDFLT	;SAVE MARK, GET FLOAT
						; 7801		FE_FE-#,#/3,SKP SCAD0,		;S FLAG ALREADY SET, NOP
						; 7802			AR_ARX,J/EDNXT1
						; 7803	=11
						; 7804	EDSEND:	FE_P AND #,#/3,ARX_AR,J/EDNOP	;READY TO DO NEXT OP
						; 7805	
						; 7806	;HERE FOR MESSAGE CHAR
						; 7807	
						; 7808	=00
						; 7809	EDMSG:	VMA_E0+1,LOAD AR,J/EDSFIL	;NO SIG, PUT FILLER
						; 7810		SC_P,AR_0S,CALL,J/GETSC		;GET MESSAGE SELECT IN AR
						; 7811	=11	VMA_AR+E0+1,LOAD AR,J/EDMPUT	;STORE MESSAGE
						; 7812	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 167
; DSK: UCODE; EIS 6	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7813	;HERE FOR SELECT
						; 7814	
						; 7815	=0*
						; 7816	EDSEL:	AR_SRCP,ARX_SRCP,FE_#,#/36.,
						; 7817			CALL,J/GSRC1		;GO GET SRC BYTE
						; 7818		AR_AR*.5 LONG,E1		;GOT IT, DIVIDE BY 2
						; 7819	=000	VMA_AR+E1,LOAD AR,CALL,J/TRNAR	;GO TRANSLATE BY HALFWORDS
						; 7820	=010
						; 7821	EDSFIL:	AR_MEM,J/EDSF1			;(2) NO SIGNIFICANCE, STORE FILL
						; 7822		GEN P-S,SKP SCAD0,BRX/ARX,J/EDSFLT ;(3) SIG START, DO FLOAT CHAR
						; 7823	EDSPUT:	SR_ED(+D),CALL,J/PUTDST		;(4) NORMAL, STORE AT DST
						; 7824		VMA/PC,SC_#,#/-4,J/EDSTOP	;(5) ABORT
						; 7825	EDFPUT:	AR_SFLGS,J/EDSEND		;(6) BUMP PBN AND GO TO NEXT
						; 7826	EDMPUT:	AR_MEM,J/EDSPUT			;FILL OR MSG IN AR, STORE IT
						; 7827	
						; 7828	
						; 7829	;HERE WHEN TIME TO STORE FILL CHAR
						; 7830	
						; 7831	EDSF1:	SKP AR NE,J/EDFPUT		;IS THERE ONE?
						; 7832	
						; 7833	;HERE WHEN SELECT STARTS SIGNIFICANCE
						; 7834	
						; 7835	=00
						; 7836	EDSFLT:	VMA_AC3,STORE,CALL,J/EDFLT	;STORE DEST AT MARK ADDR
						; 7837		P_FE,AR_AR+1,J/EDSFLT		;FORCE STANDARD POINTER FORM
						; 7838	=11	SFLGS_AR,AR_BRX,J/EDSPUT	;SET S FLAG, GET BYTE, STORE IT
						; 7839	
						; 7840	;HERE IS SUBROUTINE TO STORE FLOAT CHAR
						; 7841	
						; 7842	EDFLT:	MEM_AR,AR_2			;GET FLOAT FROM E0+2
						; 7843	=0*	VMA_AR+E0,LOAD AR,CALL,J/XFERW
						; 7844		SKP AR NE
						; 7845	=100	AR_SFLGS,SC_#,#/40,J/SETFLG	;NO FLOAT CHR, SET S FLAG
						; 7846		SR_ED(+D),CALL,J/PUTDST		;STORE FLOAT CHR IN DST
						; 7847	=111	AR_SFLGS,SC_#,#/40		;SET S FLAG AND RETURN
						; 7848	SETFLG:	P_P OR SC,RETURN3		;NO FLOAT CHR, SET S FLAG
						; 7849	
						; 7850	.ENDIF/EIS
						; 7851	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 168
; DSK: UCODE; BLT 9	17:13:16 20-AUG-2018	PAGE FAIL/INTERRUPT CLEANUP FOR SPECIAL INSTRUCTIONS

						; 7852	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 169
; DSK: UCODE; BLT 9	17:13:16 20-AUG-2018	BLT

						; 7853	.TOC	"BLT"
						; 7854	; ENTER WITH 0,E IN AR
						; 7855	
						; 7856	;IN THE LOOP, ARX CONTAINS THE CURRENT DESTINATION ADDRESS,
						; 7857	; BRX CONTAINS THE TERMINAL ADDRESS, AND BR CONTAINS THE DIFFERENCE
						; 7858	; BETWEEN THE SOURCE AND DESTINATION ADDRESSES.
						; 7859	
						; 7860	;UNLIKE EARLIER -10 PROCESSORS, THIS CODE CHECKS FOR THE CASE IN WHICH
						; 7861	; THE DESTINATION ADDRESS IN RH(AC) IS GREATER THAN E, AND RATHER THAN
						; 7862	; STOPPING AFTER ONE WORD, COPIES DOWNWARD (EFFECTIVELY DECREMENTING
						; 7863	; AC BY 1,,1 ON EACH STEP, RATHER THAN INCREMENTING).
						; 7864	
						; 7865	;THIS CODE ALSO PROVIDES A GUARANTEED RESULT IN AC ON COMPLETION OF
						; 7866	; THE TRANSFER (EXCEPT IN THE CASE AC IS PART OF BUT NOT THE LAST WORD
						; 7867	; OF THE DESTINATION BLOCK).  WHEN AC IS NOT PART OF THE DESTINATION
						; 7868	; BLOCK, IT IS LEFT CONTAINING THE ADDRESSES OF THE FIRST WORD FOLLOWING
						; 7869	; THE SOURCE BLOCK (IN THE LH), AND THE FIRST WORD FOLLOWING THE DEST-
						; 7870	; INATION BLOCK (IN THE RH).  IF AC IS THE LAST WORD OF THE DESTINATION
						; 7871	; BLOCK, IT WILL BE A COPY OF THE LAST WORD OF THE SOURCE BLOCK.
						; 7872	
						; 7873	;IN ADDITION, A SPECIAL-CASE CHECK IS MADE FOR THE CASE IN WHICH EACH
						; 7874	; WORD STORED IS USED AS THE SOURCE OF THE NEXT TRANSFER.  IN THIS CASE,
						; 7875	; ONLY ONE READ NEED BE PERFORMED, AND THAT DATA MAY BE STORED FOR EACH
						; 7876	; TRANSFER.  THUS THE COMMON USE OF BLT TO CLEAR CORE IS SPEEDED UP.
						; 7877	
						; 7878	;BLT:	ARX_AR,MQ_AR,ARR_AC0,ARL_ARL	;END TO ARX & MQ, DEST TO AR
						; 7879	BLT1:	BR/AR,ARX_AR,BRX/ARX,		;DST TO BR & ARX, END TO BRX
U 1755, 1756,3240,2460,0000,1020,0010,0000	; 7880			AR_AC0			;SRC TO ARL
U 1756, 1760,0001,4000,0000,3001,0010,0020	; 7881		ARR_ARL,ARL_0.M			;SRC TO ARR
U 1760, 1761,5102,2004,0000,0020,0010,0000	; 7882		AR_AR-BR			;SRC-DST TO ARR
						; 7883	.IF/BACK.BLT
						; 7884		BR/AR,SKP ARX LE BRX		;SRC-DST TO BR. UP OR DOWN?
						; 7885	=00	AR_MQ-1,CALL,J/BLTAC		;DOWN, READY WITH E-1
						; 7886		AR_MQ+1,CALL,J/BLTAC		;UP, PUT E+1 IN AR FOR AC
						; 7887	DOWN:	VMA_ARX+BR,LOAD AR,J/DN1	;DOWN, START THE LOOP
						; 7888	.IFNOT/BACK.BLT
U 1761, 1762,4021,2040,0000,0020,0021,0000	; 7889	=0*	BR/AR,AR_MQ+1,CALL,J/BLTAC	;SRC-DST TO BR, E+1 IN AR
						; 7890	.ENDIF/BACK.BLT
U 1763, 1766,4662,0000,0000,0040,5410,0000	; 7891		SKP BR EQ -1,J/UP		;IS THIS CORE CLEARING CASE?
						; 7892	
						; 7893	
						; 7894	;HERE TO SETUP FINAL AC
						; 7895	
U 1762, 1764,0602,2004,0000,3020,0610,0004	; 7896	BLTAC:	ARL_ARR,AR_AR+BR		;FINAL DEST TO LH, SRC TO RH
U 1764, 1765,0001,4000,0000,3000,1610,0607	; 7897		AR_AR SWAP,SR_BLT(SRC)		;REARRANGE
U 1765, 0002,0001,0000,0000,0000,1003,0000	; 7898		AC0_AR,RETURN2
						; 7899	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 170
; DSK: UCODE; BLT 9	17:13:16 20-AUG-2018	BLT

						; 7900	;HERE FOR UPWARD BLT (AC RH .LE. E)
						; 7901	=0
U 1766, 1771,0612,0004,0000,0332,0010,0000	; 7902	UP:	VMA_ARX+BR,LOAD AR,J/UP1	;NOT CLEAR CORE
U 1767, 1770,0612,0000,0000,0332,7410,0000	; 7903		SKP P!S XCT,VMA_ARX+BR,LOAD AR	;DO NOT OPTIMIZE UNDER EXT ADDR
						; 7904	
						; 7905	;USE EVEN LOC'NS OF THIS BLOCK OF 4 IN SPECIAL "CLEAR CORE" CASE
						; 7906	
U 1770, 1774,3240,0003,0000,0022,1621,0107	; 7907	=00	AR_MEM,CALL,SR_BLT(DST),J/UP2	;GET THE WORD TO STORE IN ALL
U 1771, 1774,3240,0003,0000,0022,1621,0107	; 7908	UP1:	AR_MEM,CALL,SR_BLT(DST),J/UP2	;GET SOURCE WORD
U 1772, 1774,4001,0000,0000,0000,1621,0107	; 7909		CALL,SR_BLT(DST),J/UP2		;HERE TO STORE SAME SRC AGAIN
U 1773, 1771,0612,0004,0000,0332,0010,0000	; 7910		VMA_ARX+BR,LOAD AR,J/UP1	;HERE TO GET NEXT SRC
						; 7911	
U 1774, 2000,3711,0000,0000,0316,7010,0000	; 7912	UP2:	VMA_ARX,STORE,SKP INTRPT	;OK, GET DST ADDRESS
						; 7913	=0
U 2000, 2004,5122,0000,0000,0040,5310,0000	; 7914	UP3:	SKP ARX LT BRX,J/UP4		;CHECK FOR LAST TRANSFER
U 2001, 1751,4001,0003,0000,0002,0010,0000	; 7915		MEM_AR,J/BLTPF			;FINISH THIS, GO SERVE INTRPT
						; 7916	=0
U 2004, 0071,4001,0003,0000,0206,0010,0400	; 7917	UP4:	FIN STORE,I FETCH,J/NOP		;THAT'S ALL, FOLKS
						; 7918		MEM_AR,ARX_ARX+1,		;STORE DST,
U 2005, 0002,4001,0603,0000,0022,1603,0607	; 7919			SR_BLT(SRC),RETURN2	; CONTINUE
						; 7920	
						; 7921	;BLT CONTINUED - HERE FOR DOWNWARD BLT (AC RH .GT. E)
						; 7922	.IF/BACK.BLT
						; 7923	
						; 7924	DN1:	AR_MEM,SR_BLT(DST)		;WAIT FOR SOURCE DATA
						; 7925		VMA_ARX,STORE,SKP INTRPT	;OK, START DST REF
						; 7926	=0	SKP ARX LE BRX,J/DN3		;CHECK FOR END CONDITION
						; 7927		MEM_AR,J/BLTPF			;FINISH STORE, TAKE INTRPT
						; 7928	=0
						; 7929	DN3:	MEM_AR,ARX_ARX-1,		;NOT END, LOOP
						; 7930			SR_BLT(SRC),J/DOWN
						; 7931		FIN STORE,I FETCH,J/NOP		;END
						; 7932	.ENDIF/BACK.BLT
						; 7933	î; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 171
; DSK: UCODE; BLT 9	17:13:16 20-AUG-2018	STORING OF JPC

						; 7934	.TOC	"STORING OF JPC"
						; 7935	
						; 7936	.IF/JPC SUPPORT
						; 7937	
						; 7938	AOBJPC:					;HERE TO STORE JPC FOR AOBJN/AOBJP
						; 7939	SOJJPC:					;HERE FOR SOJ SERIES
						; 7940	AOJJPC:					;HERE FOR AOJ SERIES
						; 7941		AC0_AR,B DISP
						; 7942	=*1*000					;HERE FOR JUMP SERIES
						; 7943	JMPJPC:	GEN AR-1,SKP AR0,SIGNS DISP,J/JPCP	;LE
						; 7944		SKP AR NE,J/NJPCP			;E
						; 7945		SKP AR0,J/JPCP				;L
						; 7946		J/FINI					;-
						; 7947		GEN AR-1,SKP AR0,SIGNS DISP,J/NJPCP	;G
						; 7948		SKP AR NE,J/JPCP			;N
						; 7949		SKP AR0,J/NJPCP				;GE
						; 7950		AR_PC,SC_#,#/32.,SKP USER,J/JPCEX	;A
						; 7951	
						; 7952	=*1*110
						; 7953	JPCP:	NXT INSTR				;NOT JUMPING
						; 7954	JPCIFY:	AR_PC,SC_#,#/32.,SKP USER,J/JPCEX	;JUMPING
						; 7955	
						; 7956	;THIS IS LIKE STORAC, EXCEPT IT STORES THE JPC ALSO.
						; 7957	;CALLED WITH SKP USER, BECAUSE WRITING IN FM USES THE COND
						; 7958	;FIELD, WHICH MEANS JPCSTO CAN'T DO THE SKP USER ITSELF.
						; 7959	
						; 7960	=0
						; 7961	JPCSTO:	AC0_AR,AR_PC,SC_#,#/32.,J/JPCEX
						; 7962		AC0_AR,AR_PC,SC_#,#/32.,J/JPCUSR
						; 7963	
						; 7964	.IFNOT/JPC.RING
						; 7965	=*1***0
						; 7966	JPCEX:	XJPC_AR,NXT INSTR AFTER JPC
						; 7967	JPCUSR:	JPC_AR,NXT INSTR AFTER JPC
						; 7968	.IF/JPC.RING
						; 7969	;COME HERE WITH:	SKP USER,SC_#,#/32.
						; 7970	=*1***0
						; 7971	JPCEX:	AR_XJPC+1,J/JPCEX1
						; 7972	JPCUSR:	AR_JPC+1
						; 7973		JPC_AR,SH DISP,AR_PC
						; 7974	=*10000
						; 7975		JPC0_AR,NXT INSTR AFTER JPC
						; 7976		JPC1_AR,NXT INSTR AFTER JPC
						; 7977		JPC2_AR,NXT INSTR AFTER JPC
						; 7978		JPC3_AR,NXT INSTR AFTER JPC
						; 7979		JPC4_AR,NXT INSTR AFTER JPC
						; 7980		JPC5_AR,NXT INSTR AFTER JPC
						; 7981		JPC6_AR,NXT INSTR AFTER JPC
						; 7982		JPC7_AR,NXT INSTR AFTER JPC
						; 7983		JPC10_AR,NXT INSTR AFTER JPC
						; 7984		JPC11_AR,NXT INSTR AFTER JPC
						; 7985		JPC12_AR,NXT INSTR AFTER JPC
						; 7986		JPC13_AR,NXT INSTR AFTER JPC
						; 7987		JPC14_AR,NXT INSTR AFTER JPC
						; 7988		JPC15_AR,NXT INSTR AFTER JPC
						; 7989		JPC16_AR,NXT INSTR AFTER JPC
						; 7990		JPC17_AR,NXT INSTR AFTER JPC
						; 7991	
						; 7992	JPCEX1:	XJPC_AR,SH DISP,AR_PC
						; 7993	=*10000
						; 7994		XJPC0_AR,NXT INSTR AFTER JPC
						; 7995		XJPC1_AR,NXT INSTR AFTER JPC
						; 7996		XJPC2_AR,NXT INSTR AFTER JPC
						; 7997		XJPC3_AR,NXT INSTR AFTER JPC
						; 7998		XJPC4_AR,NXT INSTR AFTER JPC
						; 7999		XJPC5_AR,NXT INSTR AFTER JPC
						; 8000		XJPC6_AR,NXT INSTR AFTER JPC
						; 8001		XJPC7_AR,NXT INSTR AFTER JPC
						; 8002		XJPC10_AR,NXT INSTR AFTER JPC
						; 8003		XJPC11_AR,NXT INSTR AFTER JPC
						; 8004		XJPC12_AR,NXT INSTR AFTER JPC
						; 8005		XJPC13_AR,NXT INSTR AFTER JPC
						; 8006		XJPC14_AR,NXT INSTR AFTER JPC
						; 8007		XJPC15_AR,NXT INSTR AFTER JPC
						; 8008		XJPC16_AR,NXT INSTR AFTER JPC
						; 8009		XJPC17_AR,NXT INSTR AFTER JPC
						; 8010	.ENDIF/JPC.RING
						; 8011	.ENDIF/JPC SUPPORT
						; 8012	


; Number of Micro Words used:
;	D Words= 512
;	U Words= 1039

	END
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 172
; CROSS REFERENCE LISTING

(D) A				1469 #
	IMMED			1470 #	3110	3149	3348	3349	3440	3441	3491	3492	3505	3506	3507
				3508	3509	3510	3521	3522	3523	3524	3525	3526	3527	3528	3539
				3540	3541	3542	3543	3544	3545	3546	3557	3558	3559	3560	3561
				3562	3563	3564	3613	3614	3615	3616	3617	3618	3619	3620	3689
				3690	3691	3692	3693	3694	3695	3696	3708	3709	3710	3711	3712
				3713	3714	3715	3727	3728	3729	3730	3731	3732	3733	3734	3748
				3749	3763	3764	3998	4001	4074	4075	4076	4077	4113	4140	4141
				4142	4144	4145	4146	4147	4149	4150	4151	4152	4154	4155	4156
				4157	4162	4163	4164	4165	4167	4168	4169	4170	4172	4173	4174
				4175	4177	4178	4179	4180	4184	4185	4186	4187	4188	4189	4190
				4191	4192	4193	4194	4195	4196	4197	4198	4199	4201	4202	4203
				4204	4205	4206	4207	4208	4222	4223	4228	4229	4249	4250	4255
				4256	4346	4350	4429	4479	4480	4481	4482	4483	4484	4485	4489
				4718	4750	4811	4816	5082	5092	5158	5187	5345	5370	5955	5957
				5958	5959	5960	5968	5969	5970	5971	5977	5979	5980	5981	5982
				5986	5987	5988	5989	5990	5991	5992	5993	6007	6008	6009	6010
				6016	6017	6018	6019	6020	6021	6029	6031	6032	6040	6042	6043
	IMMED-PF		1471 #	3106	3115	3120	3125	3164	3169	3174	3179	3184	3189	3194
				3199	3206	3211	3216	3221	3226	3231	3236	3241	3346	3347	3357
				3367	3377	3382	3392	3399	3409	3419	3429	3438	3439	3450	3460
				3470	3480	3489	3490	3503	3504	3512	3513	4693	4705
	RD-P-WR			1476 #	3112	3117	3122	3127	3148	3165	3166	3170	3171	3176	3181
				3186	3191	3196	3201	3207	3208	3212	3213	3218	3223	3228	3233
				3238	3243	3358	3359	3368	3369	3378	3379	3383	3384	3400	3401
				3410	3411	3420	3421	3430	3431	3451	3452	3461	3462	3471	3472
				3481	3482	3656	3657	3658	3659	3660	3661	3662	3663	3671	3672
				3673	3674	3675	3676	3677	3678	4694	4695	4706	4707	5311
	RD-WR			1475 #	4719	4720	4751	4752	4812	4813	4817	4818	5078	5079	5083
				5084	5088	5089	5093	5094	5154	5155	5159	5160	5183	5184	5188
				5189	5718	5720	5975	6025	6027	6036	6038
	READ			1473 #	3306	3307	3514	3515	3516	3517	3518	3519	3530	3531	3532
				3533	3534	3535	3536	3537	3548	3549	3550	3551	3552	3553	3554
				3555	3566	3567	3568	3569	3570	3571	3572	3573	3622	3623	3624
				3625	3626	3627	3628	3629	3640	3641	3642	3643	3644	3645	3646
				3647	3912	3999	4234	4235	4241	4428	4717	4749	4810	4815	4950
				4951	4952	4953	5076	5077	5081	5086	5087	5091	5152	5153	5157
				5181	5182	5186	5310	5346	5366	5373	5374	5558	5559	5560	5561
				5719	5721	5956	5966	5967	5978	6001	6003	6028	6039
	READ-PF			1474 #	3105	3114	3119	3124	3163	3168	3173	3178	3183	3188	3193
				3198	3205	3210	3215	3220	3225	3230	3235	3240	3356	3366	3376
				3381	3391	3398	3408	3418	3428	3449	3459	3469	3479	4692	4704
	WR-TST			1472 #	3116	3121	3126	3175	3180	3185	3190	3195	3200	3217	3222
				3227	3232	3237	3242	3326	3327	3393	3394	4000	4242	5953	5954
				5964	5965	5976	5999	6000	6014	6015	6026	6030	6037	6041
(U) AD				874 #
	A			915 #	2995	2999	3340	3651	3809	3861	3875	3978	4017	4039	4049
				4326	4419	4450	4452	4460	4462	4468	4534	4534	4549	4550	4551
				4551	4554	4556	4557	4575	4577	4580	4582	4589	4589	4590	4590
				4592	4594	4594	4606	4780	4782	4792	4800	4936	4937	4938	4939
				4965	4985	4991	5006	5053	5215	5215	5227	5288	5414	5420	5424
				5452	5455	5468	5470	5488	5568	5594	5603	5641	5644	5656	5658
				5677	5679	5684	5688	5697	5799	5801	5846	5876	5897	5909	5941
				6074	6095	6098	6100	6102	6113	6115	6121	6140	6146	6165	6199
				6208	6293	6295	6301	6325	6343	6377	6381	6393	6404	6405	6406
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 173
; CROSS REFERENCE LISTING

				6419	6469	6506	6507	6508	6532	6533	6536	6547	6552	6581	6592
				6598	6618	6682	6696	6697	6698	6873	6873	6876	6876	7092	7107
				7112	7117	7150	7912
	A*2			883 #	5525	5681	5704	6616
	A*2+1			884 #
	A+1			879 #	3667	3801	4013	4082	4087	4103	4321	4512	4513	5398	5682
				5692	5706	5780	5785	6075	6350	6561	6585	6625	6731	7104	7889
				7918
	A+B			887 #	2997	3001	3742	4364	4451	4453	4466	4467	4470	4699	4783
				4794	4796	4871	4876	4901	4904	4905	4908	4918	4932	4935	4972
				4984	5045	5146	5258	5261	5303	5322	5425	5513	5522	5606	5633
				5800	5802	5871	5877	5896	5902	5935	5937	5940	6355	6376	6445
				6574	6586	6890	7148	7896	7902	7903	7910
	A+B+1			888 #	3720	3754	4010	4014	4609	6515	7891
	A+XCRY			880 #	4665	4741	6930
	A-1			898 #	3682	4043	4062	4508	4515	5900	6562	6573
	A-B			892 #	3143	3318	3334	4510	4712	4785	4787	4798	4832	4868	4870
				4873	4880	4885	4890	4902	4903	4906	4907	4921	4933	4934	4974
				5025	5028	5043	5059	5064	5123	5257	5263	5282	5299	5301	5336
				5340	5451	5540	5542	5573	5695	5711	5893	5936	5938	6888	7882
				7914
	A-B-1			891 #
	AND			914 #	3363	4759	4993
	ANDC			904 #	3425
	ANDCA			908 #	3388	3605	4366	5461	5710
	ANDCB			913 #	3373	3878	4368	5527	6897	6899	6926
	B			910 #	2945	2949	2989	3004	3005	3028	3034	3040	3046	3052	3154
				3157	3252	3254	3257	3260	3263	3267	3316	3317	3332	3333	3701
				3810	3841	3860	3871	3970	3972	3974	3977	3984	3985	3987	3988
				3990	3991	4020	4042	4046	4047	4064	4065	4067	4096	4098	4265
				4282	4327	4332	4436	4439	4447	4456	4456	4498	4501	4525	4525
				4545	4546	4547	4566	4569	4570	4573	4608	4643	4645	4653	4661
				4663	4667	4673	4676	4685	4711	4734	4757	4823	4827	4834	4839
				4923	4960	4962	4966	4990	5003	5004	5007	5014	5016	5018	5019
				5021	5023	5023	5032	5033	5035	5052	5055	5056	5058	5062	5129
				5131	5172	5175	5202	5236	5238	5244	5246	5272	5274	5318	5328
				5360	5415	5457	5459	5466	5474	5476	5479	5512	5521	5571	5575
				5587	5596	5596	5605	5618	5618	5634	5653	5654	5661	5665	5689
				5708	5742	5761	5782	5783	5804	5814	5816	5839	5839	5865	5907
				5910	6056	6087	6126	6131	6158	6177	6211	6296	6312	6313	6363
				6409	6467	6509	6530	6560	6568	6570	6584	6590	6591	6595	6626
				6664	6665	6671	6673	6693	6700	6733	6735	6737	6739	6741	6746
				6755	6755	6880	6881	6883	6884	6889	6895	6896	6907	6917	6918
				6925	6927	6933	6936	6955	6958	6964	6967	6968	6970	6985	7026
				7075	7719	7880	7907	7908
	CRY A EQ -1		917 #
	CRY A GE B		920 #	5214	5861
	CRY A#0			919 #	5449	5674	5894
	CRY A.B#0		918 #	3602	3877	6062	6064
	EQV			906 #	3435
	OR			911 #	3415	3607	6207	6337	6932
	ORC			901 #	3486
	ORCA			902 #	3476
	ORCB			907 #	3456
	ORCB+1			890 #	3906	5281	5546	6067
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 174
; CROSS REFERENCE LISTING

	SETCA			900 #	3466	3594	3597	5675
	SETCB			905 #	3445	4920	5027	5338	5693	5693
	XCRY-1			895 #	3063	3093	4274	4648	4649	4660	4745	4846	4849	4995	5060
				5137	5138	5319	5321	5381	5417	5589	5592
	XOR			909 #	3405	3606	3633	5578	6607	6740
	0S			912 #	2915	3284	3298	3320	3337	3353	3873	3895	3943	4524	4595
				4671	4776	4776	4805	4976	4976	4983	5030	5120	5122	5170	5228
				5285	5289	5315	5316	5422	5502	5538	5552	5630	5630	5700	5700
				5736	5819	5820	5866	5866	5906	5933	6299	6317	6320	6323	6327
				6332	6335	6352	6365	6382	6385	6394	6402	6424	6447	6454	6456
				6458	6460	6531	6546	6580	6602	6608	6615	6694
	1S			903 #	2939	3011	3278	3285	3292	3299	3496	5505	5508
(U) ADA				924 #
	AR			925 #	3363	3373	3388	3405	3415	3425	3435	3445	3456	3466	3476
				3486	3602	3605	3606	3607	3633	3651	3667	3682	3861	3877	3878
				3978	4017	4039	4043	4062	4364	4366	4368	4419	4450	4451	4452
				4453	4466	4467	4468	4470	4512	4534	4549	4551	4556	4577	4589
				4590	4594	4665	4699	4712	4741	4759	4780	4782	4783	4785	4787
				4792	4794	4796	4798	4800	4868	4871	4876	4885	4901	4902	4903
				4904	4905	4906	4907	4908	4918	4921	4932	4933	4934	4935	4972
				4974	4984	4993	5043	5045	5146	5227	5257	5258	5261	5263	5301
				5303	5322	5425	5452	5455	5488	5513	5522	5525	5527	5578	5606
				5633	5644	5677	5679	5681	5682	5684	5692	5697	5704	5710	5780
				5785	5871	5877	5894	5896	5902	5935	5936	5937	5938	5940	6062
				6064	6074	6075	6095	6098	6100	6102	6113	6115	6121	6140	6146
				6165	6199	6207	6208	6293	6295	6325	6343	6355	6376	6381	6393
				6404	6405	6406	6419	6445	6506	6507	6508	6547	6552	6561	6562
				6573	6574	6585	6586	6607	6618	6625	6696	6873	6876	6897	6899
				6930	7107	7882	7896
	ARX			926 #	2995	2997	2999	3001	4049	4460	4462	5215	5449	5799	5800
				5801	5802	5909	6592	6740	6888	6890	6926	6932	7148	7150	7902
				7903	7910	7912
	MQ			927 #	3742	4554	4580	4592	4606	4936	4937	4938	4939	4985	4991
				5006	5053	5288	5424	5470	5641	5656	5658	5674	5675	5846	5876
				5941	6301	6377	6532	6533	6536	6581	6598	6616	7112	7889
	PC			928 #	3809	3875	4013	4082	4087	4103	4321	4326	6682	6698	7092
				7117
(U) ADA EN			929 #
	EN			930 #	3340	4508	4510	4513	4515	4534	4550	4551	4557	4575	4582
				4589	4590	4594	4965	5215	5414	5420	5468	5568	5594	5603	5688
				5897	5900	6337	6469	6697	6873	6876	7914	7918
	0S			931 #	3143	3318	3334	3720	3754	3801	3906	4010	4014	4609	4832
				4870	4873	4880	4890	5025	5028	5059	5064	5123	5214	5281	5282
				5299	5336	5340	5398	5451	5461	5540	5542	5546	5573	5695	5706
				5711	5861	5893	6067	6350	6515	6731	7104	7891
(U) ADB				933 #
	AR*4			937 #	3906	3985	3988	3991	4510	4870	4873	5014	5123	5175	5281
				5299	5336	5451	5457	5459	5461	5466	5479	5540	5542	5546	5573
				5711	6296	6509	6530	6568	6584	6664	6665	6733	6735	6737	6739
				6936
	BR			936 #	3143	3318	3334	3841	3860	3871	3877	3878	4020	4067	4265
				4282	4327	4439	4447	4466	4653	4663	4667	4673	4676	4685	4712
				4759	4783	4787	4794	4798	4832	4834	4868	4871	4876	4880	4885
				4890	4901	4902	4903	4904	4905	4906	4907	4908	4918	4921	4932
				4933	4934	4935	4972	4974	4984	4993	5003	5007	5023	5023	5025
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 175
; CROSS REFERENCE LISTING

				5027	5028	5033	5035	5043	5045	5058	5059	5062	5064	5214	5257
				5258	5261	5263	5272	5274	5282	5322	5415	5425	5512	5513	5521
				5522	5527	5596	5596	5606	5618	5618	5633	5689	5693	5693	5695
				5708	5710	5742	5782	5783	5861	5893	5935	5936	5937	5938	5940
				6062	6064	6067	6087	6126	6131	6158	6177	6207	6211	6312	6313
				6337	6355	6363	6376	6409	6445	6574	6586	6590	6591	6595	6607
				6626	6693	6746	6889	6890	6907	6917	7148	7882	7891	7896	7902
				7903	7910	7914
	BR*2			935 #	4608	4609	4661	4785	4796	5019	5131	5146	5301	5303	5328
				5474	5476	6700
	FM			934 #	2945	2949	2989	2997	3001	3004	3005	3028	3034	3040	3046
				3052	3154	3157	3252	3254	3257	3260	3263	3267	3316	3317	3332
				3333	3363	3373	3388	3405	3415	3425	3435	3445	3456	3476	3486
				3602	3605	3606	3607	3633	3701	3720	3742	3754	3810	3970	3972
				3974	3977	3984	3987	3990	4010	4014	4042	4046	4047	4064	4065
				4096	4098	4332	4364	4366	4368	4436	4451	4453	4456	4456	4467
				4470	4498	4501	4525	4525	4545	4546	4547	4566	4569	4570	4573
				4643	4645	4699	4711	4734	4757	4823	4827	4839	4920	4923	4960
				4962	4966	4990	5004	5016	5018	5021	5032	5052	5055	5056	5129
				5172	5202	5236	5238	5244	5246	5318	5338	5340	5360	5571	5575
				5578	5587	5605	5634	5653	5654	5661	5665	5761	5800	5802	5804
				5814	5816	5839	5839	5865	5871	5877	5896	5902	5907	5910	6056
				6467	6515	6560	6570	6671	6673	6740	6741	6755	6755	6880	6881
				6883	6884	6888	6895	6896	6897	6899	6918	6925	6926	6927	6932
				6933	6955	6958	6964	6967	6968	6970	6985	7026	7075	7719	7880
				7907	7908
(U) AR				939 #
	AD			943 #	2915	2939	2995	2997	3011	3028	3063	3093	3143	3154	3157
				3254	3257	3263	3284	3285	3298	3299	3318	3320	3334	3337	3353
				3363	3373	3388	3405	3415	3425	3435	3445	3456	3466	3476	3486
				3496	3605	3606	3607	3667	3682	3701	3720	3742	3754	3801	3809
				3810	3875	3878	3895	3943	3970	3972	3974	4013	4042	4043	4062
				4082	4087	4096	4098	4103	4321	4364	4436	4439	4447	4451	4460
				4462	4466	4467	4498	4501	4524	4525	4547	4554	4569	4570	4573
				4580	4592	4606	4643	4645	4648	4649	4660	4661	4663	4676	4699
				4711	4712	4734	4745	4757	4776	4827	4839	4846	4849	4880	4890
				4905	4906	4907	4908	4918	4921	4936	4937	4938	4939	4966	4972
				4974	4976	4984	4985	4990	4991	4995	5003	5006	5007	5016	5021
				5025	5027	5028	5032	5033	5035	5052	5053	5055	5056	5058	5059
				5060	5062	5064	5129	5131	5137	5138	5172	5202	5236	5238	5244
				5246	5272	5274	5282	5285	5288	5289	5318	5319	5321	5322	5360
				5381	5415	5417	5422	5424	5425	5457	5474	5502	5512	5513	5521
				5522	5538	5552	5575	5587	5589	5592	5596	5605	5606	5618	5630
				5633	5634	5641	5656	5658	5661	5665	5675	5682	5689	5692	5693
				5695	5700	5736	5742	5761	5782	5783	5785	5819	5820	5846	5865
				5866	5871	5876	5877	5896	5902	5906	5907	5910	5933	5937	5938
				5940	5941	6075	6087	6126	6131	6158	6177	6211	6299	6312	6317
				6320	6327	6332	6350	6352	6355	6363	6365	6376	6382	6385	6394
				6402	6409	6424	6445	6447	6454	6456	6458	6460	6509	6530	6531
				6546	6561	6562	6568	6580	6581	6584	6598	6602	6608	6615	6671
				6673	6693	6694	6746	6755	6889	6897	6899	6907	6917	6931	6955
				7075	7092	7104	7112	7117	7148	7150	7880	7882	7889	7896
	AD*.25			948 #	3985	3988	3991	4782	4783	4785	4787	4794	4796	4798	4800
				4870	4873	5123	5146	5215	5227	5299	5328	5336	5451	5452	5470
				5488	5525	5540	5542	5573	5677	5679	5681	5697	5704	5711	6664
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 176
; CROSS REFERENCE LISTING

				6665	6731
	AD*2			946 #	4512	4545	4780	4792	4823	4868	4871	4876	4885	4901	4902
				4903	4904	4932	4933	4934	4935	4962	5043	5045	5257	5258	5261
				5263	5455	5459	5462	5466	5476	5479	5571	5653	5654	5684	5909
				5935	5936	6419	6616
	ADX			947 #	4515	4534	4550	4551	4557	4575	4582	4589	4590	4594	4673
				4832	4834	5023	5420	5468	5594	5603	5688	5897	5900	6207	6590
				6591	6595	6626	6873	6876	6936
	AR			940 #	3252	3264	3277	3278	4363	6054	6163	6197	6323	6391
	ARMM			941 #	3100	5314	5526	5705	6156	6159	6300	6304	6534	6601	6630
				6915	6918	6925
	CACHE			942 #	6193
	EBUS			944 #	2918	2920	2966	2973	3945	4325	6098	6153	6168	6169	6202
				6204	6206	6311	6319	6329	6334	6368	6369	6370	6371	6384	6386
				6396	6418	6427	6428	6429	6430	6676	6686
	SH			945 #	3094	3133	3260	3267	3268	3291	3292	3338	3597	3600	3783
				3860	3865	3873	3979	4021	4030	4032	4066	4099	4267	4284	4327
				4338	4505	4507	4532	4537	4558	4583	4595	4596	4667	4671	4684
				4685	4744	5001	5002	5004	5014	5017	5019	5061	5118	5143	5169
				5198	5213	5449	5544	5599	5601	5602	5685	5687	5701	5708	5827
				5849	5851	5874	6139	6170	6293	6295	6313	6338	6404	6405	6448
				6600	6603	6666	6697	6699	6880	6881	6883	6884	6908	6909	6910
				6919	6958	6964	6967	6968	7106	7881	7897
(U) AR CTL			1310 #
	AR0-8 LOAD		1311 #	5526	5705
	AR9-17 LOAD		1312 #
	ARL LOAD		1314 #
	ARR LOAD		1313 #	6156
(U) AR0-8			1285 #
	LOAD			1286 #	4509	5119	5122	5130	5170	5173	5193	5199	5280	5284	5298
				5316	5332	5333	5337	5339	5361	5545	5565	5617	5638	5642	5739
				5748	5757	5785	5864	5870	5911	5918	6315	6634	6687	6695	6696
(U) ARL				1300 #
	AD			1304 #	3252	3260	3267	3278	3292	4327	4498	4580	4827	5288	5319
				5360	5596	5656	5658	5877	6313
	AD*.25			1309 #
	AD*2			1307 #	4823	4877	4886	4962
	ADX			1308 #	6337	6697
	ARL			1301 #	3157	3254	3268	3298	3299	6170	6207	6293
	ARMM			1302 #	4509	5119	5122	5130	5170	5173	5193	5199	5280	5284	5298
				5316	5332	5333	5337	5339	5361	5545	5565	5617	5638	5642	5739
				5748	5757	5785	5864	5870	5911	5918	6315	6634	6687	6695	6696
	CACHE			1303 #
	EBUS			1305 #
	SH			1306 #	3257	3263	3264	3284	3285	4103	4363	4505	5143	5449	5599
				6054	6158	6163	6197	6323	6388	6391	6904	7150	7896
(U) ARMM			1016 #
	EXP_SIGN		1018 #	5119	5122	5130	5170	5173	5193	5199	5298	5316	5361	5565
				5617	5638
	SCAD EXP		1019 #	5280	5284	5332	5333	5337	5339	5526	5545	5642	5705	5918
				6534	6601	6630	6695	6696	6915
	SCAD POS		1020 #	4509	5739	5748	5757	5785	5864	5870	5911	6315	6634	6687
				6918	6925
	#			1017 #	3100	5314	6159	6300	6304
(U) ARX				949 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 177
; CROSS REFERENCE LISTING

	AD			952 #	2945	2949	3332	3333	3802	3873	4010	4014	4274	4365	4419
				4525	4534	4546	4549	4551	4556	4566	4577	4589	4590	4594	4595
				4653	4671	4776	4960	4976	5004	5018	5019	5023	5030	5120	5122
				5170	5228	5315	5316	5321	5338	5340	5505	5508	5630	5700	5706
				5866	6293	6323	6335	6696	6698	6755	6873	6876	6880	6881	6883
				6884	6888	6918	6925	6958	6964	6967	6968	7026	7105
	ADX			956 #	3318	3334	3860	3871	4265	4282	4508	4513	4608	4609	4661
				4667	4685	4905	4906	4907	4908	4918	4921	4972	4974	4984	5025
				5027	5028	5033	5035	5058	5059	5457	5474	5512	5513	5527	5596
				5606	5618	5633	5682	5693	5695	5708	5710	5893	6376	6445	6731
				6733	7918
	ADX*.25			957 #	3985	3988	3991	4782	4783	4785	4787	4794	4796	4798	4800
				4870	4873	5146	5215	5227	5299	5398	5451	5452	5488	5542	5573
				5677	5679	5681	5697	5704	5711	6664	6665
	ADX*2			955 #	3340	4510	4780	4792	4869	4872	4876	4885	4901	4902	4903
				4904	4932	4933	4934	4935	4965	5014	5043	5045	5062	5064	5257
				5258	5261	5263	5414	5455	5459	5462	5466	5476	5479	5568	5684
				5935	5936	6469	6735	6737	6739
	CACHE			951 #
	MQ			953 #	4576	4582	4676	4919	4922	5002	5137	5143	5595	5599	5602
				5605	5661	5687	5689	5894
	SH			954 #	3154	3156	3899	3959	4096	4338	4416	4436	4554	4580	4592
				4643	4645	4648	4649	4663	4679	4832	4834	4839	4846	4849	4966
				5003	5007	5015	5021	5032	5138	5140	5141	5238	5319	5380	5417
				5424	5470	5510	5587	5589	5592	5665	5751	5760	5781	5819	5820
				5846	5849	5919	5933	5941	6169	6203	6205	6303	6305	6320	6332
				6336	6385	6402	6424	6454	6456	6458	6460	6546	6581	6583	6602
				6616	6635	7092	7879
(D) B				1478 #	3110	3148	3306	3307	3999	4350	4479	4480	4481	4483	4950
				4951	4952	5558	5559	5560	5561	5954	5956	5957	5958	5965	5967
				5968	5969	5976	5978	5979	5980	5999	6000	6001	6003	6007	6008
				6014	6015	6018	6019	6026	6028	6029	6030	6037	6039	6040	6041
	AC			1482 #	3105	3106	3114	3115	3119	3120	3124	3125	3163	3164	3168
				3169	3173	3174	3178	3179	3183	3184	3188	3189	3193	3194	3198
				3199	3205	3206	3210	3211	3215	3216	3220	3221	3225	3226	3230
				3231	3235	3236	3240	3241	3346	3347	3356	3357	3366	3367	3376
				3377	3381	3382	3398	3399	3408	3409	3418	3419	3428	3429	3438
				3439	3449	3450	3459	3460	3469	3470	3479	3480	3489	3490	4692
				4693	4704	4705	4717	4718
	BOTH			1484 #	3349	3359	3369	3379	3384	3401	3411	3421	3431	3441	3452
				3462	3472	3482	3492	4695	4707	4720
	DBL AC			1479 #	4749	4750	4810	4811	4815	4816
	DBL BOTH		1480 #	4752	4813	4818
	MEM			1483 #	3116	3121	3126	3165	3170	3175	3180	3185	3190	3195	3200
				3207	3212	3217	3222	3227	3232	3237	3242	3348	3358	3368	3378
				3383	3393	3394	3400	3410	3420	3430	3440	3451	3461	3471	3481
				3491	4694	4706	4719	4751	4812	4817	5964
	SELF			1481 #	3112	3117	3122	3127	3166	3171	3176	3181	3186	3191	3196
				3201	3208	3213	3218	3223	3228	3233	3238	3243
	SJC-			1486 #	3613	3622	3640	3656	3671	3689	3708	3727
	SJCA			1490 #	3617	3626	3644	3660	3675	3693	3712	3731
	SJCE			1488 #	3615	3624	3642	3658	3673	3691	3710	3729
	SJCG			1493 #	3620	3629	3647	3663	3678	3696	3715	3734
	SJCGE			1491 #	3618	3627	3645	3661	3676	3694	3713	3732	3748
	SJCL			1487 #	3614	3623	3641	3657	3672	3690	3709	3728	3749
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 178
; CROSS REFERENCE LISTING

	SJCLE			1489 #	3616	3625	3643	3659	3674	3692	3711	3730
	SJCN			1492 #	3619	3628	3646	3662	3677	3695	3714	3733
(D) B0				1494 #	5076	5077	5078	5079	5082	5086	5087	5088	5089	5092
	CRY0(0)			1495 #	3505	3506	3507	3508	3514	3515	3516	3517	3523	3524	3525
				3526	3532	3533	3534	3535	3541	3542	3543	3544	3550	3551	3552
				3553	3559	3560	3561	3562	3568	3569	3570	3571	5959	5970	5975
				5981	6009	6020	6025	6027	6031	6036	6038	6042
	CRY0(1)			1496 #	3509	3510	3518	3519	3521	3522	3527	3528	3530	3531	3536
				3537	3539	3540	3545	3546	3548	3549	3554	3555	3557	3558	3563
				3564	3566	3567	3572	3573	3764	5960	5971	5982	6010	6021	6032
				6043
(D) B1-2			1497 #	3505	3506	3507	3508	3509	3510	3514	3515	3516	3517	3518
				3519	3521	3522	3523	3524	3525	3526	3527	3528	3530	3531	3532
				3533	3534	3535	3536	3537	3539	3540	3541	3542	3543	3544	3545
				3546	3548	3549	3550	3551	3552	3553	3554	3555	3557	3558	3559
				3560	3561	3562	3563	3564	3566	3567	3568	3569	3570	3571	3572
				3573	3764	5959	5960	5970	5971	5975	5981	5982	6009	6010	6020
				6021	6025	6027	6031	6032	6036	6038	6042	6043
	AC			1498 #	5076	5081	5082	5086	5091	5092	5152	5157	5158	5181	5182
				5186	5187	5345	5374
	BOTH			1500 #	5079	5084	5089	5094	5155	5160	5184	5189
	MEM			1499 #	5078	5083	5088	5093	5154	5159	5183	5188
(U) BR				958 #
	AR			959 #	2885	3028	3034	3040	3046	3052	3100	3136	3139	3341	3780
				3783	3790	3801	3875	4013	4098	4416	4436	4439	4648	4660	4661
				4711	4776	4822	4826	4919	4922	4962	5001	5017	5019	5023	5025
				5027	5028	5033	5035	5058	5059	5129	5131	5201	5236	5318	5326
				5414	5415	5466	5479	5502	5505	5508	5512	5513	5571	5575	5579
				5618	5675	5687	5735	5739	5742	5748	5757	5874	5897	5900	6054
				6074	6137	6147	6163	6166	6197	6201	6290	6317	6323	6327	6352
				6380	6382	6391	6394	6463	6465	6601	6693	6889	6892	6967	6968
				6985	7879	7889
(U) BRX				960 #
	ARX			961 #	2938	3341	3801	4440	4448	4605	4653	4660	4663	4676	4776
				4839	4846	4849	4880	4881	4889	4890	4919	4922	4966	5015	5023
				5025	5027	5028	5033	5035	5058	5059	5129	5201	5236	5318	5415
				5466	5479	5502	5505	5508	5512	5513	5571	5575	5579	5618	5675
				5706	5864	5903	6205	6335	6463	6465	6582	6623	7879
(U) CALL			1283 #
	CALL			1284 #	3317	3333	4824	4827	4877	4886	4964	4983	5174	5320	5567
				5657	5659	5739	5749	5758	5864	5870	6163	6198	6294	6324	6375
				6392	6444	6567	6634
(U) CLR				1287 #
	AR			1292 #	4577
	AR+ARX			1293 #
	AR+ARX+MQ		1296 #	5486	5860
	AR+MQ			1294 #
	ARL			1290 #	3277	3291	4099	4440	4447	4467	6398	6872	7881
	ARL+ARX			1297 #	5898	5901	6374	6443
	ARL+ARX+MQ		1298 #
	ARR			1291 #	4509	6337	6904
	ARR+MQ			1299 #
	ARX			1289 #	4498	5450
	ARX+MQ			1295 #	4504	4822	4826	5193	5199	5287	5359	5878
	MQ			1288 #	3317	3333	4566	4580	4964	5140	5141	5144	5565	5597	5600
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 179
; CROSS REFERENCE LISTING

				5657	5659	5870
(U) COND			1106 #
	AD FLAGS		1120 #	3143	3318	3334	3667	3682	3720	3742	4699	4712	4972	4974
	AR CLR			1112 #	5414	5505	5508
	ARL IND			1114 #	3157	3252	3254	3257	3260	3263	3264	3267	3268	3277	3278
				3284	3285	3291	3292	3298	3299	4363	4467	5785	6054	6170	6207
				6313	6872	6904	6904	7150	7896
	ARX CLR			1113 #	4569	4673	4735	4756	5415	5420	5469	5521	5522	5604	5688
				5907	6350	6598	6895	6896
	DIAG FUNC		1125 #	2966	2973	3861	3945	3978	4325	4326	6146	6153	6165	6168
				6169	6199	6202	6204	6206	6295	6311	6319	6325	6329	6334	6368
				6369	6370	6371	6381	6384	6386	6393	6396	6404	6405	6406	6418
				6427	6428	6429	6430	6676	6686	7107
	EBOX STATE		1126 #	2917	2938	6422	6433	6664	6665	6971	7074	7128	7133
	EBUS CTL		1127 #	2943	2971	2972	2976	2977	3860	3865	3946	3979	4329	6058
				6088	6096	6099	6102	6111	6113	6132	6208	6212	6336	6348	6376
				6417	6421	6431	6570	6580	6615	6668	6691	7106	7108
	FE SHRT			1119 #
	FM WRITE		1117 #	3063	3068	3093	3095	3320	3986	3989	3992	4049	4066	4503
				4539	4558	4583	4595	4989	4995	5002	5006	5009	5014	5030	5049
				5050	5060	5062	5064	5287	5325	5538	5594	5602	5656	5658	5708
				5735	5753	5866	5874	5876	5892	5906	6505	6666	6667	6684	6692
				6693	6694	6699	6707	6731	6919	7094	7113	7151	7898
	LD AR0-8		1109 #	3100	5314	6159	6300	6304	6534	6601	6630	6915	6918	6925
	LD AR18-35		1111 #
	LD AR9-17		1110 #
	LD VMA HELD		1140 #
	LOAD IR			1121 #	2945	2949	2989	4419	4439	4447
	MBOX CTL		1128 #	6292	6356	6358	6732	6734	6736	6738	6744	6745	6930	6936
				7132
	PCF_#			1118 #	2978	3846	3847	3848	4026	4031	4046	4064	4669	4745	4762
				4830	4997	5206	5242	5329	5413	5669	5796	6078	6079
	REG CTL			1115 #	4780	4792	4960	5526	5526	5684	5697	5705	5705	5705	6156
	SEL VMA			1124 #	6682	6698	7092
	SPEC INSTR		1122 #	2913	2915	2985	3895	3902	3905	4416	4437	6432	6447	6501
				6984	7116
	SR_#			1123 #	3080	3087	3094	3836	4065	4332	5035	5055	5111	5113	5164
				5165	5194	5227	5244	5246	5262	5264	5451	5536	5540	5550	5552
				5654	5676	5700	5710	7066	7148	7897	7907	7908	7909	7919
	VMA DEC			1138 #	6446
	VMA INC			1139 #	3313	3337	3959	3964	3970	3971	3973	3983	3984	3987	4090
				4101	4321	4323	4963	5018	5566	6193	6448	6467	6609	7118	7125
	VMA_#			1133 #	4267	4284	4285	6420	6455	6457	6459	6461	7073
	VMA_#+AR32-35		1136 #
	VMA_#+MODE		1135 #	4330
	VMA_#+PI*2		1137 #	6503	6504	6510	6514
	VMA_#+TRAP		1134 #	2967
(U) DIAG FUNC			1432 #	2966	2973
	CONI APR(L)		1451 #	6169
	CONI APR(R)		1447 #	6168
	CONI MTR		1457 #	6396
	CONI PAG		1460 #	6329
	CONI PI(L)		1446 #	6206
	CONI PI(PAR)		1459 #	6204
	CONI PI(R)		1445 #	6202
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 180
; CROSS REFERENCE LISTING

	CONO APR		1438 #	6165
	CONO MTR		1436 #	6393
	CONO PAG		1440 #	6325
	CONO PI			1439 #	3861	6199	7107
	CONO TIM		1437 #	6381
	DATAI APR		1453 #	6153
	DATAI PAG(L)		1449 #	4325	6311
	DATAO APR		1441 #	3978	6146
	DATAO PAG		1442 #	6295
	LD AC BLKS		1443 #
	LD PA LEFT		1434 #	6404	6406
	LD PA RIGHT		1435 #	6405
	LD PCS+CWSX		1444 #	4326
	RD CACHE CNT		1454 #	6371	6430
	RD EBOX CNT		1452 #	6370	6429
	RD EBUS REG		1461 #	3945	6319	6334	6676	6686
	RD INTRVL		1455 #	6384
	RD MTR REQ		1458 #	6418
	RD PERF CNT		1450 #	6369	6428
	RD PERIOD		1456 #	6386
	RD TIME			1448 #	6368	6427
	.5 USEC			1433 #
(U) DISP			1145 #
	BYTE			1158 #	2914	3902	5280	5283	5545	5748	5757	6051	6357
	DIAG			1146 #
	DIV			1155 #	4868	4871	4876	4885	4901	4902	4903	4904	4905	4906	4907
				4908	4932	4933	4934	4935	5257	5258	5260	5263	5935	5936	5937
				5938
	DRAM A RD		1148 #	2995	2997	4450	4451	4460	4462	4466
	DRAM B			1157 #	3133	3142	3252	3254	3257	3260	3264	3268	3277	3278	3284
				3285	3291	3292	3298	3299	3313	3353	3363	3373	3388	3405	3415
				3425	3435	3445	3456	3466	3476	3486	3496	3595	3598	3602	3946
				4030	4536	4654	4674	4678	4699	4712	4744	4761	4833	4835	4967
				5111	5113	5118	5536	5540	5568	6058	6074	6208	6338	6366	6374
	DRAM J			1147 #	3029	3035	3041	3047	3053
	EA MOD			1160 #	2939	3011	3783	3866	4441	4459	4463	5797	5805
	EA TYPE			1161 #	4456
	MUL			1154 #	4777	4782	4784	4786	4788	4795	4797	4799	4800	4805	4983
	NICOND			1152 #	3068	3087	3095	5009	7061
	NORM			1159 #	5147	5175	5215	5227	5451	5453	5467	5472	5480	5489	5514
				5522	5607	5644	5662	5682	5690	5694	5695
	PG FAIL			1150 #	6668	6691
	RETURN			1149 #	3341	4338	4606	4780	4792	4878	4880	4881	4887	4889	4890
				4920	4923	4936	4937	4938	4939	5302	5304	5621	5623	5779	5782
				5783	5786	5799	5800	5827	5828	5842	5851	5942	6103	6116	6128
				6132	6321	6448	6469	6603	6608	6971	7719	7898	7919
	SH0-3			1153 #	2967	3836	4605	6424	6443	6501	6531	6567	6583	6875	6878
				6905
	SIGNS			1156 #	4841	5034	5036	6700	6872
	SR			1151 #	5055	5056	5061	5245	5247	5454	5456	5458	5460	5475	5477
				5478	5487	5506	5510	5526	5705	5806	5816	6692	6986	7151
(U) EBUS CTL			1416 #	4329	6111
	DATAI			1430 #	6120	6580	6615
	DATAO			1429 #	6121	6570
	EBUS DEMAND		1420 #	6096
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 181
; CROSS REFERENCE LISTING

	EBUS NODEMAND		1421 #	6099
	GRAB EEBUS		1417 #	2943	6132	6417	6668
	IO INIT			1426 #	6113	6116
	REL EBUS		1419 #	3865	6102	6208	7108
	REL EEBUS		1431 #	2971	2972	2976	2977	3946	3979	6058	6336	6348	6376	6421
				6431	6691
	REQ EBUS		1418 #	3860	6088	6212	7106
(U) EXP TST			1315 #
	AR_EXP			1316 #	5526	5705
(U) FE				1007 #
	SCAD			1008 #	3899	4273	4504	4507	4569	4573	4576	4595	4608	4609	4735
				4757	4777	4780	4782	4784	4786	4788	4792	4795	4797	4799	4800
				4805	4840	4847	4850	4868	4871	4876	4885	4901	4902	4903	4904
				4905	4906	4907	4908	4919	4922	4932	4933	4934	4935	4936	4937
				4938	4939	4977	4983	4992	5020	5026	5047	5119	5122	5131	5140
				5141	5144	5172	5175	5193	5202	5213	5216	5239	5257	5258	5314
				5316	5329	5330	5361	5380	5397	5452	5455	5457	5459	5467	5471
				5474	5476	5480	5486	5488	5525	5565	5576	5619	5634	5656	5658
				5666	5678	5680	5681	5684	5685	5701	5704	5780	5796	5845	5847
				5893	5894	5933	5935	5936	5937	5938	5942	6290	6353	6355	6503
				6504	6510	6531	6536	6598	6614	6623	6746	6880	6881	6883	6884
				6936	6957	6965	7001
(U) FETCH			1360 #
	COMP			1363 #	3633
	JFCL			1367 #	3877
	JUMP			1366 #	3701	3720	3742	3754
	SKIP			1364 #	3651
	TEST			1365 #	3594	3597	3602	6062	6064	6067
	UNCOND			1361 #	2886	3040	3063	3065	3071	3073	3320	3841	4020	4029	4049
				4082	4090	4101	4503	4515	4539	4558	4583	4596	4659	4684	4878
				4887	5007	5048	5323	5421	5422	5544	5709	5744	5753	5764	5873
				5909	6070	6572	7917
(U) FLAG CTL			1339 #
	DISMISS			1343 #	3790	3792	6071	6571
	HALT			1345 #	3786
	JFCL			1341 #	3875
	JFCL+LD			1342 #	3879
	PORTAL			1347 #
	RSTR FLAGS		1340 #	3809
	SET FLAGS		1346 #	2885
(U) FM#				1213 #	3970	3972	3974	3986	3989	3992	5014	5030	5032	5052	5735
				5865	5866	5871	5874	5876	5896	5902	5907	6505	6515	6666	6667
				6671	6673	6684	6692	6693	6694	6699	6707	6731	6740	6741	6755
				6755	6880	6881	6883	6884	6888	6897	6899	6918	6919	6925	6926
				6927	6932	6933	6955	6958	6964	6967	6968	6970	6985	7026	7075
				7094	7113
(U) FMADR			968 #
	AC0			969 #	3028	3063	3068	3093	3154	3157	3252	3254	3257	3260	3263
				3267	3320	3363	3373	3388	3405	3415	3425	3435	3445	3456	3476
				3486	3602	3605	3606	3607	3633	3701	3720	3742	3754	4010	4014
				4042	4049	4066	4096	4098	4364	4366	4368	4436	4498	4501	4525
				4525	4539	4547	4558	4570	4573	4583	4595	4643	4645	4699	4711
				4734	4757	4827	4839	4920	4923	4966	4990	4995	5021	5129	5172
				5202	5238	5244	5246	5318	5338	5340	5360	5538	5578	5587	5594
				5602	5605	5634	5665	5708	5753	5761	5877	5892	5906	5910	7151
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 182
; CROSS REFERENCE LISTING

				7880	7898
	AC1			970 #	3095	3332	3333	4503	4545	4546	4566	4569	4823	4962	5002
				5018	5049	5050	5055	5056	5236	5287	5325	5571	5575	5653	5654
				5656	5658	5661
	AC2			973 #	5006	5016	5060
	AC3			974 #	4960	4989	5004	5009	5062	5064
	AC4			975 #
	VMA			972 #	2945	2949	2989	3004	3005	3034	3040	3046	3052	3064	3065
				3071	3073	3316	3317	3337	3651	3971	3973	3977	3984	3987	3990
				4020	4026	4029	4031	4046	4047	4064	4065	4090	4101	4285	4321
				4323	4330	4332	4456	4456	5744	5764	5796	5804	5814	5816	5839
				5839	6056	6061	6063	6074	6447	6467	6560	6570	6571	6895	6896
				6904	7117	7125	7719	7907	7908	7915	7917	7918
	XR			971 #	2997	3001	3810	4451	4453	4467	4470	5800	5802
	#B#			976 #	3970	3972	3974	3986	3989	3992	5014	5030	5032	5052	5735
				5865	5866	5871	5874	5876	5896	5902	5907	6505	6515	6666	6667
				6671	6673	6684	6692	6693	6694	6699	6707	6731	6740	6741	6755
				6755	6880	6881	6883	6884	6888	6897	6899	6918	6919	6925	6926
				6927	6932	6933	6955	6958	6964	6967	6968	6970	6985	7026	7075
				7094	7113
(U) J				870 #	2995	2997	3029	3035	3041	3047	3053	3341	4338	4450	4451
				4460	4462	4466	4606	4780	4792	4878	4880	4881	4887	4889	4890
				4920	4923	4936	4937	4938	4939	5302	5304	5621	5623	5779	5782
				5783	5786	5799	5800	5827	5828	5842	5851	5942	6103	6116	6128
				6132	6321	6448	6469	6603	6608	6971	7719	7898	7919
	ADD			4692	4693	4694	4695	4699 #
	ADJBP			5742	5860 #
	ADJD1			5893	5896 #
	ADJD2			5896	5900 #
	ADJD3			5898	5902 #
	ADJSP			4350	4363 #
	AND			3356	3357	3358	3359	3363 #
	ANDCA			3366	3367	3368	3369	3373 #
	ANDCB			3418	3419	3420	3421	3425 #
	ANDCM			3381	3382	3383	3384	3388 #
	AOBJ			3748	3749	3754 #
	AOJ			3708	3709	3710	3711	3712	3713	3714	3715	3720 #
	AOS			3656	3657	3658	3659	3660	3661	3662	3663	3667 #
	APRBI			5953	6155 #
	APRBO			5955	6147 #
	APRCI			5958	5959	5960	6166 #
	APRCO			5957	6163 #
	APRDI			5954	6152 #
	APRDO			5956	6145 #
	ASH			4479	4523 #
	ASHC			4483	4544 #
	ASHL			4524	4545	4643 #
	ASHL1			4644	4659 #
	ASHL2			4663 #	4672
	ASHL3			4667 #	4669
	ASHL4			4668	4671 #
	ASHL5			4676 #	4679
	ASHR1			4648 #	4651
	ASHR2			4648	4653 #
	ASHX			4654	4678	4684 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 183
; CROSS REFERENCE LISTING

	BFETCH			5799 #	5805
	BFIN			5764 #
	BLK1			6051	6075 #
	BLK2			6074 #	6075	6076
	BLK3			6074	6078 #
	BLK4			6061	6067 #
	BLKIO			6025	6027	6036	6038	6050 #
	BLT			3149	3156 #
	BLT1			3157	7879 #
	BLTAC			7889	7896 #
	BLTPF			7026	7148 #	7915
	BLTPF1			7150 #
	BRJMP			2885	3780	3790	3841 #
	BRJRF			3836	3840 #	3846	3847	3848
	BYTEA			5751	5760	5796 #	6635
	BYTEI			5801	5802	5804 #
	CAIM			3613	3614	3615	3616	3617	3618	3619	3620	3622	3623	3624	3625
				3626	3627	3628	3629	3633 #
	CIRC			4489	4569 #
	CIRC3			4570	4589 #	4590
	CIRC4			4589	4592 #	4594
	CLEAN			5806	5816	6692	6986	7001 #	7066	7151
	CLRFPD			5767 #	6067
	CLRPT			6301	6343	6348 #
	CLRPT1			3992	6350 #
	CMTR			6305	6430 #
	CMTR1			6430	6438 #
	COMPEA			2939	2995 #	3011
	CONO			6029	6040	6054 #
	CONS			6031	6032	6042	6043	6052 #
	CONT			2886 #
	DASMD			4950	4951	4952	4962 #
	DBLST			3320 #	5700	5711
	DDIV			4953	4960 #
	DDIV0			4960	5014 #
	DDIV1			5023 #	5027	5028
	DDIV2			5024	5030 #
	DDIV3			5034	5036	5043 #
	DDIV4			5044	5047 #
	DDIV6			5049	5052 #
	DDVLP			4932 #	4932	4933	4934	4935	5047
	DDVSUB			4934 #	5668
	DDVX1			5055	5058 #
	DDVX2			5058	5059	5060 #
	DEXCHK			6573	6585	6606 #
	DFAS			5571 #	5573
	DFAS1			5571	5587 #
	DFAS2			5589 #
	DFAS3			5591	5599 #
	DFAS4			5595	5605 #
	DFAS5			5600	5606 #
	DFDV			5580	5653 #
	DFDV1			5653	5654	5665 #
	DFLOAT			5558	5559	5560	5561	5565 #
	DFMP			5576	5630 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 184
; CROSS REFERENCE LISTING

	DFMP2			5641 #	5642
	DFN			5311	5314 #
	DFN1			5315	5336 #
	DHALT			3895 #
	DIV			4815	4816	4817	4818	4822 #
	DIV+			4904 #	5264	5657
	DIV-			4903 #	5205	5262	5659
	DIV1			4824	4839 #
	DIV2			4828	4846 #	5892
	DIVLP			4877	4886	4901 #	4901	4902	4903	4904	5054	5261	5263
	DIVS1			4841	4848	4868 #	4870
	DIVS2			4851	4871 #	4873
	DIVS3			4869	4876 #
	DIVS4			4872	4885 #
	DIVX			4905	4906	4907	4908	4918 #
	DMOVEM			3326	3332 #
	DMOVE			3306	3313 #
	DMOVNM			3327	3333 #
	DMOVN			3307	3312 #
	DMUL1			4995 #	4997
	DMUL2			4996	5001 #
	DMULT			4977	4983 #
	DMVM1			3332	3337 #	6377
	DNHI			5678	5697 #
	DNNEG			5676	5692 #
	DNORM			5607	5644	5662	5674 #	5690	5694	5695
	DNSHFT			5687 #	5701
	DNTRY			5597	5644 #	5697
	DNZERO			5674	5700 #
	DPB			5721	5760 #
	DPB1			5762	5839 #	6627
	DPB2			5841	5845 #
	DRND1			5683	5704 #
	DROUND			5680	5682 #	5684
	DSTAC			3093 #
	DTEVEC			6534	6546 #
	EBUSI			6120 #	6580	6615
	EBUSO			6121 #	6570
	EBUSW			6098 #	6100
	EBUSX			6095 #	6120	6121
	EMTR			6303	6429 #
	EMTR1			6429	6437 #
	EQV			3428	3429	3430	3431	3435 #
	EXCH			3148	3154 #
	EXPD			5318	5587	5617 #
	EXPD1			5619	5622 #
	FAD			5076	5078	5079	5110 #
	FADL			5077	5112 #
	FADR			5081	5083	5084	5111	5113	5119 #
	FADRI			5082	5117 #
	FAS			5120	5123	5129 #
	FAS1			5131	5135 #
	FAS2			5133	5137 #
	FAS3			5137	5143 #
	FAS5			5140	5141	5146 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 185
; CROSS REFERENCE LISTING

	FDV			5181	5183	5184	5194 #
	FDVCHK			5203	5240	5298 #	5299	5667
	FDVCK1			5298	5301 #
	FDVL			5182	5193 #
	FDVL1			5193	5236 #
	FDVL2			5241	5257 #
	FDVL3			5257	5260 #
	FDVL4			5245	5247	5271 #
	FDVL6			5272	5280 #
	FDVL7			5281	5284	5287 #	5289
	FDVNEG			5214	5227 #	5228
	FDVR			5186	5188	5189	5194	5199 #
	FDVRI			5187	5198 #
	FINI			3081	3087 #	3604	3771	3879	5325	5767	5768
	FIX			4273 #	5366
	FIX1			4274	5398	5413 #
	FIX2			5421	5424 #
	FIXR			5373	5397 #
	FLTR			5374	5380 #
	FMP			5152	5154	5155	5164 #
	FMPL			5153	5165 #
	FMPR			5157	5159	5160	5164	5165	5170 #
	FMPRI			5158	5169 #
	FSB			5086	5088	5089	5111 #
	FSBL			5087	5113 #
	FSBR			5091	5093	5094	5122 #
	FSBRI			5092	5118 #
	FSC			5345	5359 #
	GETEEB			3944	3977	6131 #	6145	6152	6164	6167	6294	6310	6324	6328	6364
				6380	6383	6392	6395	6403
	GETEXP			5919 #
	GETSC			5736	5906	5918 #
	GTAR08			3100	6602 #	6630
	GTDBR			3317	3333	3340 #
	GTEBUS			6057	6087 #
	GTEEB1			4324	6132 #
	HALT1			2915	3898 #	3903
	HALT2			3899	3902 #
	HLL			3163	3164	3207	3254 #
	HLLE			3193	3194	3195	3196	3295 #
	HLLO			3183	3184	3185	3186	3299 #
	HLLZ			3173	3174	3175	3176	3298 #
	HLR			3210	3211	3260 #
	HLRE			3240	3241	3242	3243	3288 #
	HLRM			3212	3267 #
	HLRO			3230	3231	3232	3233	3292 #
	HLRS			3213	3268 #
	HLRZ			3220	3221	3222	3223	3291 #
	HRL			3168	3169	3257 #
	HRLE			3198	3199	3200	3201	3281 #
	HRLM			3170	3263 #
	HRLO			3188	3189	3190	3191	3285 #
	HRLS			3171	3264 #
	HRLZ			3178	3179	3180	3181	3284 #
	HRR			3165	3205	3206	3252 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 186
; CROSS REFERENCE LISTING

	HRRE			3235	3236	3237	3238	3274 #
	HRRO			3225	3226	3227	3228	3278 #
	HRRZ			3215	3216	3217	3218	3277 #
	IBP			5346	5350 #
	IBP1			5350	5735 #
	IBP2			5739 #
	IBPS			5740	5749	5758	5779 #	6634
	IDIV			4810	4811	4812	4813	4826 #
	IDPB			5720	5757 #
	IFNOP			3070 #	5206	5242	5413	5669	6141	6358
	IFSTAC			3072 #	4032	5865
	IHALT			3786	3893 #
	ILDB			5718	5748 #
	IMUL			4717	4719	4720	4734 #
	IMUL2			4744 #	4745
	IMULI			4718	4725 #
	INDLP			3004	3011 #
	INDRCT			3000	3002	3004 #
	INTRPT			2920 #
	IO			6026	6028	6030	6037	6039	6041	6056 #	6078	6079
	IOCHK			3962	4412	4435	6050	6126 #	6138	6147	6155	6191	6291
	IOFET			6063	6070 #
	IOPGF			7094	7132 #
	IOR			3408	3409	3410	3411	3415 #
	IOTEND			6061 #	6208	6338
	JFCL			3764	3871 #
	JFFO			4482	4501 #
	JFFO1			4507 #	4508
	JFFO2			4512 #	4513
	JRA			4077	4098 #
	JRA1			4017 #	4099
	JRST			3763	3771 #
	JRST17			3801 #
	JRST2			3783 #	3792
	JRSTFC			7061	7066 #
	JRSTF			3784	3809 #	3810	3866
	JRSTF1			3809	3836 #
	JRSTON			3802	3860 #
	JSA			4076	4096 #
	JSA1			4096	4101 #
	JSP			4075	4082 #
	JSR			4074	4087 #
	JSTAC			4015	4020 #	4026
	JUMP			3689	3690	3691	3692	3693	3694	3695	3696	3701 #
	LDB			5719	5751 #
	LDB1			5752	5814 #	6619
	LDB2			5815	5819 #
	LDBRL			3341 #
	LPM			3959 #	4241
	LPM1			3959	3977 #
	LSH			4481	4498 #
	LSH2			4575 #	4578
	LSH3			4576	4580 #	4582
	LSHC			4485	4566 #
	LSHC1			4566	4573 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 187
; CROSS REFERENCE LISTING

	LUUO			4140	4141	4142	4144	4145	4146	4147	4149	4150	4151	4152	4154
				4155	4156	4157	4162	4163	4164	4165	4167	4168	4169	4170	4172
				4173	4174	4175	4177	4178	4179	4180	4282 #
	MBREL			6141 #	6148
	MOVE			3105	3106	3112	3136	3142 #	3143	3166	3208	3376	3377	3378	3379
				3393	3394
	MOVEM			3110	3153 #
	MOVM			3124	3125	3126	3127	3136 #
	MOVN			3119	3120	3121	3122	3139 #
	MOVNEG			3139	3143 #
	MOVS			3114	3115	3116	3117	3133 #	3263	3267
	MTRCI			6019	6020	6021	6394 #
	MTRCO			6018	6391 #
	MTRCO1			6393	6398 #
	MTRDBL			6375	6444	6454 #
	MTRINT			2917 #	3005	3900	4339	4417	4420	4457
	MTRREQ			2917	6417 #
	MTRRQ0			6420	6424 #
	MTRRQ1			6435	6436	6437	6438	6443 #
	MUL			4749	4750	4751	4752	4756 #
	MUL1			4761 #	4762
	MULM			4786	4788	4791 #	4799	4800
	MULP			4777	4779 #	4782	4784	4795	4797	4805	4983
	MULREE			4805 #	4992	5632	5641	5908
	MULSUB			4736	4758	4776 #	5174
	MUUO			4184	4185	4186	4187	4188	4189	4190	4191	4192	4193	4194	4195
				4196	4197	4198	4199	4201	4202	4203	4204	4205	4206	4207	4208
				4222	4223	4228	4229	4265 #
	MUUO1			4267	4320 #
	NEWPC			4332 #	7128
	NEXT			2913 #	3068	3087	3095	5009
	NODIVD			4830 #	5048	5873
	NOP			3071	3081 #	3633	3701	3841	4049	4090	4503	4539	4659	4830	5744
				5753	6062	6064	6070	6572	7917
	NXTWRD			5781	5785 #
	ORCA			3449	3450	3451	3452	3456 #
	ORCB			3479	3480	3481	3482	3486 #
	ORCM			3469	3470	3471	3472	3476 #
	PACCDS			6898	6900	6904 #
	PAGBI			5975	6312 #
	PAGBO			5977	6290 #
	PAGBO1			6292 #	6353
	PAGCI			5980	5981	5982	6327 #
	PAGCO			5979	6323 #
	PAGD2			6300	6303 #
	PAGDI			5976	6309 #
	PAGDO			5978	6293 #
	PCTXT			4325	6311	6315 #
	PF1			6664	6666 #
	PF2			6668	6670 #
	PF3			6676	6687	6691 #
	PFPAR			6672	6673	6682 #	6683
	PFPAR1			6682	6684 #
	PFT			6919	6984 #
	PFT69			6907	6918 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 188
; CROSS REFERENCE LISTING

	PFWLOS			6908	6909	6912 #
	PGEXRF			6875	6880 #
	PGF1			7001	7073 #
	PGF2			7073	7075 #
	PGF4			7075	7092 #
	PGFAC0			7151 #
	PGRF1			6702 #
	PGRF2			6707	6755	6872 #
	PGRST1			6958	6963 #	6965
	PGRST2			6964	6967 #
	PGRST3			6967	6970 #
	PGSTO			6910	6914 #
	PGSTO1			6916	6924 #
	PGSTO2			6928	6929	6930 #
	PGSTO3			6934	6935	6936 #
	PGUSRF			6878	6883 #
	PIBI			5964	6189 #
	PIBO			5966	6191 #
	PIBPA			6614	6624	6630 #
	PIBYTE			6509	6614 #
	PICI			5969	5970	5971	6201 #
	PICO			5968	6197 #
	PICOM1			6198	6201	6211 #
	PICOM2			6199	6208 #
	PICY2V			6515 #
	PICYC1			2918	2920	6501 #
	PICYC2			2914	6514 #
	PIDATI			6508	6580 #
	PIDATO			6507	6567 #
	PIDI			5965	6177 #
	PIDISP			6503 #
	PIDO			5967	6176 #
	PIDONE			6553	6561	6562	6571 #	6587	6590	6591	6593	6595	6628	7133
	PIDPB			6616	6623 #
	PIFET			6071	6422	6572 #
	PIIBP			6618	6625	6633 #
	PIINCR			6506	6560 #
	PIINST			6433	6503	6504	6510	6514	6517 #
	PIKLG1			6552	6556 #
	PIKLG2			6592	6595 #
	PILD			6550 #	6567	6606	6633
	PIOUT			6570 #	6574	6575	6620
	PIST			6583	6590 #
	PIVECT			6505	6519 #
	PMTR1			6428	6436 #
	POP			4000	4039 #
	POP1			4039	4062 #
	POPJ			4001	4042 #
	POPJ1			4046	4049 #
	PSTOR			6586	6592 #
	PTDC1			6742	6743	6744 #
	PTLOOP			6292	6355 #	6357
	PUSH			3999	4010 #
	PUSHJ			3998	4013 #
	PXCT			4234	4235	4412 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 189
; CROSS REFERENCE LISTING

	PXCTEA			4416	4447 #
	PXLOOP			4450 #	4459
	RDBRLH			6895	6897 #
	RDBRRH			6896	6899 #
	RDDBR			6880	6883	6889 #
	RDDBR0			6881	6884	6888 #
	RDEBRG			3943 #	6189
	RDEMTR			6455	6457	6463 #
	RDEX			6569	6584	6598 #
	RDMTR			5999	6000	6014	6015	6363 #
	RDMTR1			6368	6369	6370	6371	6374 #
	RDMTR2			6464	6467 #
	RDUMTR			6459	6461	6465 #
	RELEB			6099	6102 #
	RELEEB			6058 #	6146	6153	6165	6170	6298	6313	6388	6398
	RET1			6128 #
	ROT			4480	4525 #
	ROT3			4549 #	4552
	ROT4			4550	4554 #	4557
	ROTC			4484	4546 #
	ROTS			4266	4283	4338 #	6599	7093
	SDIV			5935 #	5935	5936
	SDIV-			5933	5936 #
	SDIVR			5937	5940 #
	SETCA			3438	3439	3440	3441	3445 #
	SETCM			3459	3460	3461	3462	3466 #
	SETEBR			6325	6342 #
	SETO			3489	3490	3491	3492	3496 #
	SETZ			3346	3347	3348	3349	3353 #
	SHIFT			3874	4664	5008	5320	5819	5827 #	5919	6342	6351	6546
	SHR1			4499	4532 #	4536
	SHR2			4533	4537 #	4538
	SIXDIV			5864	5870	5933 #
	SKIP			3640	3641	3642	3643	3644	3645	3646	3647	3651 #	3667	3682
	SLNG3			5538 #	5542
	SLNG4			5538	5544 #
	SN1			5467	5474 #	5480
	SNORM			5147	5175	5216	5227	5381	5449 #	5451	5453	5472	5489
	SNR2			5288	5361	5452 #
	SNZERO			5450	5486 #
	SOJ			3727	3728	3729	3730	3731	3732	3733	3734	3742 #
	SOS			3671	3672	3673	3674	3675	3676	3677	3678	3682 #
	SPM			3962 #	4242
	SRND2			5502	5522 #
	SRND3			5514	5525 #
	SRND4			5512	5521	5526 #
	SRND5			5487	5536 #
	SROUND			5454	5456	5458	5460	5475	5477	5478	5502 #
	ST0			3061 #	3133	3142	3252	3254	3257	3260	3264	3268	3277	3278	3284
				3285	3291	3292	3298	3299	3353	3363	3373	3388	3405	3415	3425
				3435	3445	3456	3466	3476	3486	3496	4699	4712	4761	4833	4835
	ST2AC			3063 #	3064	4686	4972	4974	5063	5065
	ST6			3069 #	3946	4744	5536	5540
	STAC			3068 #	3080	3605	3606	3607	4103	5425	5911
	STAC1			3095 #	5332	5333	5550	5552
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 190
; CROSS REFERENCE LISTING

	START			2885 #	3906	4332
	STBOTH			3073 #
	STD1			3063	3094 #	3320	4596	5709
	STDAC			3316	4558 #
	STMAC			3154	4011	4029 #	4367	4369	5338	5340
	STMEM			3071 #	3338	3974	4067	6159	6194
	STORAC			3073	3080 #	3720	3742	3754	4021	4082	4684	5422
	STRAC1			4515	4558	4583	5550 #
	STRAC3			5009 #
	STRNC			5506	5521 #
	STSELF			3066	3079 #	3652	4030
	SUB			4704	4705	4706	4707	4711 #
	SWEEP			5986	5987	5988	5989	5990	5991	5992	5993	6137 #
	SXCT			4428	4435 #
	SXCTB			4441	4463	4466 #	4467
	TAKINT			3005 #	6111	7074
	TDC			3606 #
	TDN			3391	3392	3503	3504	3512	3513	3595	3598	3604 #
	TDO			3607 #
	TDX			3507	3516	3521	3525	3530	3534	3539	3543	3548	3552	3557	3561
				3566	3570	3594 #
	TDXX			3505	3509	3514	3518	3523	3527	3532	3536	3541	3545	3550	3554
				3559	3563	3568	3572	3602 #
	TDZ			3605 #
	TIMBO			6001	6402 #
	TIMBO1			6387 #	6406
	TIMCI			6008	6009	6010	6382 #
	TIMCO			6007	6380 #
	TIMCO1			6298 #	6381
	TIMDO			6003	6409 #
	TMTR1			6427	6435 #
	TR3CHK			2943	2966 #
	TR3DSP			2967	2969 #
	TRAP			2943 #	2950
	TRAPX			2971	2972	2976	2984 #
	TSX			3508	3517	3522	3526	3531	3535	3540	3544	3549	3553	3558	3562
				3567	3571	3597 #
	TSXX			3506	3510	3515	3519	3524	3528	3533	3537	3542	3546	3551	3555
				3560	3564	3569	3573	3600 #
	UFA			5310	5316 #
	UFA4			5327	5332 #
	UNHALT			3902	3905 #
	UP			7891	7902 #
	UP1			7902	7908 #	7910
	UP2			7907	7908	7909	7912 #
	UP3			7914 #
	UP4			7914	7917 #
	UUO			3785	3787	3788	3789	3791	3793	3794	3795	3796	3893	3916	4113
				4249	4250	4255	4256	4264 #	4346	5370	6016	6017	6087	6126	6131
				6177	6211	6312	6409
	UUO107			3892 #	4429
	UVERS			3100 #	6157
	UXCT			3905	3928	4419 #
	WDREV			4569	4595	4605 #	4608	4609
	WDREV1			4605	4608 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 191
; CROSS REFERENCE LISTING

	WGRANT			3860	6088	6110 #	6114	6212	7106
	WGRNT1			6110	6113 #
	WGRNT2			6113	6115 #
	WXFER			6096	6100 #
	XCT			3912	3928 #
	XCTGO			2938 #	2945	2978	2989	4419
	XCTR			4413	4416 #
	XCTW			2886	2989 #	4286	6515	6517	6532	6533	6536	6547
	XFERW			4017	4964	5031	5567	6318	6333	6468	6550	6551	6556	6609	7719 #
	XIND1			4452	4456 #	4469	4471
	XIND2			4448	4456	4459 #
	XOR			3398	3399	3400	3401	3405 #
(D) J				1504 #
(U) MACRO%
	A INDRCT		2599 #	2999	3001	4452	4453	4468	4470
	A READ			2598 #	2995	2997	4450	4451	4460	4462	4466
	ABORT INSTR		2662 #	6447	7116
	AC0_AR			1516 #	3063	3068	3093	3320	4049	4066	4539	4558	4583	4595	4995
				5538	5594	5602	5708	5753	5892	5906	7151	7898
	AC1_AR			1517 #	3095	4503	5002	5049	5050	5287	5325	5656	5658
	AC2_AR			1518 #	5006	5060
	AC3_AR			1519 #	4989	5009	5062	5064
	AC4_AR			1520 #
	AD FLAGS		2649 #	3143	3318	3334	3667	3682	3720	3742	4699	4712	4972	4974
	AD LONG			2648 #	5064	5425
	AR+ARX+MQ_0.M		2151 #	5486	5860
	AR+MQ_0.M		2154 #
	AR+MQ_0.S		2155 #
	AR0-3 DISP		2511 #	6567	6583
	AR0-8_#			2412 #	3100	5314	6159	6300	6304
	AR0-8_# AND AR0-8	2411 #
	AR0-8_-SC-1		2402 #	5333
	AR0-8_FE		2403 #	5337	5339	6695
	AR0-8_FE OR #		2410 #
	AR0-8_FE OR SC		2408 #
	AR0-8_FE#		2406 #
	AR0-8_FE+#		2409 #	6534	6601	6630
	AR0-8_FE-SC		2407 #	5545
	AR0-8_FE.M		2404 #
	AR0-8_FE.R		2405 #
	AR0-8_SC		2401 #	5332	5918	6696
	AR0-8_SCAD		2397 #	5332	5333	5337	5339	5918	6695	6696
	AR0-8_SCAD#		2398 #	6534	6601	6630	6915
	AR0-8_SCAD.M		2399 #	5545
	AR0-8_SCAD.R		2400 #
	AR03-04_SCD TRAP CY	2544 #	2966
	AR05_SCD ADDR BRK C	2543 #	2973
	AR18-21 DISP		2512 #	6875	6878
	ARL+ARX+MQ_0.M		2152 #
	ARL+ARX_0.M		2153 #	5898	5901	6374	6443
	ARL_0S			2251 #	3277	3291	6872
	ARL_0.C			2136 #	4467
	ARL_0.M			2146 #	4099	4440	4447	7881
	ARL_0.S			2141 #	6398
	ARL_1S			2253 #	3278	3292
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 192
; CROSS REFERENCE LISTING

	ARL_1S.M		2254 #
	ARL_AC0			2235 #	3252	3260	3267
	ARL_ARL			2243 #	3157	3254	3268	3298	3299	6170	6207
	ARL_ARL.M		2244 #	6293
	ARL_ARR			2238 #	3257	3263	3264	3284	3285	4363	6054	7150	7896
	ARL_ARR.M		2240 #	6163	6197	6323	6391
	ARL_ARR.S		2239 #	6158
	ARL_ARX			2236 #
	ARL_ARX (ADX)		2249 #	6697
	ARL_ARXL		2245 #	4103	6388
	ARL_ARXL.M		2248 #
	ARL_BRL			2255 #	6313
	ARL_BRL.M		2259 #
	ARL_BRL.S		2256 #	4327
	ARL_SHIFT		2260 #
	ARL_SHIFT.C		2258 #	6904
	ARR+MQ_0.S		2156 #
	ARR_0S			2250 #	3284	3298
	ARR_0.C			2137 #	6904
	ARR_0.M			2147 #	6337
	ARR_0.S			2142 #	4509
	ARR_1S			2252 #	3285	3299
	ARR_AC0			2237 #	3157	3254	3257	3263
	ARR_ARL			2241 #	3260	3267	3268	3291	3292	4099	6293	6697	7881
	ARR_ARR			2242 #	3252	3264	3277	3278	4363	6054	6163	6197	6323	6391
	ARR_ARX			2257 #
	ARR_ARXR		2247 #
	ARR_BRXR		2246 #
	ARR_PC+1		2204 #	4103
	ARX+MQ_0.M		2150 #	4504	4822	4826	5287	5359	5878
	ARX+MQ_0.S		2157 #	5193	5199
	ARX0-3 DISP		2513 #	6443
	ARX0_MQ35		1688 #
	ARX_-AC0		1542 #	5340
	ARX_-AR-1		1643 #
	ARX_-BRX		1612 #	5893
	ARX_-SLEN		1761 #
	ARX_0S			2132 #	3873	4595	4671	4776	4976	5030	5120	5122	5170	5228	5315
				5316	5630	5700	5866	6323	6335
	ARX_0.C			2138 #
	ARX_0.M			2148 #	4498	5450
	ARX_0.S			2143 #
	ARX_1B1			2166 #	5398
	ARX_1S			2129 #	5505	5508
	ARX_1			2162 #	5706
	ARX_AC0			1522 #	4525
	ARX_AC0 COMP		1543 #	5338
	ARX_AC0+1		1540 #	4010	4014
	ARX_AC1			1523 #	3332	3333	4546	4566	5018
	ARX_AC1+1		1541 #
	ARX_AC2			1524 #
	ARX_AC3			1525 #	4960	5004
	ARX_AC4			1526 #
	ARX_AR			1566 #	3154	3156	3899	3959	4416	4436	4643	4645	4649	4663	4832
				4834	4839	4966	5138	5141	5319	5380	5587	5589	5592	5665	5751
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 193
; CROSS REFERENCE LISTING

				5760	5781	5820	5919	5933	5941	6205	6303	6305	6320	6402	6546
				6581	6583	6602	6616	6635	7092	7879
	ARX_AR (AD)		1567 #	4419	4534	4549	4551	4556	4577	4589	4590	4594	6293	6696
				6873	6876
	ARX_AR SIGN		2134 #	4274
	ARX_AR SWAP		2233 #	4096	6169	6203	6332	6385	6424
	ARX_AR*4 COMP		1599 #
	ARX_AR*BR		1667 #
	ARX_AR*MSK		1776 #
	ARX_AR+1		1645 #
	ARX_AR+BR		1637 #
	ARX_AR+CBR		1952 #
	ARX_AR-1		1646 #
	ARX_ARX*-6		1687 #	4510
	ARX_ARX*.25		1586 #	5215
	ARX_ARX*.5		1591 #
	ARX_ARX*2		1573 #	3340	4965	5414	5568	6469
	ARX_ARX*2 COMP		1600 #
	ARX_ARX*4		1574 #	6733
	ARX_ARX*5		1682 #
	ARX_ARX*8		1575 #	5014	6735	6737	6739
	ARX_ARX*BRX		1677 #	5527	5710
	ARX_ARX+1		1647 #	4513	7918
	ARX_ARX+BRX		1678 #
	ARX_ARX+BR		1653 #
	ARX_ARX+CBR		1954 #
	ARX_ARX-1		1648 #	4508
	ARX_ARX-1 (AD)		1649 #
	ARX_ARX-CN100		1965 #	6888
	ARX_BR			1609 #	4653	5023
	ARX_BR*2		1617 #	5019
	ARX_BRX			1607 #	3860	3871	4265	4282	4667	4685	5596	5618	5708
	ARX_BRX COMP		1596 #	5693
	ARX_BRX*2		1614 #	4608
	ARX_BRX*2+1		1615 #	4609
	ARX_BRX+1		1651 #
	ARX_DBR1		1933 #	6883
	ARX_DBR2		1934 #	6884
	ARX_DBR3		1935 #	6881
	ARX_DBR4		1936 #	6880
	ARX_DSTP		1783 #
	ARX_FM			1717 #	6755	6880	6881	6883	6884	6918	6925	6958	6964	6967	6968
				7026
	ARX_FM(VMA)		1547 #	2945	2949
	ARX_MEM			2607 #	2989	3004	3005	3316	3317	4046	4047	4064	4065	4456	5804
				5839
	ARX_PC			2205 #	6698
	ARX_SHIFT		1557 #	4338	4554	4580	4592	4648	4679	4846	4849	5003	5007	5015
				5021	5032	5140	5238	5417	5424	5470	5510	5819	5846	5849	6336
				6454	6456	6458	6460
	ARX_SRCP		1779 #
	ARX_SV.AR		1924 #	6964
	ARX_SV.ARX		1926 #	6967	6968	7026
	ARX_SV.BR		1928 #	6918	6958
	ARX_SV.VMA		1920 #	6755	6925
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 194
; CROSS REFERENCE LISTING

	ARX_T2			1756 #
	ARX_VMA HELD		2210 #	6698
	AR_(AR+2BR)*.25		1673 #	4796	5146
	AR_(AR+BR)*.25		1671 #	4783	4794
	AR_(AR-2BR)*.25		1674 #	4785
	AR_(AR-BR)*.25		1672 #	4787	4798
	AR_(ARX OR AR*4)*.2	1686 #
	AR_-AC0			1528 #
	AR_-AR			1604 #	5123	5336	5540
	AR_-AR LONG		2218 #	4870	4873	5299	5542	5573	5711
	AR_-BR			1610 #	3143	4880	4890	5064	5282	5695
	AR_-BR LONG		2219 #	3318	3334	5025	5028	5059
	AR_-BR*2 LONG		2221 #
	AR_-BRX			1611 #	4832
	AR_-DLEN		1766 #
	AR_-SLEN		1760 #
	AR_0.C			2135 #
	AR_0.M			2145 #	4577
	AR_0.S			2140 #
	AR_0S			2131 #	2915	3284	3298	3320	3337	3353	3895	3943	4524	4776	4976
				5285	5289	5422	5502	5538	5552	5630	5700	5736	5819	5820	5866
				5906	5933	6299	6317	6320	6327	6332	6352	6365	6382	6385	6394
				6402	6424	6447	6454	6456	6458	6460	6531	6546	6602	6608	6694
	AR_1			2161 #	3801	6350	7104
	AR_1 LONG		2163 #	6731
	AR_1S			2128 #	2939	3011	3285	3299	3496
	AR_2			2165 #
	AR_2(AR*BR)		1668 #	4868	4871	4876	4885	4901	4902	4903	4904	4932	4933	4934
				4935	5043	5045	5257	5258	5261	5263	5935	5936
	AR_2(AR+1)		1684 #	4512
	AR_2(AR+BR)		1669 #	4871	4876	4901	4904	4932	4935	5045	5258	5261	5935
	AR_2(AR+BR) LONG	2224 #
	AR_2(AR-BR)		1670 #	4868	4885	4902	4903	4933	4934	5043	5257	5263	5936
	AR_AC0			1510 #	3028	3154	3157	3254	3257	3263	3701	4042	4096	4098	4436
				4498	4501	4525	4547	4570	4573	4643	4645	4711	4734	4757	4827
				4839	4966	4990	5021	5129	5172	5202	5238	5244	5246	5318	5360
				5587	5605	5634	5665	5761	5910	7880
	AR_AC0 COMP		1529 #
	AR_AC0+1		1538 #	3720	3754
	AR_AC1			1511 #	4569	5055	5056	5236	5575	5661
	AR_AC1 COMP		1530 #
	AR_AC1*2		1531 #	4545	4823	4962	5571	5653	5654
	AR_AC1+1		1539 #
	AR_AC2			1512 #	5016
	AR_AC3			1513 #
	AR_AC3*2		1532 #
	AR_AC4			1514 #
	AR_AD*.25 LONG		2217 #	4870	4873	5299	5542	5573	5711
	AR_ARX			1563 #	3783	3865	3979	4021	4030	4032	4066	4558	4583	4595	4596
				4667	4671	5002	5014	5019	5213	5449	5599	5602	5687	5874	6170
				6295	6404	6666	6699	6919	6964	6967	6968
	AR_ARX (ADX)		1564 #	4534	4550	4551	4557	4575	4582	4589	4590	4594	5420	5468
				5594	5603	5688	5897	6873	6876
	AR_ARX (AD)		1565 #	2995	4460	4462	7150
	AR_ARX COMP		1594 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 195
; CROSS REFERENCE LISTING

	AR_ARX OR PUR		1958 #
	AR_ARX*.25		1583 #	5215
	AR_ARX*.25-AR-1		1685 #
	AR_ARX*2		1579 #	5909
	AR_ARX*4		1580 #	6936
	AR_ARX*BR		1666 #
	AR_ARX*BRX		1679 #	6207
	AR_ARX+BR		1652 #	7148
	AR_ARX+CHDTIM		2084 #
	AR_ARX+V1CTR		2091 #
	AR_ARX+V2CTR		2092 #
	AR_ARX+V3CTR		2093 #
	AR_ARX+V4CTR		2094 #
	AR_ARX+V5CTR		2095 #
	AR_ARX+V6CTR		2096 #
	AR_ARX+XR		2175 #	2997
	AR_ARX-1		1650 #	4515	5900
	AR_ARX-BR		1654 #
	AR_AR AND CSMSK		1956 #
	AR_AR OR PUR		1957 #
	AR_AR SWAP		2232 #	3133	3597	3600	5118	5169	5198	6338	6405	6958	7897
	AR_AR*.25		1582 #
	AR_AR*.25 LONG		2228 #	4782	4800	5227	5452	5488	5677	5679
	AR_AR*.5		1590 #	5525
	AR_AR*.5 LONG		1592 #	5681	5704
	AR_AR*1.25 LONG		2227 #
	AR_AR*10		1681 #
	AR_AR*10 LONG		2226 #
	AR_AR*2			1570 #	6419
	AR_AR*2 LONG		1576 #	5455
	AR_AR*4			1571 #	6509	6530	6568	6584
	AR_AR*4 LONG		1577 #	5457
	AR_AR*5 LONG		2225 #
	AR_AR*8			1572 #
	AR_AR*8 LONG		1578 #	5459	5466	5479
	AR_AR*AC0		1535 #	3363	3373	3388	3405	3415	3425	3435	3445	3456	3476	3486
				3605	3606	3607	4364	4699	5877
	AR_AR*AC1		1536 #
	AR_AR*BR		1665 #	3878
	AR_AR*LH.AGE		1961 #	6897
	AR_AR*MSK		1775 #
	AR_AR*MUSBT1		2083 #
	AR_AR*RH.AGE		1962 #	6899
	AR_AR*SFLGS		1781 #
	AR_AR*SLEN		1762 #
	AR_AR*T0		1750 #
	AR_AR+1			1634 #	3667	5682	5692	5785	6075	6561
	AR_AR+1 LONG		2214 #
	AR_AR+BR		1636 #	4466	4905	4908	4918	4972	4984	5322	5425	5513	5522	5606
				5633	5937	5940	6355	6376	6445	7896
	AR_AR+BR LONG		2222 #	4918	4972	4984	5633	6376	6445
	AR_AR+E1		1773 #
	AR_AR+SBR		1950 #
	AR_AR+T0		1748 #	5902
	AR_AR+T1		1755 #	5871	5896
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 196
; CROSS REFERENCE LISTING

	AR_AR+V1TIM		2085 #
	AR_AR+V2TIM		2086 #
	AR_AR+V3TIM		2087 #
	AR_AR+V4TIM		2088 #
	AR_AR+V5TIM		2089 #
	AR_AR+V6TIM		2090 #
	AR_AR+XR		2174 #	4451	4467
	AR_AR-1			1635 #	3682	4043	4062	6562
	AR_AR-BR		1642 #	4712	4906	4907	4921	4974	5938	7882
	AR_AR-BR LONG		2223 #	4921	4974
	AR_AR-BR-1		1644 #
	AR_AR-T0		1749 #
	AR_BRX			1606 #	4673	4834	5023	6590	6591	6595	6626
	AR_BR			1605 #	4439	4447	4663	4676	5003	5007	5062	5272	5274	5415	5521
				5596	5618	5689	5742	5782	5783	6087	6126	6131	6158	6177	6211
				6312	6363	6409	6693	6746	6889	6907	6917
	AR_BR COMP		1595 #	5693
	AR_BR COMP LONG		1597 #	5027
	AR_BR LONG		1608 #	5033	5035	5058	5512
	AR_BR*.5		1619 #	5328
	AR_BR*.5 LONG		1620 #
	AR_BR*2			1613 #	5131
	AR_BR*2 LONG		2220 #	4661	5474
	AR_BR*4 LONG		1618 #	5476
	AR_BR+1			1616 #
	AR_BR+1 LONG		2215 #
	AR_BR+1000000		1683 #
	AR_CACHE CNT		2567 #	6371	6430
	AR_CN7777		2082 #
	AR_DBR1			1931 #	3972
	AR_DBR2			1932 #	3974
	AR_DLEN			1763 #
	AR_DLEN COMP		1765 #
	AR_DLEN+1		1764 #
	AR_DSTP			1782 #
	AR_E0			1767 #
	AR_E1			1771 #
	AR_EBOX CNT		2565 #	6370	6429
	AR_EBUS			2524 #	2918	2920	6098
	AR_EBUS REG		2542 #	3945	6319	6334	6676	6686
	AR_FILL			1777 #
	AR_FM			1714 #	3970	3972	3974	5032	5052	5865	5907	6671	6673	6755	6955
				7075
	AR_FM(VMA)		1546 #
	AR_FM+1			1715 #
	AR_GCSTBR		2123 #
	AR_INTERVAL		2569 #	6384
	AR_LH.AGE		1937 #
	AR_MEM			2606 #	3034	3046	3052	3977	3984	3987	3990	4332	4456	5814	5816
				5839	6560	6570	6895	6896	7907	7908
	AR_MQ			1553 #	4554	4580	4592	4606	4936	4937	4938	4939	4985	4991	5006
				5053	5288	5424	5641	5656	5658	5846	5876	5941	6581	6598	7112
	AR_MQ COMP		1598 #	5675
	AR_MQ*.25		1584 #	5470
	AR_MQ*2			1621 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 197
; CROSS REFERENCE LISTING

	AR_MQ*4			1585 #	6616
	AR_MQ*AC1		1661 #
	AR_MQ*AC2		1662 #
	AR_MQ*AC3		1663 #
	AR_MQ+1			1656 #	7889
	AR_MQ+AC0		1660 #	3742
	AR_MQ-1			1658 #
	AR_MQ-BR		1659 #
	AR_MTR REQ		2572 #	6418
	AR_MUSAOB+1		2081 #
	AR_MUSBT1		2079 #
	AR_MUSBT2		2080 #
	AR_MUSTIM		2078 #
	AR_PC			2202 #	3809	3875	7092	7117
	AR_PC+1			2203 #	4013	4082	4087	4321
	AR_PERF CNT		2563 #	6369	6428
	AR_PERIOD		2570 #	6386
	AR_PUR+AR0		1959 #
	AR_SERIAL		2558 #	6156
	AR_SFLGS		1780 #
	AR_SHIFT		1556 #	3094	3338	3860	3873	4267	4284	4327	4338	4505	4507	4532
				4537	4684	4685	4744	5001	5004	5017	5061	5143	5544	5601	5685
				5701	5708	5827	5849	5851	6139	6313	6448	6600	6603	6880	6881
				6883	6884	6908	6909	6910	7106
	AR_SIGN			2133 #	3063	3093	4648	4649	4660	4745	4846	4849	4995	5060	5137
				5138	5319	5321	5381	5417	5589	5592
	AR_SLEN			1757 #
	AR_SLEN COMP		1759 #
	AR_SLEN+1		1758 #
	AR_SRCP			1778 #
	AR_STBR			2124 #
	AR_SV.AR		1923 #	6671
	AR_SV.ARX		1925 #	6673
	AR_SV.BR		1927 #
	AR_SV.PFW		1918 #	7075
	AR_SV.SC		1929 #	6955
	AR_SV.VMA		1919 #	6755
	AR_T0			1747 #	5032	5865
	AR_T1			1753 #	5052
	AR_T2			1754 #	5907
	AR_TIME BASE		2561 #	6368	6427
	AR_UPFW			1938 #	3970
	AR_VMA HELD		2209 #	7092
	AR_XR			1545 #	3810
	B DISP			2493 #	3313	3595	3598	3602	4030	4536	4654	4674	4678	4967	5111
				5113	5118	5568	6074	6366	6374
	B WRITE			2587 #	3946	4744	5536	5540	6058	6208	6338
	BAG-BITING NO-OP	2674 #	3985	3988	3991
	BLKO TIM(L)		2575 #	6404	6406
	BLKO TIM(R)		2576 #	6405
	BR_AR LONG		1568 #	3341	4660	4776	4919	4922	5023	5025	5027	5028	5033	5035
				5058	5059	5236	5318	5415	5466	5479	5502	5505	5508	5512	5513
				5571	5575	5579	6463	6465
	BYTE DISP		2514 #	2914	3902	5280	5283	5545	5748	5757	6051	6357
	BYTE INDRCT		2601 #	5801	5802
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 198
; CROSS REFERENCE LISTING

	BYTE READ		2600 #	5799	5800
	CALL			2474 #	3860	3874	3944	3962	3977	4017	4266	4283	4324	4325	4412
				4435	4569	4595	4664	4736	4758	4991	5008	5031	5047	5053	5203
				5205	5237	5241	5318	5587	5632	5641	5653	5654	5667	5736	5751
				5752	5760	5762	5892	5906	5908	6050	6057	6088	6137	6145	6147
				6152	6155	6157	6166	6191	6201	6290	6300	6303	6310	6311	6318
				6327	6333	6342	6351	6363	6380	6382	6394	6402	6419	6468	6546
				6569	6570	6573	6580	6584	6585	6599	6606	6614	6615	6618	6619
				6624	6625	6627	6633	7093	7106	7889	7907	7908	7909
	CALL.C			2477 #
	CALL.M			2475 #	4824	4827	4877	4886	4983	5320	5657	5659	5739	5749	5758
				5864	5870	6163	6198	6294	6324	6375	6392	6444	6567	6634
	CALL.S			2476 #	3317	3333	4964	5174	5567
	CHDTIM			2055 #
	CHDTIM_AR		2102 #
	CLR ACCOUNT EN		2677 #	2917	6664	6665
	CLR AR			2158 #	5414	5505	5508
	CLR ARX			2159 #	4569	4673	4735	4756	5415	5420	5469	5521	5522	5604	5688
				5907	6350	6598	6895	6896
	CLR EBUS DEMAND		2534 #	6099
	CLR EXP			2388 #
	CLR FE			2337 #	5486	6290	6503	6504	6510
	CLR FPD			2639 #	5753	5767
	CLR INTRPT INH		2660 #	6984
	CLR MQ			2160 #	4960	5705
	CLR MTR PA EN		2676 #
	CLR PT LINE		2628 #	6356
	CLR P			2386 #
	CLR SC			2264 #	4596	5049
	CLR SR2			2716 #
	CLR TRACKS EN		2680 #
	CLR TRK+PA EN		2682 #
	CMS FETCH		2597 #
	CN100			1884 #	6888
	CN1000			1883 #	6926	6932
	CN7777			2056 #
	COMP FETCH		2592 #	3633
	CONI APR(L)		2548 #	6169
	CONI APR(R)		2549 #	6168
	CONI MTR		2571 #	6396
	CONI PAG		2557 #	6329
	CONI PI(L)		2551 #	6206
	CONI PI(PAR)		2553 #	6204
	CONI PI(R)		2552 #	6202
	CONO APR		2547 #	6165
	CONO MTR		2574 #	6393
	CONO PAG		2556 #	6325
	CONO PI			2550 #	3861	6199	7107
	CONO TIM		2573 #	6381
	CONTINUE		2666 #	3902
	DATAI APR(L)		2546 #	6153
	DATAI PAG(L)		2555 #	4325	6311
	DATAO APR		2545 #	3978	6146
	DATAO PAG(L)		2554 #	6295
	DBR1			1877 #	3972	3989	6883
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 199
; CROSS REFERENCE LISTING

	DBR1_AR			1907 #	3989
	DBR2			1878 #	3974	3992	6884
	DBR2_AR			1908 #	3992
	DBR3			1879 #	6881
	DBR4			1880 #	6880
	DIAG IN			2541 #	2966	2973	3945	4325	6153	6168	6169	6202	6204	6206	6311
				6319	6329	6334	6368	6369	6370	6371	6384	6386	6396	6418	6427
				6428	6429	6430	6676	6686
	DIAG OUT		2540 #	3861	3978	6146	6165	6199	6295	6325	6381	6393	6404	6405
				6406	7107
	DISMISS			2654 #	3790	3792	6071	6571
	DIVIDE			4865 #	4868	4871	4876	4885	4901	4902	4903	4904	4905	4906	4907
				4908	4932	4933	4934	4935	5257	5258	5935	5936	5937	5938
	DLEN			1711 #
	DLEN_AR			1740 #
	DROP EBUS REQ		2530 #	6111
	DSTP			1712 #
	DSTP_AR			1745 #
	E0			1704 #
	E0_AR			1737 #
	E1			1705 #
	E1_AR			1738 #
	EA MOD DISP		2494 #	2939	3011	3783	3866	4441	4459	4463	5797	5805
	EA TYPE DISP		2495 #	4456
	EPT FETCH		2610 #	6517	6532	6533	6547
	EPT REF			2609 #	6464	6550	6590	6609	7112	7126
	EXEC REF		2616 #	6742	6928	6934
	EXIT			2584 #	3133	3142	3252	3254	3257	3260	3264	3268	3277	3278	3284
				3285	3291	3292	3298	3299	3353	3363	3373	3388	3405	3415	3425
				3435	3445	3456	3466	3476	3486	3496	4699	4712	4761	4833	4835
	EXIT DBL		2585 #	3064	4972	4974	5063	5065
	EXP TEST		2644 #
	EXP TST			2385 #	5526	5705
	EXP_-SC-1		2394 #	5284
	EXP_-SC-1 TST		2396 #
	EXP_1			2389 #	5642
	EXP_FE TST		2395 #	5526	5705
	EXP_SC			2393 #	5280
	EXP_SCAD		2383 #	5280	5284	5642
	EXP_SCAD.C		2384 #	5526	5705
	EXP_SIGN		2390 #	5119	5122	5130	5170	5173	5193	5199	5298	5316	5361	5565
				5617
	EXP_SIGN.C		2391 #
	EXP_SIGN.M		2392 #	5638
	FETCH			2590 #	2886	3841	4020	4049	4082	4090	4101	4515	6572
	FETCH WAIT		171 #	3143	5327	5328
	FETCH+1			2591 #
	FE_#			2310 #	4569	4573	4576	4595	4735	4757	4840	4847	4850	4936	4937
				4938	4939	4977	4992	5047	5172	5202	5239	5380	5576	5634	5666
				5780	5893	5894	5933	5942	6353	6746	6936	7001
	FE_# AND S		2306 #	6531	6598	6614	6623
	FE_#+AR0-8		2327 #
	FE_#+SC			2312 #	5175
	FE_#-SC			2313 #	5847
	FE_+#			2311 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 200
; CROSS REFERENCE LISTING

	FE_-1			2339 #	5026	5329	6536
	FE_-SC-1		2309 #	6965
	FE_1			2338 #	5020
	FE_AR0-8		2325 #	3899	5314	6880	6881	6883	6884
	FE_AR0-8 AND #		2328 #
	FE_AR0-8 COMP		2326 #
	FE_EXP			2320 #	5119	5122	5316	5565	6957
	FE_EXP+1		2321 #
	FE_EXP+SC		2323 #	5361
	FE_EXP-#		2324 #	4273	5397
	FE_EXP-1		2322 #	5193
	FE_FE AND AR0-8		2330 #
	FE_FE AND #		2319 #
	FE_FE OR #		2318 #
	FE_FE OR AR0-8		2329 #
	FE_FE SHRT		2336 #
	FE_FE+#			2316 #	5213	5216	5452	5474	5678	5680
	FE_FE+1			2340 #	4777	4782	4784	4786	4788	4795	4797	4799	4800	4805	4983
				5140	5141	5144	5330	5476	5525	5656	5658	5681	5704
	FE_FE+SC		2314 #	5131	5619
	FE_FE-#			2317 #	5457	5459	5467	5471	5480	5488
	FE_FE-1			2341 #	4608	4609	4868	4871	4876	4885	4901	4902	4903	4904	4905
				4906	4907	4908	4932	4933	4934	4935	5257	5258	5455	5684	5935
				5936	5937	5938	6355
	FE_FE-SC		2315 #	5685	5701
	FE_P			2307 #	4504	4507
	FE_P AND #		2333 #
	FE_P AND SC		2334 #
	FE_P+SC			2335 #
	FE_S			2305 #	5796
	FE_SC			2308 #	4780	4792	4919	4922	5845
	FILL			1708 #
	FILL_AR			1742 #
	FIN STORE		2604 #	3064	3065	3071	3073	3651	4020	4029	4090	4101	4285	4321
				5744	5764	6061	7117	7917
	FIN XFER		2605 #	3040	6056	6467	7719
	FINISH			2505 #	5009
	FM_AR			1716 #	3986	3989	3992	5014	5030	5735	5866	5874	5876	6505	6666
				6667	6684	6692	6693	6694	6699	6707	6731	6919	7113
	FORCE AR-ARX		1628 #	3985	3988	3991	6664	6665
	GCSTBR			2118 #
	GEN # AND AR0-8		2354 #
	GEN # AND SC		2265 #
	GEN #+AR0-8		2353 #
	GEN #+SC		2351 #	4668	5590
	GEN #-SC		2352 #
	GEN -AR LONG		2216 #	4870	4873	5299	5542	5573	5711
	GEN -SC-1		2343 #
	GEN AC0			1509 #
	GEN AR			1623 #	4450	4452	4468	5644	6095	6098	6100	6102	6113	6115	6121
				6208
	GEN AR*AC0		1534 #	3633	4366	4368	5578
	GEN AR*BR		1638 #	4759	4993
	GEN AR*T0		1752 #
	GEN AR+1		1632 #	5780
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 201
; CROSS REFERENCE LISTING

	GEN AR+2BR		1675 #	5303
	GEN AR+BR		1639 #
	GEN AR+E1		1774 #
	GEN AR+XR		2170 #	4451	4453	4467	4470
	GEN AR-1		1633 #
	GEN AR-2BR		1676 #	5301
	GEN AR-AC3		1655 #
	GEN AR-BR		1640 #
	GEN AR-BR-1		1641 #
	GEN ARX			1624 #	2999	5801
	GEN ARX COMP		1625 #
	GEN ARX*CN1000		1963 #	6926	6932
	GEN ARX*SV.VMA		1964 #	6740
	GEN ARX+XR		2171 #	2997	3001	5800	5802
	GEN BR*2		1627 #	6700
	GEN CRY18		2646 #	3754	3801	4010	4014	5464	6067	6075	6931	7104
	GEN FE			2344 #	2913
	GEN FE AND #		2347 #	6912
	GEN FE AND S		2350 #
	GEN FE AND SC		2346 #
	GEN FE-#		2349 #	5328
	GEN FE-1		2348 #	3902
	GEN FE-SC		2345 #	5840
	GEN MQ			1626 #
	GEN MUSDEV		2076 #
	GEN P AND SC		2332 #	2974
	GEN P AND #		2331 #
	GEN P-#			2359 #
	GEN P-S			2355 #
	GEN SC			2342 #	5283	6893
	GEN STBR		2121 #
	GEN SV.PFW		1939 #	6741	6927	6933
	GEN S AND #		2379 #
	GET ECL EBUS		2537 #	2943	6132	6417	6668
	HALT			2656 #	3786
	I FETCH			2588 #	3040	3063	3065	3071	3073	3320	4029	4503	4539	4558	4583
				4596	4659	4684	4878	4887	5007	5048	5323	5421	5422	5544	5709
				5744	5753	5764	5873	5909	6070	7917
	INH CRY18		2647 #	4043	4062	4364	5902
	IO INIT			2525 #	6113
	IR DISP			2492 #	3029	3035	3041	3047	3053
	JFCL FETCH		2596 #	3877
	JFCL S			2653 #	3879
	JFCL T			2652 #	3875
	JPC0			1995 #
	JPC0_AR			2029 #
	JPC1			1996 #
	JPC10_AR		2037 #
	JPC10			2003 #
	JPC11_AR		2038 #
	JPC11			2004 #
	JPC12_AR		2039 #
	JPC12			2005 #
	JPC13_AR		2040 #
	JPC13			2006 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 202
; CROSS REFERENCE LISTING

	JPC14_AR		2041 #
	JPC14			2007 #
	JPC15_AR		2042 #
	JPC15			2008 #
	JPC16_AR		2043 #
	JPC16			2009 #
	JPC17_AR		2044 #
	JPC17			2010 #
	JPC1_AR			2030 #
	JPC2			1997 #
	JPC2_AR			2031 #
	JPC3			1998 #
	JPC3_AR			2032 #
	JPC4			1999 #
	JPC4_AR			2033 #
	JPC5			2000 #
	JPC5_AR			2034 #
	JPC6			2001 #
	JPC6_AR			2035 #
	JPC7			2002 #
	JPC7_AR			2036 #
	JUMP FETCH		2594 #	3701	3720	3742	3754
	LD PREV CTXT		2559 #	4326
	LH.AGE			1881 #	6897
	LH.AGE_AR		1909 #
	LOAD AR			2580 #	3959	3983	3986	3989	4331	5024	6078	6464	6465	6506	6550
				6551	6556	6574	6609	7126	7902	7903	7910
	LOAD AR VIA RPW		2583 #	6892
	LOAD ARX		2581 #	2984	3313	4017	4039	4042	4286	4963	5566	6467	6515	6536
	LOAD EBR		2619 #	6343
	LOAD IR			2582 #	2945	2949	2989	4419	4439	4447
	LOAD UBR		2620 #	6301
	MAP			2618 #	6682
	MB WAIT			2603 #	3028	3064	3943	4457	4972	4974	5063	5065	5842	6056	6061
				6141	6304	6350	6676	6684	7073	7719
	MEM_AR			2608 #	3337	3971	3973	4026	4031	4323	4330	5796	6063	6074	6447
				6571	6904	7125	7915	7918
	MQ_0.C			2139 #
	MQ_0.M			2149 #	4566	4580	5140	5141	5144	5597	5600	5657	5659	5870
	MQ_0.S			2144 #	3317	3333	4964	5565
	MQ_1			2164 #
	MQ_1S			2130 #
	MQ_AD			1558 #
	MQ_ARX			1552 #	4577	5030	5620	5622
	MQ_ARX COMP		1602 #
	MQ_AR			1551 #	2996	2998	3156	4569	4734	4756	4936	4937	4938	4939	4985
				4991	5053	5132	5135	5172	5630	5634	5641	5693	5695	5839	5907
				6365	6419	6505	6506	6507	6508	6509
	MQ_AR (AD)		1559 #
	MQ_AR SWAP		2234 #
	MQ_BR COMP		1601 #
	MQ_MQ*.25		1587 #	5005	5677
	MQ_MQ*2			1581 #	5003	5043	5045
	MQ_MQ+1			1657 #
	MQ_SHIFT		1555 #	4549	4556	4575	4582	4589	4594	4673	4976	5137	5419	5468
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 203
; CROSS REFERENCE LISTING

				5594	5603	5605	5688	5689	6299	7104
	MSK			1707 #
	MSK_AR			1741 #
	MUL			4774 #	4777	4782	4784	4786	4788	4795	4797	4799	4800	4805	4983
	MUSAOB			2049 #
	MUSAOB_AR		2101 #
	MUSBT1			2053 #
	MUSBT1_AR		2099 #
	MUSBT2			2054 #
	MUSBT2_AR		2100 #
	MUSDEV			2050 #
	MUSMIN			2051 #
	MUSTIM			2052 #
	MUSTIM_AR		2098 #
	NO CRY			2463 #	3594	3597
	NORM			2518 #	5147	5215	5227	5453	5467	5472	5480	5489	5514	5522	5607
				5644	5662	5682	5690	5694	5695
	NORM AR			2519 #	5175
	NORM -AR		2520 #	5451
	NXT INSTR		2496 #	3068	3087	3095	5009
	NXT INSTR AFTER AC1	2504 #	3095
	PC_VMA			2200 #	3896	7066
	PF DISP			2517 #	6668	6691
	PFA_AR			1898 #
	PHYS REF		2615 #	6556	6574	6595	6892
	PORTAL			2655 #
	PT FETCH		2614 #
	PT REF			2613 #	2984
	PT SEL_INVAL		2630 #	6292
	PT SEL_NORMAL		2631 #	6358
	P_#			2378 #
	P_-SC			2369 #	5911
	P_1S			2387 #
	P_FE			2377 #	4509
	P_FE OR SC		2382 #
	P_FE+SC			2381 #
	P_FE-S			2380 #	5785
	P_P AND #		2374 #
	P_P AND SC		2372 #
	P_P OR #		2373 #
	P_P OR SC		2370 #	6687
	P_P OR SC#		2371 #
	P_P+#			2375 #
	P_P+1			2366 #
	P_P+S			2365 #
	P_P-#			2376 #
	P_P-S			2364 #	5739	5748	5757	6634
	P_SC			2367 #	5864	5870	6315
	P_SC#			2368 #	6918
	P_SCAD			2360 #	4509
	P_SCAD#			2363 #	6918	6925
	P_SCAD.C		2362 #	5785
	P_SCAD.M		2361 #	5739	5748	5757	5864	5870	5911	6315	6634	6687
	RD+CLR C CNT		2568 #	6430
	RD+CLR E CNT		2566 #	6429
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 204
; CROSS REFERENCE LISTING

	RD+CLR PA		2564 #	6428
	RD+CLR TB		2562 #	6427
	READ EBR		2621 #	6332	6552	6592
	READ ERA		2623 #	6189
	READ UBR		2622 #	6317
	REFETCH			2589 #
	REL EBUS		2529 #	3865	6102	6208	7108
	REL ECL EBUS		2538 #	2971	2972	2976	2977	3946	3979	6058	6336	6348	6376	6421
				6431	6691
	REQ EBUS		2528 #	3860	6088	6212	7106
	REQ SV.VMA		1922 #	6970
	REQ VMA HELD		2207 #
	RETURN0			2479 #	6971
	RETURN1			2480 #	5799	5800	6128	6132	6448	6469
	RETURN10		2487 #
	RETURN12		2488 #	6608
	RETURN2			2481 #	4606	5302	5304	5827	5828	5942	7719	7898	7919
	RETURN3			2482 #	3341	4338	4878	4887	4936	4939	5842	5851	6103	6116	6321
	RETURN4			2483 #	4792	5621	5623	5779	5782	5783	5786	6603
	RETURN5			2484 #	4937	4938
	RETURN6			2485 #	4780	4880	4889	4920	4923
	RETURN7			2486 #	4881	4890
	RH.AGE			1882 #	6899
	RH.AGE_AR		1910 #
	RSTR FLAGS_AR		2651 #	3809
	SBUS DIAG		2625 #	6192
	SC_#			2266 #	2918	2920	3319	3332	3335	3784	3802	3863	3871	3874	4265
				4282	4323	4501	4569	4595	4677	4686	4741	4761	4833	4835	4967
				4996	5016	5060	5237	5416	5463	5469	5509	5538	5606	5644	5661
				5674	5683	5689	5919	6137	6296	6303	6305	6309	6320	6328	6342
				6351	6366	6377	6425	6445	6530	6546	6568	6584	6602	6671	6673
				6874	6877	6895	6896	6907	6908	6909	6910	6917	7092	7105
	SC_# AND AR0-8		2293 #
	SC_# AND S		2274 #
	SC_# OR SC		2271 #
	SC_#+SC			2269 #	4532	4535	4537	4552	4555	4590	4592	4646	4650	4672	4674
				5132	5139	5262	5264	5302	5304	5593	5620	5631	6685
	SC_#-SC			2267 #	4338	5135	5622	5761	5814	5848	6626
	SC_#-SC-1		2268 #
	SC_-SC			2278 #
	SC_-SC-1		2279 #	6968
	SC_1			2280 #	2943	3836	4826	5014	5020	5892	6905
	SC_1S			2281 #	5050
	SC_AR0-8		2301 #	6889
	SC_AR0-8 AND #		2289 #
	SC_EA			2292 #	4498	4523	4525	4544	4547	4570	4573	5359
	SC_EXP			2294 #	5170	6957	6963
	SC_EXP+1		2295 #	5199
	SC_EXP+SC		2297 #	5173	5638
	SC_EXP-#		2298 #	5271	5273
	SC_EXP-1		2296 #
	SC_EXP-SC		2299 #	5130	5298	5617
	SC_FE			2282 #	5239	5323	5819	5846
	SC_FE AND #		2291 #
	SC_FE+#			2288 #	5418
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 205
; CROSS REFERENCE LISTING

	SC_FE+1			2283 #
	SC_FE+SC		2285 #	4578	4581	5752	5821	6619
	SC_FE-#			2290 #
	SC_FE-1			2284 #	5580
	SC_FE-SC		2286 #	5850	5867
	SC_FE-SC-1		2287 #
	SC_P			2277 #	5751	5760	5860	6635
	SC_P AND #		2273 #
	SC_P AND SC		2272 #
	SC_P-#			2275 #	5910
	SC_PF.ILW		1970 #	6917
	SC_PF.PNA		1971 #	6907
	SC_S			2276 #	5736	5906
	SC_SC AND #		2270 #	6890
	SET ACCOUNT EN		2678 #	2938	6422	6433	6971	7074	7128	7133
	SET AROV		2640 #	4669	4745	4762	4997	5413
	SET CONS XCT		2667 #	3905
	SET DATAI		2527 #	6580	6615
	SET DATAO		2526 #	6570
	SET EBUS DEMAND		2533 #	6096
	SET FL NO DIV		2643 #	5206	5242	5669
	SET FLAGS_AR		2650 #	2885
	SET FLOV		2642 #	5329
	SET FPD			2638 #	5796	6078	6079
	SET HALTED		2665 #	2915	3895
	SET IO PF		2669 #	7132
	SET MTR PA EN		2675 #
	SET NO DIVIDE		2641 #	4830
	SET PC+1 INH		2659 #	2985
	SET PI CYCLE		2658 #	2913	6432	6501
	SET PXCT		2664 #	4416
	SET SR1			2713 #	5227	5451
	SET SR2			2714 #	5035
	SET SR3			2715 #	5055
	SET SXCT		2663 #	4437
	SET TRACKS EN		2679 #
	SET TRK+PA EN		2681 #
	SFLGS_AR		1744 #
	SFLGS			1709 #
	SH DISP			2510 #	2967	3836	4605	6501	6531	6905
	SIGNS DISP		2515 #	4841	5034	5036	6700	6872
	SKIP FETCH		2593 #	3651
	SKP -EBUS GRANT		2531 #	6110
	SKP -EBUS XFER		2532 #	6100
	SKP -START		2429 #	3898
	SKP AC REF		2435 #
	SKP AC#0		2428 #	3066	3652	4438	5350
	SKP AC0+		2449 #	4920
	SKP AC0-		2448 #	4923
	SKP AD NE		2424 #	4501	5322	5871
	SKP AD0			2419 #	4367	4369	4759	4993	5021	5203	5240	5578	5665	6741	6927
				6933
	SKP ADX0		2420 #
	SKP AR EQ		2459 #	3906	5281	5546
	SKP AR GT BR		2442 #	6607
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 206
; CROSS REFERENCE LISTING

	SKP AR GT FM		2443 #
	SKP AR NE		2453 #	5894
	SKP AR SIG		2447 #	4665	4741
	SKP AR0			2416 #	3136	3288	3295	4365	4512	4828	4848	4851	5272	5274	5327
				5330	5380	5639	6957	6963
	SKP AR1			2450 #
	SKP AR18		2421 #	3274	3281	4499	4523	4525	4544	4547	4570	4573	6299
	SKP AR2			2451 #	6296
	SKP AR6			2452 #	6507	6509	6560	6582
	SKP ARX LE BRX		2445 #
	SKP ARX LT BRX		2444 #	7914
	SKP ARX NE		2455 #	5449
	SKP ARX+MQ NE		2458 #	5674
	SKP ARX0		2417 #
	SKP ARX2		2454 #
	SKP BR EQ		2456 #	5214	5861
	SKP BR EQ -1		2457 #	7891
	SKP BR0			2418 #	5047	5205	5241	5298	5668
	SKP CRY0		2426 #	4010	4014	4043	4062	5026	5044	5045	5282	5301	5303	5336
				5464	5692
	SKP EXP NE		2440 #	5326
	SKP FE0			2439 #	5032
	SKP FETCH		2436 #
	SKP INTRPT		2427 #	3000	3002	3903	3928	4266	4283	4413	4452	4453	4469	4471
				5804	6114	7001	7912
	SKP IO LEGAL		2535 #	3786	3943	6050	6057	6138	6145	6147	6152	6155	6164	6167
				6191	6198	6201	6291	6294	6309	6324	6327	6364	6380	6383	6392
				6395	6403
	SKP KERNEL		2431 #	3962	3977	4412	4435
	SKP MQ EQ -1		2446 #
	SKP PI CYCLE		2536 #	6063	6067	6076	7075
	SKP P NE		2441 #
	SKP P!S XCT		2433 #	7903
	SKP RPW			2434 #	6672
	SKP RUN			2430 #
	SKP SC LE 36		2437 #
	SKP SC NE		2438 #	4644
	SKP SC0			2422 #	5054
	SKP SCAD NE		2425 #	2974	4504	4507	5328	6893	6912
	SKP SCAD0		2423 #	4273	4533	4536	4538	4552	4555	4578	4581	4590	4592	4608
				4609	4646	4651	4668	5130	5133	5135	5139	5397	5418	5591	5593
				5617	5621	5623	5740	5762	5814	5821	5841	6627	6634
	SKP USER		2432 #
	SLEN			1706 #
	SLEN_AR			1739 #
	SR DISP			2516 #	5055	5056	5061	5245	5247	5454	5456	5458	5460	5475	5477
				5478	5487	5506	5510	5526	5705	5806	5816	6692	6986	7151
	SRCP			1710 #
	SRCP_AR			1743 #
	SR_#			2686 #	4065	5111	5113	5164	5165	5194	5244	5246
	SR_0			2687 #	3080	3087	3094	4332	5536	5540	5550	5552	5700	5710	7066
				7148
	SR_1			2688 #	5262	5264	5654	5676
	SR_BLT(DST)		2690 #	7907	7908	7909
	SR_BLT(SRC)		2689 #	7897	7919
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 207
; CROSS REFERENCE LISTING

	SR_JRSTF		2711 #	3836
	STBR			2119 #
	STORE			2586 #	3154	3332	3335	3338	3667	3682	3970	3972	3974	4011	4015
				4067	4087	4096	4284	4320	4321	4328	5337	5339	5779	5785	5851
				6075	6159	6194	6377	6446	6448	6561	6562	6590	6591	6595	6683
				6898	6900	7112	7118	7912
	SV.ARX			1895 #	6667	6673	6967	6968	7026
	SV.ARX_AR		1902 #	6667
	SV.AR_AR		1901 #	6666
	SV.AR			1894 #	6666	6671	6964
	SV.BR_AR		1903 #	6694
	SV.BR			1886 #	6694	6918	6958
	SV.IOPF_AR		1699 #	7094
	SV.PAR			1896 #	6684
	SV.PAR_AR		1905 #	6684
	SV.PFW			1891 #	6692	6693	6741	6919	6927	6933	7075
	SV.PFW_AR		1899 #	6692	6693	6919
	SV.SC_AR		1904 #	6699
	SV.SC			1892 #	6699	6955
	SV.VMA			1885 #	6707	6731	6740	6755	6755	6925	6970	6985
	SV.VMA_AR		1900 #	6707	6731
	SWEEP CACHE		2624 #	6140
	T0			1701 #	5014	5032	5735	5865	5902	6505	6515
	T0_AR			1734 #	5014	5735	6505
	T1			1702 #	5030	5052	5866	5871	5874	5896
	T1_AR			1735 #	5030	5866	5874
	T2			1703 #	5876	5907
	T2_AR			1736 #	5876
	TAKE INTRPT		2661 #	3005	3900	4339	4417	4420	4457
	TEST AR			2464 #
	TEST AR.AC0		2467 #	3602
	TEST AR.BR		2468 #	3877	6062	6064
	TEST AR.MSK		2469 #
	TEST ARX		2465 #
	TEST ARX.AR*4		2466 #
	TEST BRL		2470 #	6067
	TEST FETCH		2595 #	3594	3597	3602	6062	6064	6067
	TRAP1			2635 #	3846
	TRAP2			2636 #	3847	4026	4031	4046	4064
	TRAP3			2637 #	2978	3848
	UPFW			1876 #	3970	3986	7113
	UPFW_AR			1911 #	3986	7113
	UPT FETCH		2612 #
	UPT REF			2611 #	4320	4331	6465
	USER REF		2617 #	6743	6929	6935
	V1BR			2057 #
	V1CTR_AR		2103 #
	V1CTR			2063 #
	V1TIM_AR		2109 #
	V1TIM			2069 #
	V2BR			2058 #
	V2CTR_AR		2104 #
	V2CTR			2064 #
	V2TIM_AR		2110 #
	V2TIM			2070 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 208
; CROSS REFERENCE LISTING

	V3BR			2059 #
	V3CTR_AR		2105 #
	V3CTR			2065 #
	V3TIM_AR		2111 #
	V3TIM			2071 #
	V4BR			2060 #
	V4CTR_AR		2106 #
	V4CTR			2066 #
	V4TIM_AR		2112 #
	V4TIM			2072 #
	V5BR			2061 #
	V5CTR_AR		2107 #
	V5CTR			2067 #
	V5TIM_AR		2113 #
	V5TIM			2073 #
	V6BR			2062 #
	V6CTR_AR		2108 #
	V6CTR			2068 #
	V6TIM_AR		2114 #
	V6TIM			2074 #
	VMA_#			2192 #	4267	6420	6455	6457	6459	6461	7073
	VMA_#+AR32-35		2199 #
	VMA_40			2193 #	4284
	VMA_40+PI*2		2195 #	6503	6504	6510
	VMA_41			2194 #	4285
	VMA_41+PI*2		2196 #	6514
	VMA_420+TRAP		2197 #	2967
	VMA_430+MODE		2198 #	4330
	VMA_AC0			2185 #
	VMA_AC1			2186 #
	VMA_AC3			2187 #
	VMA_AR			2177 #	4017	4039	6074	6140	6343	6506	6507	6508	6547	6552	6618
	VMA_AR+1		2178 #	6585	6625
	VMA_AR+BR		2182 #	6574	6586
	VMA_AR+CBR		1953 #
	VMA_AR+E0		1769 #
	VMA_AR+E0+1		1770 #
	VMA_AR+E1		1772 #
	VMA_AR+SBR		1951 #
	VMA_AR+XR		2172 #
	VMA_AR-1		2179 #	6573
	VMA_ARX			2176 #	4049	5799	6592	7912
	VMA_ARX+BR		2183 #	6890	7902	7903	7910
	VMA_ARX+CBR		1955 #
	VMA_ARX+FM		2184 #
	VMA_ARX+XR		2173 #	5800
	VMA_BR			2181 #	3841	4020	4067
	VMA_E0+1		1768 #
	VMA_MQ			2180 #	6301	6377	6532	6533	6536
	VMA_PC+1		2189 #
	VMA_SV.VMA		1921 #	6985
	VMA_T0+1		1751 #	6515
	VMA_VMA HELD		2208 #	6682
	VMA_VMA+1		2191 #	3313	3337	3959	3964	3970	3971	3973	3983	3984	3987	4090
				4101	4321	4323	4963	5018	5566	6193	6448	6467	6609	7118	7125
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 209
; CROSS REFERENCE LISTING

	VMA_VMA-1		2190 #	6446
	WR PT ENTRY		2629 #	6930	6936
	WR REFILL RAM		2626 #	6148
	XJPC0_AR		2012 #
	XJPC0			1978 #
	XJPC1_AR		2013 #
	XJPC1			1979 #
	XJPC10			1986 #
	XJPC10_AR		2020 #
	XJPC11			1987 #
	XJPC11_AR		2021 #
	XJPC12			1988 #
	XJPC12_AR		2022 #
	XJPC13			1989 #
	XJPC13_AR		2023 #
	XJPC14			1990 #
	XJPC14_AR		2024 #
	XJPC15			1991 #
	XJPC15_AR		2025 #
	XJPC16			1992 #
	XJPC16_AR		2026 #
	XJPC17			1993 #
	XJPC17_AR		2027 #
	XJPC2_AR		2014 #
	XJPC2			1980 #
	XJPC3_AR		2015 #
	XJPC3			1981 #
	XJPC4_AR		2016 #
	XJPC4			1982 #
	XJPC5_AR		2017 #
	XJPC5			1983 #
	XJPC6_AR		2018 #
	XJPC6			1984 #
	XJPC7_AR		2019 #
	XJPC7			1985 #
	#OPTIONS		2672 #	6159
	(AR+ARX+MQ)*.25		1589 #	5697
	(AR+ARX+MQ)*2		1588 #	4780	4792	5684
	(MQ)*.25		1560 #	5697
	(MQ)*2			1561 #	4780	4792	5684
(D) MACRO%
	AC			2747 #	3105	3106	3114	3115	3119	3120	3124	3125	3163	3164	3168
				3169	3173	3174	3178	3179	3183	3184	3188	3189	3193	3194	3198
				3199	3205	3206	3210	3211	3215	3216	3220	3221	3225	3226	3230
				3231	3235	3236	3240	3241	3346	3347	3356	3357	3366	3367	3376
				3377	3381	3382	3398	3399	3408	3409	3418	3419	3428	3429	3438
				3439	3449	3450	3459	3460	3469	3470	3479	3480	3489	3490	4692
				4693	4704	4705	4717	4718
	B			2750 #	3349	3359	3369	3379	3384	3401	3411	3421	3431	3441	3452
				3462	3472	3482	3492	4695	4707	4720
	BLKI			2783 #	5975	6025	6036
	BLKO			2784 #	6027	6038
	CONI			2787 #	5958	5969	5980	6008	6019	6030	6041
	CONO			2788 #	5957	5968	5979	6007	6018	6029	6040
	CONSO			2789 #	5960	5971	5982	6010	6021	6032	6043
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 210
; CROSS REFERENCE LISTING

	CONSZ			2790 #	5959	5970	5981	6009	6020	6031	6042
	DATAI			2785 #	5954	5976	6026	6037
	DATAO			2786 #	5956	5978	6001	6003	6028	6039
	DBL AC			2751 #	4749	4750	4810	4811	4815	4816
	DBL B			2752 #	4752	4813	4818
	FL-AC			2753 #	5076	5081	5082	5086	5091	5092	5152	5157	5158	5181	5182
				5186	5187	5345	5374
	FL-BOTH			2755 #	5079	5084	5089	5094	5155	5160	5184	5189
	FL-MEM			2754 #	5078	5083	5088	5093	5154	5159	5183	5188
	I			2726 #	3110	3149	3505	3506	3507	3508	3509	3510	3521	3522	3523
				3524	3525	3526	3527	3528	3539	3540	3541	3542	3543	3544	3545
				3546	3557	3558	3559	3560	3561	3562	3563	3564	3613	3614	3615
				3616	3617	3618	3619	3620	3689	3690	3691	3692	3693	3694	3695
				3696	3708	3709	3710	3711	3712	3713	3714	3715	3727	3728	3729
				3730	3731	3732	3733	3734	3748	3749	3763	3764	3998	4001	4074
				4075	4076	4077	4113	4140	4141	4142	4144	4145	4146	4147	4149
				4150	4151	4152	4154	4155	4156	4157	4162	4163	4164	4165	4167
				4168	4169	4170	4172	4173	4174	4175	4177	4178	4179	4180	4184
				4185	4186	4187	4188	4189	4190	4191	4192	4193	4194	4195	4196
				4197	4198	4199	4201	4202	4203	4204	4205	4206	4207	4208	4222
				4223	4228	4229	4249	4250	4255	4256	4346	4350	4429	4479	4480
				4481	4482	4483	4484	4485	4489	4718	4750	4811	4816	5082	5092
				5158	5187	5345	5370	5955	5957	5958	5959	5960	5968	5969	5970
				5971	5977	5979	5980	5981	5982	5986	5987	5988	5989	5990	5991
				5992	5993	6007	6008	6009	6010	6016	6017	6018	6019	6020	6021
				6029	6031	6032	6040	6042	6043
	I-PF			2727 #	3106	3115	3120	3125	3164	3169	3174	3179	3184	3189	3194
				3199	3206	3211	3216	3221	3226	3231	3236	3241	3346	3347	3357
				3367	3377	3382	3392	3399	3409	3419	3429	3438	3439	3450	3460
				3470	3480	3489	3490	3503	3504	3512	3513	4693	4705
	IW			2740 #	3348	3349	3440	3441	3491	3492
	M			2748 #	3116	3121	3126	3165	3170	3175	3180	3185	3190	3195	3200
				3207	3212	3217	3222	3227	3232	3237	3242	3348	3358	3368	3378
				3383	3393	3394	3400	3410	3420	3430	3440	3451	3461	3471	3481
				3491	4694	4706	4719	4751	4812	4817	5964
	R			2729 #	3306	3307	3514	3515	3516	3517	3518	3519	3530	3531	3532
				3533	3534	3535	3536	3537	3548	3549	3550	3551	3552	3553	3554
				3555	3566	3567	3568	3569	3570	3571	3572	3573	3622	3623	3624
				3625	3626	3627	3628	3629	3640	3641	3642	3643	3644	3645	3646
				3647	3912	3999	4234	4235	4241	4428	4717	4749	4810	4815	4950
				4951	4952	4953	5076	5077	5081	5086	5087	5091	5152	5153	5157
				5181	5182	5186	5310	5346	5366	5373	5374	5558	5559	5560	5561
				5719	5721	5956	5966	5967	5978	6001	6003	6028	6039
	R-PF			2730 #	3105	3114	3119	3124	3163	3168	3173	3178	3183	3188	3193
				3198	3205	3210	3215	3220	3225	3230	3235	3240	3356	3366	3376
				3381	3391	3398	3408	3418	3428	3449	3459	3469	3479	4692	4704
	RPW			2733 #	3112	3117	3122	3127	3148	3165	3166	3170	3171	3176	3181
				3186	3191	3196	3201	3207	3208	3212	3213	3218	3223	3228	3233
				3238	3243	3358	3359	3368	3369	3378	3379	3383	3384	3400	3401
				3410	3411	3420	3421	3430	3431	3451	3452	3461	3462	3471	3472
				3481	3482	3656	3657	3658	3659	3660	3661	3662	3663	3671	3672
				3673	3674	3675	3676	3677	3678	4694	4695	4706	4707	5311
	RW			2731 #	4719	4720	4751	4752	4812	4813	4817	4818	5078	5079	5083
				5084	5088	5089	5093	5094	5154	5155	5159	5160	5183	5184	5188
				5189	5718	5720	5975	6025	6027	6036	6038
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 211
; CROSS REFERENCE LISTING

	S			2749 #	3112	3117	3122	3127	3166	3171	3176	3181	3186	3191	3196
				3201	3208	3213	3218	3223	3228	3233	3238	3243
	SJC-			2774 #	3613	3622	3640	3656	3671	3689	3708	3727
	SJCA			2778 #	3617	3626	3644	3660	3675	3693	3712	3731
	SJCE			2776 #	3615	3624	3642	3658	3673	3691	3710	3729
	SJCG			2781 #	3620	3629	3647	3663	3678	3696	3715	3734
	SJCGE			2779 #	3618	3627	3645	3661	3676	3694	3713	3732	3748
	SJCL			2775 #	3614	3623	3641	3657	3672	3690	3709	3728	3749
	SJCLE			2777 #	3616	3625	3643	3659	3674	3692	3711	3730
	SJCN			2780 #	3619	3628	3646	3662	3677	3695	3714	3733
	TC-			2765 #	3539	3540	3548	3549
	TCA			2767 #	3543	3544	3552	3553
	TCE			2766 #	3541	3542	3550	3551
	TCN			2768 #	3545	3546	3554	3555
	TN-			2757 #
	TNA			2759 #	3507	3508	3516	3517
	TNE			2758 #	3505	3506	3514	3515
	TNN			2760 #	3509	3510	3518	3519	3764
	TO-			2769 #	3557	3558	3566	3567
	TOA			2771 #	3561	3562	3570	3571
	TOE			2770 #	3559	3560	3568	3569
	TON			2772 #	3563	3564	3572	3573
	TZ-			2761 #	3521	3522	3530	3531
	TZA			2763 #	3525	3526	3534	3535
	TZE			2762 #	3523	3524	3532	3533
	TZN			2764 #	3527	3528	3536	3537
	W			2728 #	3116	3121	3126	3175	3180	3185	3190	3195	3200	3217	3222
				3227	3232	3237	3242	3326	3327	3393	3394	4000	4242	5953	5954
				5964	5965	5976	5999	6000	6014	6015	6026	6030	6037	6041
(U) MARK			1187 #
(U) MBOX CTL			1396 #	6732	6734	6736	6738	6744	6745
	CLR PT LINE		1403 #	6356
	NORMAL			1401 #	6358
	PT DIR CLR		1402 #	6292
	PT DIR WR		1399 #
	PT WR			1400 #	6930	6936
	SET IO PF ERR		1398 #	7132
	SET PAGE FAIL		1397 #
(U) MEM				1037 #
	A IND			1047 #	2999	3001	4452	4453	4468	4470
	A RD			1042 #	2995	2997	4450	4451	4460	4462	4466
	AD FUNC			1051 #	6970
	ARL IND			1039 #	4099	4440	4447	4498	4504	4566	4577	4580	4822	4824	4826
				4827	4877	4886	4983	5140	5141	5144	5280	5284	5287	5320	5359
				5450	5486	5545	5597	5600	5638	5642	5657	5657	5659	5659	5739
				5739	5748	5749	5757	5758	5860	5864	5864	5870	5870	5870	5878
				5898	5901	5911	6163	6163	6197	6198	6293	6294	6315	6323	6324
				6337	6374	6375	6391	6392	6443	6444	6567	6634	6634	6687	6697
				7881
	B WRITE			1043 #	3133	3142	3252	3254	3257	3260	3264	3268	3277	3278	3284
				3285	3291	3292	3298	3299	3353	3363	3373	3388	3405	3415	3425
				3435	3445	3456	3466	3476	3486	3496	3946	4699	4712	4744	4761
				4833	4835	5536	5540	6058	6208	6338
	BYTE IND		1048 #	5801	5802
	BYTE RD			1052 #	5799	5800
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 212
; CROSS REFERENCE LISTING

	FETCH			1044 #	2886	3040	3063	3065	3071	3073	3320	3594	3597	3602	3633
				3651	3701	3720	3742	3754	3841	3877	4020	4029	4049	4082	4090
				4101	4503	4515	4539	4558	4583	4596	4659	4684	4878	4887	5007
				5048	5323	5421	5422	5544	5709	5744	5753	5764	5873	5909	6062
				6064	6067	6070	6572	7917
	LOAD AR			1049 #	3959	3983	3986	3989	4331	5024	6078	6464	6465	6506	6550
				6551	6556	6574	6609	7126	7902	7903	7910
	LOAD ARX		1050 #	2984	3313	4017	4039	4042	4286	4963	5566	6467	6515	6517
				6532	6533	6536	6547
	MB WAIT			1040 #	2989	3004	3005	3028	3034	3046	3052	3064	3068	3087	3095
				3143	3316	3317	3337	3943	3971	3973	3977	3984	3987	3990	4026
				4031	4046	4047	4064	4065	4323	4330	4332	4456	4456	4457	4972
				4974	5009	5063	5065	5327	5328	5796	5804	5814	5816	5839	5839
				5842	6056	6061	6063	6074	6141	6304	6350	6447	6560	6570	6571
				6676	6684	6895	6896	6904	7073	7125	7719	7907	7908	7915	7918
	REG FUNC		1045 #	6140	6148	6189	6192	6301	6317	6332	6343	6552	6592	6682
	RPW			1054 #	6892
	WRITE			1053 #	3154	3332	3335	3338	3667	3682	3970	3972	3974	4011	4015
				4067	4087	4096	4284	4320	4321	4328	5337	5339	5779	5785	5851
				6075	6159	6194	6377	6446	6448	6561	6562	6590	6591	6595	6683
				6898	6900	7112	7118	7912
(U) MQ				962 #
	MQ SEL			966 #	4780	4792	4960	5684	5705
	MQ*.25			965 #	4777	4782	4784	4786	4788	4795	4797	4799	4800	4805	4983
				5005	5677
	MQ*2			964 #	4868	4871	4876	4885	4901	4902	4903	4904	4905	4906	4907
				4908	4932	4933	4934	4935	5003	5043	5045	5257	5258	5260	5263
				5935	5936	5937	5938
	MQM SEL			967 #	5697
	SH			963 #	2996	2998	3156	4549	4556	4569	4575	4577	4582	4589	4594
				4673	4734	4756	4936	4937	4938	4939	4976	4985	4991	5030	5053
				5132	5135	5137	5172	5419	5468	5594	5603	5605	5620	5622	5630
				5634	5641	5688	5689	5693	5695	5839	5907	6299	6365	6419	6505
				6506	6507	6508	6509	7104
(U) MQ CTL			1317 #
	AD			1325 #
	MQ*.25			1323 #	5697
	MQ*2			1319 #	4780	4792	5684
	SH			1322 #
	0S			1321 #	4960	5705
	1S			1324 #
(U) MREG FNC			1386 #
	LOAD CCA		1392 #	6140
	LOAD EBR		1394 #	6343
	LOAD UBR		1393 #	6301
	MAP			1395 #	6682
	READ EBR		1389 #	6332	6552	6592
	READ ERA		1390 #	6189
	READ UBR		1388 #	6317
	SBUS DIAG		1387 #	6192
	WR REFILL RAM		1391 #	6148
(U) MTR CTL			1404 #
	CLR E CNT		1407 #	6437
	CLR M CNT		1408 #	6438
	CLR PERF		1406 #	6436
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 213
; CROSS REFERENCE LISTING

	CLR TIME		1405 #	6435
	CONO MTR		1411 #	6398
	CONO TIM		1412 #	6298
	LD PA LH		1409 #	6387
	LD PA RH		1410 #
(U) PARITY			1463 #
(D) PARITY			1502 #
(U) PC FLAGS			1329 #
	AROV			1330 #	4669	4745	4762	4997	5413
	DIV CHK			1337 #	4830
	FDV CHK			1338 #	5206	5242	5669
	FLOV			1331 #	5329
	FPD			1332 #	5796	6078	6079
	FXU			1336 #
	TRAP1			1334 #	3846
	TRAP2			1333 #	3847	4026	4031	4046	4064
	TRAP3			1335 #	2978	3848
(U) Q1				1271 #
	Q			1273 #	6159
(U) Q10				1253 #
	Q			1255 #	6159
(U) Q100			1239 #
	Q			1240 #	6159
(U) Q2				1265 #
	Q			1267 #	6159
(U) Q20				1247 #
	Q			1251 #	6159
(U) Q200			1233 #
	Q			1235 #	6159
(U) Q4				1259 #
	Q			1261 #	6159
(U) Q40				1241 #
	Q			1243 #	6159
(U) Q400			1227 #
	Q			1231 #	6159
(U) SC				1003 #
	AR SHIFT		1006 #	4498	4523	4525	4544	4547	4570	4573	5359
	FE			1004 #	5239	5323	5819	5846
	SCAD			1005 #	2918	2920	2943	3319	3332	3335	3784	3802	3836	3863	3871
				3874	4265	4282	4323	4338	4501	4532	4535	4537	4552	4555	4569
				4578	4581	4590	4592	4595	4596	4608	4609	4646	4650	4672	4674
				4677	4686	4741	4761	4826	4833	4835	4967	4996	5014	5016	5020
				5049	5050	5060	5119	5122	5130	5132	5135	5139	5170	5173	5199
				5237	5262	5264	5271	5273	5298	5302	5304	5316	5330	5416	5418
				5463	5469	5509	5538	5565	5580	5593	5606	5617	5620	5622	5631
				5638	5644	5661	5674	5683	5689	5736	5751	5752	5760	5761	5814
				5821	5848	5850	5860	5867	5892	5906	5910	5919	6137	6296	6303
				6305	6309	6320	6328	6342	6351	6366	6377	6425	6445	6530	6546
				6568	6584	6602	6619	6626	6635	6671	6673	6685	6874	6877	6889
				6890	6895	6896	6905	6907	6908	6909	6910	6917	6957	6963	6968
				7092	7105
(U) SCAD			980 #
	A			981 #	2913	2918	2920	3319	3332	3335	3784	3802	3863	3871	3874
				4265	4282	4323	4501	4504	4507	4509	4569	4569	4573	4576	4595
				4595	4596	4677	4686	4735	4741	4757	4761	4833	4835	4840	4847
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 214
; CROSS REFERENCE LISTING

				4850	4936	4937	4938	4939	4967	4977	4992	4996	5016	5032	5047
				5049	5060	5119	5122	5170	5172	5202	5237	5239	5316	5326	5337
				5339	5380	5416	5463	5469	5486	5509	5526	5538	5565	5576	5606
				5634	5644	5661	5666	5674	5683	5689	5705	5751	5760	5780	5860
				5893	5894	5919	5933	5942	6137	6290	6296	6303	6305	6309	6320
				6328	6342	6351	6353	6366	6377	6425	6445	6503	6504	6510	6530
				6546	6568	6584	6602	6635	6671	6673	6695	6746	6874	6877	6895
				6896	6907	6908	6909	6910	6917	6936	6957	6957	6963	7001	7092
				7105
	A+1			985 #	2943	3836	4777	4782	4784	4786	4788	4795	4797	4799	4800
				4805	4826	4983	5014	5020	5020	5140	5141	5144	5199	5330	5476
				5525	5642	5656	5658	5681	5704	5892	6905
	A+B			983 #	3899	4532	4535	4537	4552	4555	4578	4581	4590	4592	4644
				4646	4650	4668	4672	4674	4780	4792	4919	4922	5131	5132	5139
				5173	5175	5213	5216	5262	5264	5280	5283	5302	5304	5314	5332
				5361	5418	5452	5474	5590	5593	5619	5620	5631	5638	5678	5680
				5736	5752	5796	5821	5845	5864	5870	5906	5918	6315	6534	6601
				6619	6630	6685	6696	6880	6881	6883	6884	6889	6893	6918
	A-1			984 #	3902	4608	4609	4868	4871	4876	4885	4901	4902	4903	4904
				4905	4906	4907	4908	4932	4933	4934	4935	5026	5050	5193	5257
				5258	5329	5455	5580	5684	5935	5936	5937	5938	6355	6536
	A-B			986 #	4273	4338	5130	5135	5271	5273	5298	5328	5397	5457	5459
				5467	5471	5480	5488	5545	5617	5622	5685	5701	5739	5748	5757
				5761	5785	5814	5840	5847	5848	5850	5867	5910	5911	6626	6634
	A-B-1			982 #	5284	5333	6965	6968
	AND			988 #	2974	6507	6509	6531	6560	6582	6598	6614	6623	6890	6912
				6914
	OR			987 #	6687	6924
(U) SCADA			989 #
	AR EXP			992 #	4273	5119	5122	5130	5170	5173	5193	5199	5271	5273	5298
				5316	5326	5361	5397	5565	5617	5638	6957	6957	6963
	AR0-5			991 #	2974	4504	4507	5739	5748	5751	5757	5760	5860	5910	6634
				6635	6687	6924
	FE			990 #	2913	3902	4509	4578	4581	4608	4609	4777	4782	4784	4786
				4788	4795	4797	4799	4800	4805	4868	4871	4876	4885	4901	4902
				4903	4904	4905	4906	4907	4908	4932	4933	4934	4935	4983	5032
				5131	5140	5141	5144	5213	5216	5257	5258	5328	5330	5337	5339
				5418	5452	5455	5457	5459	5467	5471	5474	5476	5480	5488	5525
				5526	5545	5580	5619	5656	5658	5678	5680	5681	5684	5685	5701
				5704	5705	5752	5785	5821	5840	5850	5867	5935	5936	5937	5938
				6355	6534	6601	6619	6630	6695	6912
	#			993 #	2918	2920	3319	3332	3335	3784	3802	3863	3871	3874	4265
				4282	4323	4338	4501	4532	4535	4537	4552	4555	4569	4569	4573
				4576	4590	4592	4595	4595	4646	4650	4668	4672	4674	4677	4686
				4735	4741	4757	4761	4833	4835	4840	4847	4850	4936	4937	4938
				4939	4967	4977	4992	4996	5016	5047	5060	5132	5135	5139	5172
				5175	5202	5237	5239	5262	5264	5302	5304	5380	5416	5463	5469
				5509	5538	5576	5590	5593	5606	5620	5622	5631	5634	5644	5661
				5666	5674	5683	5689	5761	5780	5814	5847	5848	5893	5894	5919
				5933	5942	6137	6296	6303	6305	6309	6320	6328	6342	6351	6353
				6366	6377	6425	6445	6507	6509	6530	6531	6546	6560	6568	6582
				6584	6598	6602	6614	6623	6626	6671	6673	6685	6746	6874	6877
				6890	6895	6896	6907	6908	6909	6910	6914	6917	6936	7001	7092
				7105
(U) SCADA EN			994 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 215
; CROSS REFERENCE LISTING

	0S			995 #	2943	3836	3899	4596	4644	4780	4792	4826	4919	4922	5014
				5020	5020	5026	5049	5050	5280	5283	5284	5314	5329	5332	5333
				5486	5642	5736	5796	5845	5864	5870	5892	5906	5911	5918	6290
				6315	6503	6504	6510	6536	6696	6880	6881	6883	6884	6889	6893
				6905	6918	6965	6968
(U) SCADB			997 #
	AR0-8			1000 #	3899	5314	6880	6881	6883	6884	6889	6914
	AR6-11			999 #	5736	5739	5748	5757	5785	5796	5906	6507	6509	6531	6560
				6582	6598	6614	6623	6634
	SC			998 #	2974	4338	4532	4535	4537	4552	4555	4578	4581	4590	4592
				4644	4646	4650	4668	4672	4674	4780	4792	4919	4922	5130	5131
				5132	5135	5139	5173	5175	5262	5264	5280	5283	5284	5298	5302
				5304	5332	5333	5361	5545	5590	5593	5617	5619	5620	5622	5631
				5638	5685	5701	5752	5761	5814	5821	5840	5845	5847	5848	5850
				5864	5867	5870	5911	5918	6315	6619	6626	6685	6687	6696	6890
				6893	6918	6924	6965	6968
	#			1001 #	4273	5213	5216	5271	5273	5328	5397	5418	5452	5457	5459
				5467	5471	5474	5480	5488	5678	5680	5910	6534	6601	6630	6912
(U) SH				1011 #
	AR			1013 #	2996	2998	3154	3156	3156	3899	3959	4416	4436	4569	4643
				4645	4649	4663	4734	4756	4832	4834	4839	4936	4937	4938	4939
				4966	4985	4991	5053	5132	5135	5138	5141	5172	5319	5380	5587
				5589	5592	5630	5634	5641	5665	5693	5695	5751	5760	5781	5820
				5839	5907	5919	5933	5941	6205	6303	6305	6320	6365	6402	6419
				6505	6506	6507	6508	6509	6546	6567	6581	6583	6583	6602	6616
				6635	7092	7879
	AR SWAP			1015 #	3133	3257	3260	3263	3264	3267	3268	3284	3285	3291	3292
				3597	3600	4096	4099	4363	5118	5169	5198	6054	6158	6163	6169
				6197	6203	6293	6323	6332	6338	6385	6391	6405	6424	6697	6875
				6878	6958	7150	7881	7896	7897
	ARX			1014 #	3783	3865	3979	4021	4030	4032	4066	4103	4558	4577	4583
				4595	4596	4667	4671	5002	5014	5019	5030	5213	5449	5599	5602
				5620	5622	5687	5874	6170	6295	6388	6404	6443	6666	6699	6919
				6964	6967	6968
	SHIFT AR!ARX		1012 #	2967	3094	3338	3836	3860	3873	4267	4284	4327	4338	4338
				4505	4507	4532	4537	4549	4554	4556	4575	4580	4582	4589	4592
				4594	4605	4648	4673	4679	4684	4685	4744	4846	4849	4976	5001
				5003	5004	5007	5015	5017	5021	5032	5061	5137	5140	5143	5238
				5417	5419	5424	5468	5470	5510	5544	5594	5601	5603	5605	5685
				5688	5689	5701	5708	5819	5827	5846	5849	5849	5851	6139	6299
				6313	6336	6448	6454	6456	6458	6460	6501	6531	6600	6603	6880
				6881	6883	6884	6904	6905	6908	6909	6910	7104	7106
(U) SKIP			1068 #
	AC REF			1101 #
	AC#0			1076 #	3066	3652	4438	5350
	AD CRY0			1082 #	3906	4010	4014	4043	4062	5026	5044	5045	5214	5281	5282
				5301	5303	5336	5449	5464	5546	5674	5692	5861	5894	6607	7891
	AD#0			1084 #	4501	4665	4741	5322	5871
	AD0			1083 #	4367	4369	4759	4920	4923	4993	5021	5203	5240	5578	5665
				6296	6741	6927	6933
	ADX0			1081 #	7914
	AR0			1075 #	3136	3288	3295	4365	4512	4828	4848	4851	5272	5274	5327
				5330	5380	5639	6957	6963
	AR18			1074 #	3274	3281	4499	4523	4525	4544	4547	4570	4573	6299
	ARX0			1073 #
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 216
; CROSS REFERENCE LISTING

	BR0			1072 #	5047	5205	5241	5298	5668
	EVEN PAR		1071 #
	FETCH			1087 #
	INTRPT			1095 #	3000	3002	3903	3928	4266	4283	4413	4452	4453	4469	4471
				5804	6114	7001	7912
	IO LEGAL		1098 #	3786	3943	6050	6057	6138	6145	6147	6152	6155	6164	6167
				6191	6198	6201	6291	6294	6309	6324	6327	6364	6380	6383	6392
				6395	6403
	KERNEL			1088 #	3962	3977	4412	4435
	P!S XCT			1099 #	7903
	PI CYCLE		1092 #	6063	6067	6076	7075
	PUBLIC			1090 #
	RPW REF			1091 #	6672
	RUN			1097 #
	SC .LT. 36		1078 #
	SC0			1077 #	5054
	SCAD#0			1080 #	2974	4504	4507	4644	5326	5328	6507	6509	6560	6582	6893
				6912
	SCAD0			1079 #	4273	4533	4536	4538	4552	4555	4578	4581	4590	4592	4608
				4609	4646	4651	4668	5032	5130	5133	5135	5139	5397	5418	5591
				5593	5617	5621	5623	5740	5762	5814	5821	5841	6627	6634
	USER			1089 #
	-EBUS GRANT		1093 #	6110
	-EBUS XFER		1094 #	6100
	-MTR REQ		1102 #	3005	3900	4339	4417	4420	4457
	-START			1096 #	3898
(U) SP MEM			1371 #
	CACHE INH		1378 #
	EPT			1380 #	6464	6550	6590	6609	7112	7126
	EPT EN			1377 #
	EPT FETCH		1381 #	6517	6532	6533	6547
	EXEC			1374 #	6742	6928	6934
	FETCH			1372 #
	PT			1384 #	2984
	PT FETCH		1385 #
	SEC 0			1375 #
	UNPAGED			1379 #	6556	6574	6595	6892
	UPT			1382 #	4320	4331	6465
	UPT EN			1376 #
	UPT FETCH		1383 #
	USER			1373 #	6743	6929	6935
(U) SPEC			1163 #
	AD LONG			1183 #	3318	3334	4870	4870	4873	4873	4918	4921	4972	4974	4984
				5025	5028	5059	5064	5299	5299	5425	5542	5542	5573	5573	5633
				5674	5681	5704	5711	5711	6376	6445
	ARL IND			1178 #	3317	3317	3333	3333	4103	4327	4509	4509	4964	4964	5119
				5122	5130	5170	5173	5174	5193	5193	5199	5199	5298	5316	5332
				5333	5337	5339	5361	5565	5565	5567	5617	5918	6158	6388	6398
				6695	6696
	CALL			1174 #	3860	3874	3944	3962	3977	4017	4266	4283	4324	4325	4412
				4435	4569	4595	4664	4736	4758	4991	5008	5031	5047	5053	5203
				5205	5237	5241	5318	5587	5632	5641	5653	5654	5667	5736	5751
				5752	5760	5762	5892	5906	5908	6050	6057	6088	6137	6145	6147
				6152	6155	6157	6166	6191	6201	6290	6300	6303	6310	6311	6318
				6327	6333	6342	6351	6363	6380	6382	6394	6402	6419	6468	6546
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 217
; CROSS REFERENCE LISTING

				6569	6570	6573	6580	6584	6585	6599	6606	6614	6615	6618	6619
				6624	6625	6627	6633	7093	7106	7889	7907	7908	7909
	CLR FPD			1168 #	5753	5767
	FLAG CTL		1180 #	2885	3786	3790	3792	3809	3875	3879	6071	6571
	GEN CRY18		1171 #	3754	3801	4010	4014	5464	6067	6075	6931	7104
	INH CRY18		1165 #	4043	4062	4364	5902
	LOAD PC			1169 #	3896	7066
	MQ SHIFT		1166 #	5003	5005	5043	5045	5677
	MTR CTL			1179 #	6381	6393	6404	6405	6406	6427	6428	6429	6430
	SAVE FLAGS		1181 #	4013	4082	4087	4321
	SCM ALT			1167 #	4498	4523	4525	4544	4547	4570	4573	5239	5323	5359	5819
				5846
	SEC HOLD		1173 #
	SP MEM CYCLE		1182 #	2984	4320	4331	6464	6465	6517	6532	6533	6547	6550	6556
				6574	6590	6595	6609	6742	6743	6892	6928	6929	6934	6935	7112
				7126
	XCRY AR0		1170 #	3063	3093	4274	4648	4649	4660	4665	4741	4745	4846	4849
				4995	5060	5137	5138	5319	5321	5381	5417	5589	5592
(U) SPEC INSTR			1348 #	6984
	CONS XCT		1357 #	3905
	CONT			1359 #	3902
	HALTED			1356 #	2915	3895
	INH PC+1		1351 #	2985
	INSTR ABORT		1355 #	6447	7116
	INTRPT INH		1354 #
	KERNEL CYCLE		1350 #
	PXCT			1353 #	4416
	SET PI CYCLE		1349 #	2913	6432	6501
	SXCT			1352 #	4437
(U) SWITCH%
	ADJBP			462	5349	5351	5353	5733	5737	5741	5743	5858	5913
	BACK.BLT		422	7883	7888	7890	7922	7932
	CIRC			11	468	4486	4488	4490	4561	4563	4565	4567	4571	4587	4636
	CIRC.BIG.OPT		471	4603	4610	4635
	DBL.INT			459	4944	4949	5066
	DECIMAL			10	455	2694	2699	4123	4128	4133	4289	4294	7006	7012	7018
				7021	7031	7034	7162	7173	7227	7231	7390	7605
	EIS			9	453	2691	2704	4114	4139	4158	4272	4275	4277	4279	4281
				4288	4297	5367	5369	5371	5400	5404	5411	7003	7022	7030	7047
				7153	7185	7187	7717	7721	7850
	FPLONG			426	5097	5108	5114	5162	5167	5191	5196	5232	5290	5497	5499
				5501	5507	5515	5531	5533	5535	5537	5539	5541	5549	5551	5553
	IMULI.OPT		442	4723	4726	4733	4737	4740
	INSTR.STAT		551	1272	1274	1276	1719	1732	6175	6179	6187	6216	6285
	ITSPAGE			3	465	1194	1198	1248	1250	1252	1865	1875	1893	1906	1916
				1930	1948	1960	1966	3777	3779	3781	6703	6706	6708	6747	6754
				6756	6761	6866	6937
	JPC			483	534	536	538	540	1260	1262	1264	3700	3702	3704	3719
				3721	3723	3741	3743	3745	3753	3755	3757	3770	3772	3775	3839
				3842	3844	3850	3852	3876	3880	3886	4019	4022	4025	4048	4050
				4052	4081	4083	4085	4089	4091	4093	4102	4104	4106	4514	4516
				4520
	JPC SUPPORT		489	1887	1890	1912	1915	1940	1947	2500	2502	2506	2508	3083
				3086	3963	3966	3969	3980	3982	7936	8011
	JPC TEST		487	530	532	4200	4209	4218	4299	4302
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 218
; CROSS REFERENCE LISTING

	JPC.RING		491	539	1266	1268	1270	1943	1946	4044	4053	4059	7964	7968
				8010
	JRSTON			6	507	3798	3800	3803	3854	3867
	KI INTERRUPT LOSES	498	6520	6529	6535	6537	6543
	KLPAGE			13	433	435	438	440	1228	1230	1232	1694	1698	1864	1974
				3934	3936	6639	6988	6996	7025	7027	7029	7048	7053	7071	7076
				7090	7119	7121	7135	7141	7147	7149
	LISP			477	1202	1211	1242	1244	1246	2708	2710	4221	4224	4227	4248
				4251	4254	4304	4313
	LPM.SPM			7	511	3957	3993	4237	4240	4243	7097	7099	7102	7109	7111
				7114	7122	7124	7127
	MAP			4	501	2705	2707	3913	3915	3917	3920	3922	3924	3931	3937
				3941	6950	6954	6956	6959	6961	7049	7052
	MUSIC			480	1254	1256	1258	6002	6004	6006	6408	6410	6412
	MVSQZ			12	474	4345	4347	4349	4356	4358	4362	4372	4393
	NXT.INSTR.BITES		14	518	2497	2503	2509
	ONE PROCEED		526	2940	2942	2944	2946	2948	2951	2953	2980	3833	3835	3838
				3845	3849	3862	3864
	OP.CNT			416	545	547	2925	2928	6248	6264
	OP.TIME			419	548	550	2929	2932	6265	6284
	PFAIL.PIHACK		5	504	7096	7103	7115
	PT DIR VAL BUG		523	6710	6722	6758
	RPW			405	2732	2734	2736
	SXCT			446	4424	4427	4430	4433	4442	4461	4472
	TRACKS			412	542	544	2921	2924	6219	6221	6223	6233	6246
	UFA.DFN			430	5071	5074	5308	5341
	WRTST			409	2737	2739	2741	3107	3109	3111
	XADDR			436	445	448	450	1046	1055	1064	1172	1175	1177	1234	1236
				1238	4403	4405	4407	4446	4473
	XCTR			8	514	3925	3927	3929	3938	3940	4230	4233	4236	4398	4410
				4421
(U) TIME			1027 #
	2T			1030 #	3605	3606	3607	5780	5786
	3T			1031 #	2945	2949	3029	3034	3041	3046	3052	3898	4840	5761	5815
				5840	6156	6356	6734	6736	6744	6745
	4T			1032 #
	5T			1033 #	2918	2920	6095	6098	6102	6115	6120	6121	6508	6580
(U) U0				869 #
(U) U21				932 #
(U) U23				938 #
(U) U42				996 #
(U) U45				1002 #
(U) U48				1009 #
(U) U51				1021 #
(U) U66				1141 #
(U) U73				1185 #
(U) VMA				1022 #	2967	2999	3001	4267	4284	4285	4330	4452	4453	4468	4470
				5801	5802	6420	6455	6457	6459	6461	6503	6504	6510	6514	6970
				7073
	AD			1026 #	3841	4011	4015	4017	4020	4039	4042	4049	4067	5799	5800
				6074	6140	6301	6343	6352	6355	6377	6506	6507	6508	6515	6532
				6533	6536	6547	6552	6573	6574	6585	6586	6592	6618	6625	6682
				6740	6890	6926	6932	6985	7902	7903	7910	7912
	PC			1024 #	2886	3896	6572	7061
	PC+1			1025 #	2995	2997	3040	3063	3065	3071	3073	3320	3594	3597	3602
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 219
; CROSS REFERENCE LISTING

				3633	3651	3701	3720	3742	3754	3877	4029	4450	4451	4460	4462
				4466	4503	4539	4558	4583	4596	4659	4684	4878	4887	5007	5048
				5323	5421	5422	5544	5709	5744	5753	5764	5873	5909	6062	6064
				6067	6070	7917
	VMA			1023 #	3313	3337	3959	3964	3970	3971	3973	3983	3984	3987	4090
				4101	4321	4323	4963	5018	5566	6193	6446	6448	6467	6609	7118
				7125
(U) #				1191 #	2917	2918	2920	2938	2967	2995	2997	3068	3080	3087	3087
				3094	3095	3319	3332	3335	3784	3802	3836	3863	3871	3874	4065
				4265	4267	4273	4282	4284	4285	4323	4330	4332	4338	4450	4451
				4460	4462	4466	4501	4532	4535	4537	4552	4555	4569	4573	4576
				4590	4592	4595	4646	4650	4668	4672	4674	4677	4686	4735	4741
				4757	4761	4833	4835	4840	4847	4850	4936	4937	4938	4939	4967
				4977	4992	4996	5009	5016	5035	5047	5055	5060	5111	5113	5132
				5135	5139	5164	5165	5172	5175	5194	5202	5213	5216	5227	5237
				5239	5244	5246	5262	5262	5264	5264	5271	5273	5302	5304	5314
				5328	5380	5397	5416	5418	5451	5452	5457	5459	5463	5467	5469
				5471	5474	5480	5488	5509	5536	5538	5540	5550	5552	5576	5590
				5593	5606	5620	5622	5631	5634	5644	5654	5661	5666	5674	5676
				5678	5680	5683	5689	5700	5710	5761	5780	5814	5847	5848	5893
				5894	5910	5919	5933	5942	6137	6296	6300	6303	6304	6305	6309
				6320	6328	6342	6351	6353	6366	6377	6420	6422	6425	6433	6445
				6455	6457	6459	6461	6503	6504	6507	6509	6510	6514	6530	6531
				6534	6546	6560	6568	6582	6584	6598	6601	6602	6614	6623	6626
				6630	6664	6665	6671	6673	6685	6746	6874	6877	6890	6895	6896
				6907	6912	6915	6917	6936	6971	7001	7061	7066	7073	7074	7092
				7105	7128	7133	7148	7897	7907	7908	7909	7919
	PPRO			1195 #	6908
	PPRW			1197 #	6910
	PPRWF			1196 #	6909
	VERS			1192 #	3100
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 220
; LOCATION / LINE NUMBER INDEX
; DCODE LOC'N	0	1	2	3	4	5	6	7

D 0000		4113	4140	4141	4142	4144	4145	4146	4147
D 0010		4149	4150	4151	4152	4154	4155	4156	4157
D 0020		4162	4163	4164	4165	4167	4168	4169	4170
D 0030		4172	4173	4174	4175	4177	4178	4179	4180
D 0040		4184	4185	4186	4187	4188	4189	4190	4191
D 0050		4192	4193	4194	4195	4196	4197	4198	4199
D 0060		4201	4202	4203	4204	4205	4206	4207	4208
D 0070		4222	4223	4228	4229	4234	4235	4241	4242

D 0100		4249	4250	4255	4256	4346	4350	4428	4429
D 0110		5558	5559	5560	5561	4950	4951	4952	4953
D 0120		3306	3307	5366	5370	3326	3327	5373	5374
D 0130		5310	5311	5345	5346	5718	5719	5720	5721
D 0140		5076	5077	5078	5079	5081	5082	5083	5084
D 0150		5086	5087	5088	5089	5091	5092	5093	5094
D 0160		5152	5153	5154	5155	5157	5158	5159	5160
D 0170		5181	5182	5183	5184	5186	5187	5188	5189

D 0200		3105	3106	3110	3112	3114	3115	3116	3117
D 0210		3119	3120	3121	3122	3124	3125	3126	3127
D 0220		4717	4718	4719	4720	4749	4750	4751	4752
D 0230		4810	4811	4812	4813	4815	4816	4817	4818
D 0240		4479	4480	4481	4482	4483	4484	4485	4489
D 0250		3148	3149	3748	3749	3763	3764	3912	3916
D 0260		3998	3999	4000	4001	4074	4075	4076	4077
D 0270		4692	4693	4694	4695	4704	4705	4706	4707

D 0300		3613	3614	3615	3616	3617	3618	3619	3620
D 0310		3622	3623	3624	3625	3626	3627	3628	3629
D 0320		3689	3690	3691	3692	3693	3694	3695	3696
D 0330		3640	3641	3642	3643	3644	3645	3646	3647
D 0340		3708	3709	3710	3711	3712	3713	3714	3715
D 0350		3656	3657	3658	3659	3660	3661	3662	3663
D 0360		3727	3728	3729	3730	3731	3732	3733	3734
D 0370		3671	3672	3673	3674	3675	3676	3677	3678

D 0400		3346	3347	3348	3349	3356	3357	3358	3359
D 0410		3366	3367	3368	3369	3376	3377	3378	3379
D 0420		3381	3382	3383	3384	3391	3392	3393	3394
D 0430		3398	3399	3400	3401	3408	3409	3410	3411
D 0440		3418	3419	3420	3421	3428	3429	3430	3431
D 0450		3438	3439	3440	3441	3449	3450	3451	3452
D 0460		3459	3460	3461	3462	3469	3470	3471	3472
D 0470		3479	3480	3481	3482	3489	3490	3491	3492

D 0500		3163	3164	3165	3166	3168	3169	3170	3171
D 0510		3173	3174	3175	3176	3178	3179	3180	3181
D 0520		3183	3184	3185	3186	3188	3189	3190	3191
D 0530		3193	3194	3195	3196	3198	3199	3200	3201
D 0540		3205	3206	3207	3208	3210	3211	3212	3213
D 0550		3215	3216	3217	3218	3220	3221	3222	3223
D 0560		3225	3226	3227	3228	3230	3231	3232	3233
D 0570		3235	3236	3237	3238	3240	3241	3242	3243

; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 221
; LOCATION / LINE NUMBER INDEX
; DCODE LOC'N	0	1	2	3	4	5	6	7

D 0600		3503	3504	3505	3506	3507	3508	3509	3510
D 0610		3512	3513	3514	3515	3516	3517	3518	3519
D 0620		3521	3522	3523	3524	3525	3526	3527	3528
D 0630		3530	3531	3532	3533	3534	3535	3536	3537
D 0640		3539	3540	3541	3542	3543	3544	3545	3546
D 0650		3548	3549	3550	3551	3552	3553	3554	3555
D 0660		3557	3558	3559	3560	3561	3562	3563	3564
D 0670		3566	3567	3568	3569	3570	3571	3572	3573

D 0700		5953	5954	5955	5956	5957	5958	5959	5960
D 0710		5964	5965	5966	5967	5968	5969	5970	5971
D 0720		5975	5976	5977	5978	5979	5980	5981	5982
D 0730		5986	5987	5988	5989	5990	5991	5992	5993
D 0740		5999	6000	6001	6003	6007	6008	6009	6010
D 0750		6014	6015	6016	6017	6018	6019	6020	6021
D 0760		6025	6026	6027	6028	6029	6030	6031	6032
D 0770		6036	6037	6038	6039	6040	6041	6042	6043
; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 222
; LOCATION / LINE NUMBER INDEX
; UCODE LOC'N	0	1	2	3	4	5	6	7

U 0000		2885	2886	2966	2967	2974	2978	2984	2985
U 0010		2989	3011	3087	3093	3094	3095	3320	3337
U 0020		2976	2977	3338	3340	3316	3317	3341	3319
U 0030		3836	3863	3866	3877	3878	2971	2972	2973
U 0040		3874	3879	3875	3029	3035	3041	3047	3053
U 0050		3899	3900	3902	3903	3946	3970	3905	3906
U 0060		3971	3063	3064	3066	3972	3068	3071	3073
U 0070		3080	3081	3809	3810	3860	3973	3974	3861

U 0100		3133	3136	3139	3257	3260	3274	3263	3264
U 0110		3267	3268	3277	3278	3281	3288	3295	3979
U 0120		3983	3984	3985	3986	3987	3988	3989	3990
U 0130		3991	3992	4015	4043	4046	4047	4049	3100
U 0140		2914	4062	2915	4067	2917	2918	2920	4090
U 0150		3004	3005	2939	2943	4030	4032	2945	2950
U 0160		2996	2998	3000	3002	3944	3945	3977	3978
U 0170		4017	4099	4021	4026	4064	4065	4101	4103

U 0200		3142	3143	3154	3157	3252	3254	3284	3285
U 0210		3291	3292	3298	3299	3313	3353	3363	3373
U 0220		4286	4320	4321	4329	4330	4331	4332	4365
U 0230		4367	4369	4419	4420	4438	4547	4441	4448
U 0240		4456	4457	4555	3841	4503	4505	4573	3846
U 0250		4508	4510	4581	3847	4550	4552	4592	3848
U 0260		4324	4325	4654	4326	4338	4339	4513	4515
U 0270		4450	4451	4452	4453	4459	4460	4462	4463

U 0300		3332	3333	3388	3335	3405	3415	3425	3435
U 0310		3445	3456	3466	3476	3486	3496	3633	3652
U 0320		4533	4536	4538	4539	4557	4558	4576	4578
U 0330		4582	4583	4605	4606	4644	4646	4659	4660
U 0340		4466	4467	4469	4471	4589	4590	4661	4608
U 0350		4594	4595	4712	4596	4648	4651	4777	4609
U 0360		4664	4805	4665	4841	4668	4669	4672	4674
U 0370		4678	4679	4684	4686	4744	4745	4848	4851

U 0400		3595	3598	3600	3602	3604	3605	3606	3607
U 0410		3667	3682	3701	3720	3742	3754	4011	4013
U 0420		4967	4989	4990	4780	4782	4784	4786	4788
U 0430		5001	5002	5003	4792	4795	4797	4799	4800
U 0440		5005	5006	5014	5016	4869	4870	4872	4873
U 0450		5018	5020	4886	4887	5021	5052	4889	4890
U 0460		5024	5026	4877	4878	5027	5028	4880	4881
U 0470		4901	4902	4903	4904	4905	4906	4907	4908

U 0500		3959	4699	3962	3964	4039	4042	4082	4087
U 0510		4096	4098	4412	4413	4499	4501	4524	4525
U 0520		4932	4933	4934	4935	4936	4937	4938	4939
U 0530		5034	5036	4416	4417	5008	5031	5009	5032
U 0540		5060	5061	5123	5129	4918	4920	4921	4923
U 0550		4972	5130	4974	5044	4977	5135	5144	5045
U 0560		4983	5147	5131	5133	4984	5172	4985	5336
U 0570		4992	5361	5137	5139	4993	5416	4996	4997

; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 223
; LOCATION / LINE NUMBER INDEX
; UCODE LOC'N	0	1	2	3	4	5	6	7

U 0600		3771	3780	3784	3785	3786	3787	3788	3789
U 0610		3790	3791	3792	3793	3794	3795	3796	3802
U 0620		5047	5048	5418	5049	5424	5050	5140	5141
U 0630		5227	5228	5257	5258	5054	5425	5055	5056
U 0640		5272	5274	5174	5472	5281	5283	5175	5510
U 0650		5261	5262	5263	5264	5544	5058	5546	5059
U 0660		5203	5602	5205	5206	5298	5299	5214	5216
U 0670		5302	5304	5325	5326	5327	5328	5063	5065

U 0700		3871	4711	4545	4546	4566	4569	5604	4570
U 0710		5111	5113	4736	5512	5164	5165	4741	5514
U 0720		5237	5240	5241	5242	5329	5330	5245	5247
U 0730		5332	5333	5338	5340	5413	5414	5284	5285
U 0740		5421	5422	5467	5469	5487	5489	5288	5289
U 0750		5318	5605	5607	5521	5320	5321	5323	5522
U 0760		5450	5451	5453	5454	5456	5458	5460	5464
U 0770		5595	5597	5600	5601	5475	5477	5478	5480

U 1000		4363	3928	4266	4267	5617	4274	4283	4284
U 1010		4960	4964	5623	4965	4435	4437	3893	3896
U 1020		5619	5621	5639	5687	5502	5506	5509	5688
U 1030		5667	5690	5668	5669	5525	5527	5550	5552
U 1040		5571	5536	5573	5538	5576	5540	5580	5542
U 1050		5587	5692	5641	5642	5591	5593	5644	5697
U 1060		5632	5711	5694	5695	5633	5786	5634	5797
U 1070		5653	5654	5804	5657	5848	5659	5850	5662

U 1100		4758	5851	5169	5170	4759	5861	4761	4762
U 1110		4824	5876	4828	4830	5193	5194	4833	4835
U 1120		5674	5676	5678	5680	5681	5683	5684	5685
U 1130		5700	5701	5709	5710	5767	5768	5704	5706
U 1140		5736	5740	5742	5878	5901	5744	5805	5806
U 1150		5815	5816	5779	5781	5827	5828	5782	5783
U 1160		5799	5800	5801	5802	5819	5821	5841	5842
U 1170		5845	5847	5873	5874	5864	5865	5867	5903

U 1200		5198	5199	5118	5120	5315	5316	5910	5122
U 1210		5350	5360	5381	5398	5567	5911	5568	5918
U 1220		5870	5919	5871	5933	5892	6067	5893	5894
U 1230		5935	5936	6061	6062	5937	5938	6063	6064
U 1240		5896	5898	6070	6071	5940	5942	6099	6100
U 1250		5906	6103	5908	6116	6110	6111	5909	6120
U 1260		6113	6114	6074	6075	6121	6140	6141	6076
U 1270		6087	6088	6159	6096	6169	6078	6170	6079

U 1300		5749	6194	6131	6132	5751	5752	6204	5753
U 1310		5758	6206	6138	6139	5760	5762	6207	5764
U 1320		6208	6296	6211	6212	6298	6299	6300	6301
U 1330		6303	6304	6305	6315	6321	6336	6337	6338
U 1340		6318	6333	6319	6335	6342	6348	6343	6377
U 1350		6351	6385	6353	6386	6375	6376	6357	6358
U 1360		6368	6369	6370	6371	6388	6398	6417	6418
U 1370		6420	6421	6422	6425	6432	6433	6435	6436

; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 224
; LOCATION / LINE NUMBER INDEX
; UCODE LOC'N	0	1	2	3	4	5	6	7

U 1400		6050	6051	6054	6437	6364	6366	6057	6058
U 1410		6145	6146	6147	6148	6164	6165	6167	6168
U 1420		6427	6428	6429	6430	6431	6438	6444	6446
U 1430		6447	6448	6464	6465	6455	6457	6459	6461
U 1440		6468	6501	6469	6517	6530	6531	6514	6515
U 1450		6503	6504	6505	6506	6507	6508	6509	6510
U 1460		6546	6556	6547	6532	6560	6582	6595	6533
U 1470		6561	6562	6601	6534	6602	6603	6630	6536

U 1500		6152	6153	6155	6157	6606	6666	6607	6158
U 1510		6177	6189	6191	6192	6291	6292	6294	6295
U 1520		6608	6609	6580	6581	6667	6550	6668	6551
U 1530		6682	6683	6599	6600	6685	6552	6686	6553
U 1540		6567	6569	6570	6571	6572	6573	6687	6574
U 1550		6633	6691	6634	6694	6695	6696	6635	6575
U 1560		6583	6584	6698	6700	6733	6585	6735	6586
U 1570		6737	6739	6740	6741	6742	6743	6744	6587

U 1600		6198	6746	6755	6199	6201	6872	6888	6202
U 1610		6310	6311	6312	6313	6324	6325	6328	6329
U 1620		6889	6890	6893	6898	6900	6590	6905	6591
U 1630		6895	6896	6912	6918	6919	6592	6925	6593
U 1640		6614	6615	6926	6616	6618	6619	6927	6620
U 1650		6624	6931	6916	6917	6625	6627	6932	6628
U 1660		6928	6929	6933	6936	6934	6935	6707	6731
U 1670		6955	6958	6964	6965	6970	6672	6673	6676

U 1700		6380	6381	6383	6384	6392	6393	6395	6396
U 1710		6403	6404	6405	6406	6409	6875	6971	6878
U 1720		6967	6968	6984	6986	7073	7074	7075	6692
U 1730		7093	7094	7108	7105	7112	7113	7116	6693
U 1740		7106	7118	7125	7107	7126	7128	7132	6880
U 1750		7133	7148	7150	7151	7719	7880	7881	6881
U 1760		7882	7889	7896	7891	7897	7898	7902	7903
U 1770		7907	7908	7909	7910	7912			6665

U 2000		7914	7915	6126	6128	7917	7919		6883
U 2010									6884
U 2020					6907				6908
U 2030					6909				6910
U 2040		7001							7026
U 2050									7061
U 2060									
U 2070									7066

U 2100									
U 2110									
U 2120									
U 2130									
U 2140									
U 2150									
U 2160									
U 2170									

; DSK: UCODE; U1 MCR	23:29:12 20-AUG-2018	MICRO 53	KL10 ITS MICROCODE	PAGE 225
; LOCATION / LINE NUMBER INDEX
; UCODE LOC'N	0	1	2	3	4	5	6	7

U 2200									
U 2210									
U 2220									
U 2230									
U 2240									
U 2250									
U 2260									
U 2270									

U 2300									
U 2310									
U 2320									
U 2330									
U 2340									
U 2350									
U 2360									
U 2370									6664

NO ERRORS DETECTED
END OF MICRO CODE ASSEMBLY
USED 1.01 SECONDS
